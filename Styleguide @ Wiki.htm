<!DOCTYPE html>
<!-- saved from url=(0128)https://wiki.yandex.ru/shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide/?from=%252Fshad%252FAlgorithmsStyleguide%252F -->
<html class="i-ua_js_yes i-ua_css_standard i-ua_placeholder_yes i-ua_svg_yes i-ua_inlinesvg_yes i-ua_orient_landscape pointerfocus" lang="ru"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><title>Styleguide @ Wiki</title><script nonce="">;(function(d,e,c,r){e=d.documentElement;c="className";r="replace";e[c]=e[c][r]("i-ua_js_no","i-ua_js_yes");if(d.compatMode!="CSS1Compat")e[c]=e[c][r]("i-ua_css_standart","i-ua_css_quirks")})(document);;(function(d,e,p){e=d.documentElement;p="placeholder";e.className+=" i-ua_"+p+(p in d.createElement("input")?"_yes":"_no")})(document);;(function(d,e,c,n,w,v,f){e=d.documentElement;c="className";n="createElementNS";f="firstChild";w="http://www.w3.org/2000/svg";e[c]+=" i-ua_svg_"+(!!d[n]&&!!d[n](w,"svg").createSVGRect?"yes":"no");v=d.createElement("div");v.innerHTML="<svg/>";e[c]+=" i-ua_inlinesvg_"+((v[f]&&v[f].namespaceURI)==w?"yes":"no");})(document);;document.documentElement.className+=" i-ua_orient_"+(window.innerWidth>window.innerHeight?"landscape":"portrait");;(function(w,e,s,c,x,l,p,d){c="className";x="deviceXDPI";l="logicalXDPI";p="devicePixelRatio";d=x in s&&l in s&&s[x]/s[l]||p in w&&w[p];d>1&&(e[c]+=" i-ua_retina_yes")})(window,document.documentElement,screen);</script><link rel="icon" type="image/png" href="https://wiki.s3.yandex.net/yandex-wiki-www/v10.145.17/business-production-favicon-16.png" sizes="16x16"><link rel="icon" type="image/png" href="https://wiki.s3.yandex.net/yandex-wiki-www/v10.145.17/business-production-favicon-32.png" sizes="32x32"><link rel="icon" type="image/png" href="https://wiki.s3.yandex.net/yandex-wiki-www/v10.145.17/business-production-favicon-64.png" sizes="64x64"><script src="./Styleguide @ Wiki_files/watch.js" defer=""></script><link class="b-page__mask-icon" rel="mask-icon" href="https://wiki.s3.yandex.net/yandex-wiki-www/v10.145.17/business-production-favicon.svg" color="#7bab40"><script src="./Styleguide @ Wiki_files/jquery.min.js" defer="" data-src-id="jquery"></script><script src="./Styleguide @ Wiki_files/lodash.min.js" defer=""></script><script src="./Styleguide @ Wiki_files/backbone-min.js" defer=""></script><script src="./Styleguide @ Wiki_files/split.min.js" defer=""></script><script src="./Styleguide @ Wiki_files/pong.js" defer=""></script><script src="./Styleguide @ Wiki_files/socket.io.2.2.0.js" defer=""></script><script defer="" nonce="" data-src-id="formatter" src="./Styleguide @ Wiki_files/desktop.js"></script><script src="./Styleguide @ Wiki_files/_common.desktop.business.post.ru.all.js" defer=""></script><script src="./Styleguide @ Wiki_files/index.js" defer=""></script><style type="text/css">.x-staff-lite-card{z-index:100500;position:absolute;box-shadow:0 0 10px 0 rgba(0,0,0,0.3);border-radius:1px;background:#fff;max-width:600px;overflow:auto;box-sizing:border-box;opacity:1;margin:0;visibility:visible;transition:visibility .2s,opacity .2s linear,margin .01s linear .19s;}.x-staff-lite-card[aria-hidden]{opacity:0;visibility:hidden;margin:-9999px 0 0 -9999px}.x-staff-lite-card__frame{display:block}.x-staff-lite-card_side_left{margin-left:-10px}.x-staff-lite-card_side_right{margin-left:10px}</style><script src="./Styleguide @ Wiki_files/nearest.js" async="" crossorigin=""></script></head><body class="b-page b-page_type_article b-page_sidebar_closed b-page_service_wiki wiki-session wi-notification pre-styles b-page__body i-global i-ua wiki-session wi-notification pre-styles i-bem b-page_actuality_actual wiki-session_js_inited wi-notification_js_inited i-global_js_inited i-ua_platform_other i-ua_js_inited b-page_js_inited" data-bem="{&quot;wiki-session&quot;:{},&quot;wi-notification&quot;:{},&quot;i-global&quot;:{&quot;lang&quot;:&quot;ru&quot;,&quot;tld&quot;:&quot;ru&quot;,&quot;content-region&quot;:&quot;ru&quot;,&quot;click-host&quot;:&quot;//clck.yandex.ru&quot;,&quot;passport-host&quot;:&quot;https://passport.yandex.ru&quot;,&quot;pass-host&quot;:&quot;https://pass.yandex.ru&quot;,&quot;social-host&quot;:&quot;https://social.yandex.ru&quot;,&quot;export-host&quot;:&quot;https://export.yandex.ru&quot;,&quot;login&quot;:&quot;evg3307&quot;,&quot;lego-static-host&quot;:&quot;https://yastatic.net/lego/2.10-142&quot;,&quot;id&quot;:&quot;wiki&quot;,&quot;hosts&quot;:{&quot;wf-as-a-service&quot;:&quot;https://wiki.yandex.ru/_wf-as-a-service&quot;,&quot;s3&quot;:&quot;https://wiki.s3.yandex.net/yandex-wiki-www/&quot;,&quot;wikiApi&quot;:{&quot;https&quot;:true,&quot;prefix&quot;:&quot;/_api/frontend&quot;,&quot;host&quot;:&quot;wiki-api.yandex.ru&quot;,&quot;frontend&quot;:&quot;https://wiki-api.yandex.ru/_api/frontend&quot;,&quot;v1&quot;:&quot;https://wiki-api.yandex.ru/_api/v1&quot;},&quot;forms&quot;:&quot;https://connect.yandex.ru&quot;,&quot;staticPrefix&quot;:&quot;/_m&quot;,&quot;yastatic&quot;:&quot;https://yastatic.net/q/wiki-front-business-{PLATFORM}/v10.145.17&quot;,&quot;blackbox&quot;:{&quot;url&quot;:&quot;http://blackbox.yandex.net&quot;},&quot;apiPassport&quot;:{&quot;url&quot;:&quot;https://api.passport.yandex.ru&quot;},&quot;techPassport&quot;:{&quot;url&quot;:&quot;https://pass.yandex.ru&quot;},&quot;passport&quot;:{&quot;url&quot;:&quot;https://passport.yandex.ru&quot;},&quot;connect&quot;:{&quot;url&quot;:&quot;https://connect.yandex.ru&quot;,&quot;host&quot;:&quot;connect.yandex.ru&quot;},&quot;staff&quot;:{&quot;url&quot;:&quot;https://staff.yandex.ru/&quot;},&quot;startrek&quot;:{&quot;url&quot;:&quot;https://tracker.yandex.ru/&quot;},&quot;search&quot;:{&quot;url&quot;:&quot;https://connect.yandex.ru/search/wiki&quot;},&quot;avatarsMds&quot;:{&quot;url&quot;:&quot;https://avatars.mds.yandex.net&quot;},&quot;avatars&quot;:{&quot;url&quot;:&quot;https://avatars.yandex.net/get-yapic/&quot;},&quot;support&quot;:{&quot;url&quot;:&quot;https://yandex.ru/support/connect/wiki/&quot;},&quot;directory&quot;:{&quot;url&quot;:&quot;https://api-internal.directory.ws.yandex.net&quot;},&quot;directoryApi&quot;:{&quot;url&quot;:&quot;https://api.directory.yandex.ru&quot;},&quot;suggest&quot;:{&quot;url&quot;:&quot;https://connect.yandex.ru/suggest/&quot;},&quot;feedbackForm&quot;:&quot;https://forms.yandex.ru/surveys/6768/&quot;,&quot;magicLinksApi&quot;:&quot;https://magiclinks.yandex.ru/magiclinks/v1/links/&quot;,&quot;schi&quot;:{&quot;url&quot;:&quot;https://wf-biz.tools.yandex.ru&quot;},&quot;translateApi&quot;:&quot;https://translate.yandex.net/api/v1/tr.json/translate&quot;,&quot;docviewer&quot;:{&quot;url&quot;:&quot;https://docviewer.yandex.ru/&quot;}},&quot;secretkey&quot;:&quot;y323216ff3e308ccefde215a2a8bc4e0b&quot;,&quot;displayName&quot;:&quot;&quot;,&quot;force_desktop&quot;:false,&quot;page_data&quot;:{&quot;supertag&quot;:&quot;shad/groups/2019/semester1/algorithms1/algorithmsstyleguide&quot;},&quot;forceOldWf&quot;:false,&quot;forceNewWf&quot;:false,&quot;orgId&quot;:&quot;3668647&quot;,&quot;userSettings&quot;:{&quot;language&quot;:&quot;ru&quot;,&quot;code_theme&quot;:&quot;github&quot;,&quot;use_new_wf&quot;:false,&quot;use_nodejs_frontend&quot;:true,&quot;use_full_width_content&quot;:false,&quot;propose_content_translation&quot;:false}},&quot;i-ua&quot;:{},&quot;b-page&quot;:{&quot;supertag&quot;:&quot;/shad/groups/2019/semester1/algorithms1/algorithmsstyleguide&quot;,&quot;login&quot;:&quot;evg3307&quot;,&quot;uid&quot;:21359538,&quot;full_width_content&quot;:false,&quot;codeTheme&quot;:&quot;github&quot;,&quot;notifier&quot;:{},&quot;hasOldForm&quot;:false}}" data="{&quot;user&quot;:{&quot;error&quot;:&quot;OK&quot;,&quot;login&quot;:&quot;evg3307&quot;,&quot;lang&quot;:&quot;ru&quot;,&quot;country&quot;:&quot;ru&quot;,&quot;organizationIds&quot;:&quot;3668647&quot;,&quot;status&quot;:&quot;VALID&quot;,&quot;uid&quot;:&quot;21359538&quot;,&quot;havePassword&quot;:true,&quot;haveHint&quot;:true,&quot;karma&quot;:0,&quot;age&quot;:30023,&quot;ttl&quot;:&quot;5&quot;,&quot;displayName&quot;:&quot;evg3307&quot;,&quot;avatar&quot;:{&quot;default&quot;:&quot;21493/enc-9d4b777cc48254e59350250ed08c21a4d4244a9ff2dd625fc99e2cbf3aa36589&quot;,&quot;empty&quot;:false}},&quot;pre&quot;:true}" data-cache="10.145.17"><style nonce="">@keyframes islands-spin2{0%{transform:rotate(0deg)}to{transform:rotate(360deg)}}@keyframes popup2_theme_normal_bottom{0%{visibility:visible;margin:0;opacity:1;transform:translateY(0)}99%{margin:0;transform:translateY(10px)}to{visibility:hidden;margin:-9999px 0 0 -9999px;opacity:0}}@keyframes popup2_theme_normal_bottom_visible{0%{opacity:0;transform:translateY(10px)}to{opacity:1;transform:translateY(0)}}@keyframes popup2_theme_normal_top{0%{visibility:visible;margin:0;opacity:1;transform:translateY(0)}99%{margin:0;transform:translateY(-10px)}to{visibility:hidden;margin:-9999px 0 0 -9999px;opacity:0}}@keyframes popup2_theme_normal_top_visible{0%{opacity:0;transform:translateY(-10px)}to{opacity:1;transform:translateY(0)}}@keyframes popup2_theme_normal_right{0%{visibility:visible;margin:0;opacity:1;transform:translateX(0)}99%{margin:0;transform:translateX(10px)}to{visibility:hidden;margin:-9999px 0 0 -9999px;opacity:0}}@keyframes popup2_theme_normal_right_visible{0%{opacity:0;transform:translateX(10px)}to{opacity:1;transform:translateX(0)}}@keyframes popup2_theme_normal_left{0%{visibility:visible;margin:0;opacity:1;transform:translateX(0)}99%{margin:0;transform:translateX(-10px)}to{visibility:hidden;margin:-9999px 0 0 -9999px;opacity:0}}@keyframes popup2_theme_normal_left_visible{0%{opacity:0;transform:translateX(-10px)}to{opacity:1;transform:translateX(0)}}@keyframes light-popup_theme_normal_bottom{0%{visibility:visible;opacity:1;transform:translateY(0)}99%{transform:translateY(10px)}to{visibility:hidden;opacity:0}}@keyframes light-popup_theme_normal_bottom_visible{0%{opacity:0;transform:translateY(10px)}to{opacity:1;transform:translateY(0)}}@keyframes button2-progress{0%{background-position:-12px 0}to{background-position:0 0}}@keyframes button2-action-focus{0%,to{background-color:#fc0}40%,60%{background-color:#ffe066}}@font-face{font-family:'FontAwesome';src:url(../../../../../_m/llzo9oj-2-7VBO_UmLycFiLRI2I.eot?v=4.6.3);src:url(../../../../../_m/llzo9oj-2-7VBO_UmLycFiLRI2I.eot?#iefix&amp;v=4.6.3) format('embedded-opentype'),url(../../../../../_m/l-Q4zFRXFDCYgvvOrb80T8rdzsU.woff2?v=4.6.3) format('woff2'),url(../../../../../_m/bX5qX8gCsTaU2IIPwBOAN8CXfS4.woff?v=4.6.3) format('woff'),url(../../../../../_m/YdjZZ4B-8SWY2BWC-pW59gDD7gE.ttf?v=4.6.3) format('truetype'),url(../../../../../_m/wFIicruu8qyz00GRJ1TW6i0Oz8A.svg?v=4.6.3#fontawesomeregular) format('svg');font-weight:400;font-style:normal}.awesome-icon:before{display:inline-block;font:14px/1 FontAwesome;font-size:inherit;text-rendering:auto;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}[touch-action=auto]{-ms-touch-action:auto;touch-action:auto}[touch-action=pan-y]{-ms-touch-action:pan-y;touch-action:pan-y}[touch-action=pan-x]{-ms-touch-action:pan-x;touch-action:pan-x}[touch-action="pan-y pan-x"],[touch-action=pan-x pan-y]{-ms-touch-action:pan-x pan-y;touch-action:pan-x pan-y}.m-head-services{white-space:nowrap;border-right:1px solid rgba(0,0,0,.1);border-bottom:1px solid rgba(0,0,0,.1);background:#fff}.m-head-services__error{padding:10px}.m-head-services__icon{position:absolute;top:50%;left:20px;width:16px;height:16px;margin-top:-8px;background-repeat:no-repeat}.m-head-services_column_mono .m-head-services__list{width:auto;column-count:1}.m-head-services_column_mono .m-head-services__list .link{position:relative;display:block;width:auto;padding-right:20px;padding-left:30px;white-space:nowrap}.m-head-services_type_user{border-right:none;border-left:1px solid rgba(0,0,0,.1)}.m-head-services_type_user .link:before{position:absolute;left:11px;width:20px;line-height:34px}.m-head-services__left{border-right:1px solid #eee}.m-head-services__left,.m-head-services__right{display:inline-block;width:50%;padding-top:4px;vertical-align:top;white-space:normal}.m-head-services__list .link{position:relative;display:block;box-sizing:border-box;padding-right:40px;padding-left:50px;outline:0;transition:color .15s ease-out,background .15s ease-out}.m-head-services__list .link_state_current,.m-head-services__list .link_state_current:visited:not(:hover){color:#b2b3b8}.m-head-services__list .link_state_current .m-head-services__icon{opacity:.3}.m-head-services__list .link:hover{background:#ffeaae}.m-head-services__list .link{margin:4px 0;font-size:16px;line-height:32px;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.m-head-services__list_type_main .link{margin-bottom:8px;font-size:20px;line-height:40px}.link__inner{color:inherit}.m-head-menu__item{position:relative;margin-right:30px;padding:0;vertical-align:top;border-top:3px solid transparent;transition:border-color .15s ease-out}.m-head-menu__item .link{position:relative;top:-3px;display:inline-block;white-space:nowrap;font-size:15px;line-height:50px;transition:all .15s ease-out;color:#000}.m-head-menu__item .link:visited{color:#000}.m-head-menu__item_current_yes{border-top-color:#777}.m-head-menu__item.m-head-menu__item_current_yes&gt;.link,.m-head-menu__item.m-head-menu__item_current_yes&gt;.link:visited{color:#777}.m-head-menu__item_current_yes .m-head-menu__item_current_yes .link{position:relative}.m-head-menu__item_current_yes .m-head-menu__item_current_yes .link:before{position:absolute;top:2px;left:10px;content:'\2713';font-size:13px}.m-head-menu__item_hassub_yes .link .awesome-icon_icon_chevron-down:before{position:relative;top:-1px;height:7px;font-size:11px;line-height:7px;transition:transform .3s}.m-head-menu__item_is_opened .link .m-head-menu__icon:before{-ms-transform:rotate(-180deg);transform:rotate(-180deg)}.m-head-menu__item_hassub_yes .link .m-head-menu__icon{position:relative;margin-left:5px}.m-head-menu__item .link_pseudo_yes .link__inner{border-bottom:none}.m-head-menu__item&gt;.m-head-menu__list{z-index:99999;display:block}.m-head-menu__item:last-child{margin-right:0}.m-head-menu_mode_more .m-head-menu__item,.m-head-menu_type_open .m-head-menu__list .m-head-menu__item{border:0}.m-head-menu_type_open .m-head-menu__item{margin-right:0}.m-head-menu_type_open .m-head-menu__item .link{display:block;padding:0 18px 0 16px}.m-head-menu__list{display:-ms-flexbox;display:flex;-ms-flex-line-pack:center;align-content:center;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:justify;justify-content:space-between}.m-head-menu_type_open .m-head-menu__list{min-width:0}.m-head-menu_type_open .m-head-menu__item_hassub_yes .m-head-menu__list{border-top:1px solid #c8c7c5}.m-head-menu__more{cursor:pointer;font-size:15px;line-height:50px;border-top:3px solid transparent}.m-head-menu__more .link{position:relative;top:-3px;font-size:30px;line-height:15px;color:#000}.m-head-menu__more:hover .link{color:#d00!important}.popup2__tail{position:absolute;z-index:1;width:10px;height:10px}.popup2_direction_top-center .popup2__tail,.popup2_direction_top-left .popup2__tail,.popup2_direction_top-right .popup2__tail{-ms-transform:rotate(-45deg);transform:rotate(-45deg)}.popup2_direction_bottom-center .popup2__tail,.popup2_direction_bottom-left .popup2__tail,.popup2_direction_bottom-right .popup2__tail{-ms-transform:rotate(135deg);transform:rotate(135deg)}.popup2_direction_left-bottom .popup2__tail,.popup2_direction_left-center .popup2__tail,.popup2_direction_left-top .popup2__tail{-ms-transform:rotate(-135deg);transform:rotate(-135deg)}.popup2_direction_right-bottom .popup2__tail,.popup2_direction_right-center .popup2__tail,.popup2_direction_right-top .popup2__tail{-ms-transform:rotate(45deg);transform:rotate(45deg)}.button2__text{display:inline-block;resize:none;white-space:nowrap}.button2 .button2__icon,.button2__text{position:relative;pointer-events:none}.button2 .button2__icon_side_left{position:absolute;top:0;left:0}.button2 .button2__icon_side_right{position:absolute;top:0;right:0}.icon{display:inline-block;background-repeat:no-repeat;background-position:50%}.icon:after,.spin2:after{visibility:hidden;content:'\00A0'}.scroll__native{overflow:auto;height:100%}.i-ua_js_yes .scroll__native::-webkit-scrollbar{width:0;height:0}.scroll__content{position:relative}.scroll__track{position:absolute;transition:width .1s,height .1s,background .1s}.i-ua_js_no .scroll__track{display:none}.scroll__track_orientation_vertical{top:0;right:0;bottom:14px;width:14px}.scroll__track_orientation_vertical.scroll__track_hovered_yes{width:17px}.scroll__track_orientation_horizontal{right:14px;bottom:0;left:0;height:14px}.scroll__track_orientation_horizontal.scroll__track_hovered_yes{height:17px}.scroll_single_vertical&gt;.scroll__track_orientation_vertical{bottom:0}.scroll_single_vertical&gt;.scroll__track_orientation_horizontal{height:0}.scroll_single_horizontal&gt;.scroll__track_orientation_horizontal{right:0}.scroll_single_horizontal&gt;.scroll__track_orientation_vertical{width:0}.scroll__thumb{position:absolute;border-radius:10px}.scroll__thumb_orientation_vertical{right:3px;left:3px}.spin2{display:none;box-sizing:border-box;border:2px solid transparent;border-radius:100px;background-image:url(../../../../../_m/lMheXM1Y3XcixfNpGnrupH6cjfc.gif);background-image:linear-gradient(to right,transparent,transparent)}.spin2_progress_yes{display:inline-block;animation:islands-spin2 1s .21s infinite linear;-webkit-backface-visibility:hidden;backface-visibility:hidden}.tooltip__backdrop{position:absolute;top:0;right:0;bottom:0;left:0}.tooltip__backdrop:before{display:block;width:100%;height:100%;content:'';border-radius:.1px;background:#fff;box-shadow:0 10px 20px -5px rgba(0,0,0,.4)}.tooltip_shown_yes .tooltip__backdrop{z-index:-1}.input__box,.input__control{position:relative;box-sizing:border-box}.input__box{display:block;cursor:text}.input__box:before{position:absolute;top:0;right:0;bottom:0;left:0;padding:0;content:'';background-clip:padding-box}.input__control{z-index:3;width:100%;margin:0;padding:0;font-size:100%;vertical-align:top;color:#000;border:0 solid transparent;outline:0;background:0 0;-webkit-tap-highlight-color:transparent;-webkit-appearance:none}.input__control::-webkit-search-decoration{-webkit-appearance:none}.input__control::-webkit-search-cancel-button{display:none}.input__control::-ms-clear{display:none}.input__control:-webkit-autofill{border-top-width:2px;border-bottom-width:2px;background-clip:content-box;-webkit-box-shadow:inset 0 0 0 50px #fff;-webkit-text-fill-color:#000}.input__control::-webkit-input-placeholder{-webkit-text-fill-color:#999}.textinput__box{position:absolute;z-index:1;top:0;right:0;bottom:0;left:0;box-sizing:border-box;border-style:solid}.textinput__control{position:relative;z-index:2;box-sizing:border-box;width:100%;margin:0;padding:0;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:100%;vertical-align:top;border:0 solid transparent;outline:0;background:0 0;-webkit-tap-highlight-color:transparent}.textinput_disabled_yes .textinput__control{z-index:3;cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.textinput__control::-webkit-search-decoration{-webkit-appearance:none;appearance:none}.textinput__control::-webkit-search-cancel-button{display:none}.textinput__control::-ms-clear{display:none}.textinput__control.textinput__control:-webkit-autofill{border-top-width:2px;border-bottom-width:2px;background-clip:content-box;box-shadow:inset 0 0 0 50px #fff;-webkit-text-fill-color:#000}.textinput__control::-webkit-input-placeholder{opacity:1}.textinput__control:-ms-input-placeholder{opacity:1}.textinput__control::placeholder{opacity:1}.textinput__clear{right:0;display:none;visibility:hidden;cursor:pointer;transition:opacity .1s ease-out,visibility 0s linear .1s}.textinput_view_classic .textinput__clear{opacity:0}.textinput__clear.textinput__clear_visible_yes{display:block;visibility:visible}.textinput_disabled_yes .textinput__clear_visible_yes{z-index:0;cursor:default}.textinput_view_classic .textinput__clear.textinput__clear_visible_yes{opacity:.3}.textinput_view_classic .textinput__clear_visible_yes.textinput__clear:hover,.textinput_view_classic .textinput__clear_visible_yes.textinput__clear_hovered_yes{opacity:1}.textinput_view_classic.textinput_disabled_yes .textinput__clear_visible_yes{opacity:.1}.textinput__icon.textinput__icon{position:absolute}.textinput__icon{z-index:3;top:0}.textinput__icon_side_right{right:0}.m-userpic{display:inline-block}.m-suggest-item__info-link{overflow:hidden;margin-left:.5ex;white-space:nowrap;text-overflow:ellipsis;color:#ccc;font-size:13px}.m-suggest-item__info-icon{display:inline-block;width:16px;height:16px;margin:0 0 -3px .7ex}.m-suggest-item__info-icon_type_abc{background:url(../../../../../_m/GqA2HL41huOPwWH3zNf9phvmD-Q.png)}.image{font:0/0 a;border:0}.m-username{display:inline-block;font-weight:400;color:#000!important}.m-username__first-letter,a.m-username:hover{color:red!important}.m-username,.m-username__first-letter{text-decoration:none!important}.spin2_size_m{width:32px;height:32px;font-size:15px;line-height:28px;background-position:-2px -73px}.spin2_size_m.spin2_position_center{margin-top:-16px;margin-left:-16px}.notifier__box{position:relative;display:inline-block;width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;vertical-align:middle}.notifier__icon{fill:#000}.notifier__icon,.notifier__icon svg{width:100%;height:100%}.notifier__bell{transition:transform .1s ease-out;transform:translateZ(0);will-change:transform}.notifier__ticker{position:absolute;border-radius:50%;background-color:red;transition:transform .08s ease-out;-ms-transform:scale(0);transform:scale(0)}.notifier__spin{z-index:2}.notifier__content{width:376px;height:506px}.notifier__popup{background-color:#fff}.notifier__popup:after{position:absolute;top:0;right:0;bottom:0;left:0;content:'';background:#fff;transition:opacity .15s ease}.notifier__popup_loaded_yes:after{visibility:hidden;opacity:0}.notifier__popup .popup2__tail{width:11px;height:11px}.notifier__popup iframe,.notifier__popup.popup2.popup2_view_default:before,.notifier__popup:after{border-radius:3px}.header2,.header2__main{position:relative;z-index:100}.header2 .header2__main{border-bottom:2px solid #fc0}.header2 .header2__menu-item{display:inline-block;margin-left:20px;font-size:15px}.header2 .header2__menu-item .link{color:#000;outline:0}.header2__nav .user{margin-right:20px;margin-left:15px;vertical-align:middle}.header2__main{z-index:10;display:table;box-sizing:border-box;width:100%;height:70px;border-bottom:1px solid rgba(0,0,0,.06);background:#fff}.header2__left{width:100%;padding-top:17px;vertical-align:top}.header2__left,.header2__logo{display:table-cell;white-space:nowrap}.header2__logo,.header2__logo .logo,.header2__right{vertical-align:top}.header2__right{display:table-cell;padding:17px 20px 0 12px;text-align:right;white-space:nowrap}.header2__right .user{margin-top:-3px;margin-bottom:-3px}.header2__gap{margin-left:12px}.logo{display:inline-block;background-repeat:no-repeat;background-position:center;background-size:contain}@media print{.logo{-webkit-print-color-adjust:exact}}.logo_name_en-84x36{width:84px;height:36px;background-image:url(../../../../../_m/HTJ-LZvLlnDn73VKP2N-9Vw8g3g.svg)}.logo_name_ys-ru-69x28{width:69px;height:28px;background-image:url(../../../../../_m/uJ_Zm5hWZSSof-dNMmUQsZb5nPs.svg)}.logo_name_ys-en-69x28{width:69px;height:28px;background-image:url(../../../../../_m/5lLlgI9aVV8WJihjejTC7adNHJk.svg)}.button2__control{display:none}.icon_type_burger{background-image:url(../../../../../_m/o1f4aI8MEpzuP1LiSZ_PMUe1phw.svg)}.icon_type_burger:hover{background-image:url(../../../../../_m/gfQbJl0D0s36s9H_QAzEH4D_6qI.svg)}.icon_type_plus{background-image:url(../../../../../_m/P7w23Tu_Fg4UYI_QmJUVmOdAz4.svg)}.icon_type_search{background-image:url(../../../../../_m/ImWJdtvYa-NnwKABghuaeJGw1TQ.svg)}.icon_type_settings{background-image:url(../../../../../_m/sfY-Ew6NhLuNdxmi8By62Ujj1QI.svg)}.search2{display:inline-table}.search2__input{vertical-align:top}.search2__button,.search2__input{display:table-cell}.icon_type_arrow{background-image:url(../../../../../_m/xvUSLkGFzmuiEoMmMp4yQ2wbLv4.svg);transition:transform .1s ease-out}.icon_size_xs.icon_type_arrow{background-image:url(../../../../../_m/s3u43JJk0FDGlx_GF5tYhvCgx8Q.svg)}.icon_type_arrow.icon_direction_left{-ms-transform:rotate(90deg);transform:rotate(90deg)}.icon_type_arrow.icon_direction_top{-ms-transform:rotate(180deg);transform:rotate(180deg)}.icon_type_arrow.icon_direction_right{-ms-transform:rotate(-90deg);transform:rotate(-90deg)}.icon_has-glyph_yes,.service{position:relative}.icon_has-glyph_yes svg{position:absolute;top:50%;left:50%;-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);fill:currentColor}.icon_has-glyph_yes svg *{fill:currentColor}.services-table .services-table__item{display:inline-block;text-align:center;text-decoration:none;width:160px;height:100px}.services-table .services-table__item .service,.services-table .services-table__item .service__url{width:100%;height:100%}.services-table .services-table__item .service__name{color:#000}.services-table .services-table__item .service__icon{margin-top:12px}.services-table .services-table__item:hover .service__icon,.user2__footer-link.user2__footer-link.button2_hovered_yes[class] .button2__text{opacity:.6}.service{display:inline-block;margin:0;font-size:15px;line-height:16px;text-align:center}.service__name{display:block}.service__url{display:inline-block;text-decoration:none}.service__icon{display:inline-block;background-repeat:no-repeat;background-position:center}.services-table__footer{text-align:center}.services-table .services-table__all{margin-top:22px}.a11y-hidden{position:absolute;left:-32767px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.user2__enter .icon{background-image:url(../../../../../_m/oUNQX9v2uuXXQn8niWKRZn8Gyi4.svg)}.user-account__pic{position:relative;vertical-align:middle}.utilityfocus .user-account_focused_yes .user-account__pic:after{position:absolute;top:-1px;right:-1px;bottom:-1px;left:-1px;box-sizing:border-box;content:'';border:2px solid #ffdb4d;border-radius:50px}.utilityfocus .user-account_focused_yes .user-account__pic.user-pic_has-plus_yes:after{top:50%;left:50%}.user-account__pic~.user-account__name{margin-left:10px}.user-pic{position:relative;display:inline-block;width:42px;height:42px}.user-pic_has-plus_yes:after{position:absolute;z-index:0;top:50%;left:50%;width:52px;height:52px;margin:-26px 0 0 -26px;content:'';background:url(../../../../../_m/xLv4sNb1hlTin5Yx_b-q3E1snY4.svg) center center no-repeat;background-size:contain}.user-pic__image{width:100%;height:100%;border-radius:100px;background-color:#fff;object-fit:cover}.user-account__name{display:inline-block;font-size:15px;vertical-align:middle;white-space:nowrap}.user-account_hide-name_yes .user-account__name{display:none}.user-account__logout.user-account__logout{position:absolute;top:50%;right:13px;display:none;margin-top:-8px;cursor:pointer;opacity:.2}.user-account_hovered_yes .icon.user-account__logout{display:block;transition:opacity .2s ease-out}.user-account__logout:hover{opacity:1}.user-account__ticker{position:absolute;right:100%;margin-right:-41px}.user-account__ticker.user-account__ticker .ticker__count,h1,h2,h3,h4,h5,h6{font-weight:400}.ticker .ticker__count{display:inline-block;text-decoration:none;color:#fff;border-radius:15px;background:red;-webkit-font-smoothing:subpixel-antialiased}.ticker__value{display:inline-block;padding:0 4px}.ticker__plain .ticker__value{cursor:default}.user2__popup.light-popup{top:100%;right:-2px;width:auto}.user2__popup.light-popup.light-popup_visible_yes{z-index:10;margin-top:-46px;border:1px solid rgba(0,0,0,.06);background:#fff}.user2__popup.light-popup:before{position:absolute;z-index:-1;top:0;right:0;bottom:0;left:0;content:'';border-radius:.1px;box-shadow:0 10px 20px -5px rgba(0,0,0,.4)}.user2__menu{overflow-y:auto;width:280px;font-size:13px;line-height:27px;text-align:left}.user2__menu.user2__menu{display:block}.user2__menu .menu__group{padding:4px 0 16px;border-bottom:1px solid rgba(0,0,0,.1)}.user2__menu .menu__item_type_link{display:block;padding:0 19px;cursor:pointer;text-decoration:none;text-indent:56px;color:#000;outline:0}.user2__menu .menu__item.menu__item_hovered_yes{background-color:#ededed}.user2__menu-footer{background:#f3f1ed;transform:translateZ(0)}.user2__footer-link.button2{width:50%;height:40px;line-height:40px;color:#333}.user2__footer-link.button2 .button2__text{opacity:1}.user2__menu-header .user-account{padding:15px 0 0 19px}.user2__menu-header .user-account__name{font-size:13px;font-weight:700}.user2__menu .user-account{display:block;box-sizing:border-box;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text}.user2__menu .user-account__name,.user2__menu .user-account__subname{overflow:hidden;max-width:185px;text-overflow:ellipsis}.user2__menu .user-account__subname::before{content:" "}.user2__menu .user-account_has-logout_yes .user-account__name{max-width:160px}.user2__menu .user-account__pic{display:inline-block;width:42px;height:42px}.user2__menu .user-account__ticker{margin-right:-61px}.user2__menu .user-account__pic~.user-account__name{margin-left:14px}.user2__multi-auth .user-account{padding:5px 13px 5px 19px;cursor:pointer}.user2__multi-auth.user2__multi-auth .menu__item_hovered_yes{color:#000}.user2__menu-counter{padding-left:.6em;font-weight:700}.user2__menu-item_action_plus{position:relative}.user2__menu .user2__menu-item.user2__menu-item_hidden_yes{display:none}.user2__menu .user2__menu-item.user2__menu-item_action_plus{margin-bottom:12px;color:#2d47e8}.user2__menu .user2__menu-item_plus-icon_yes[class]{padding-left:68px;color:#000}.user2__plus-badge{position:absolute;top:6px;left:75px;width:44px;height:16px;background:url(../../../../../_m/gHwjtfLLqCx5MG__CJddvh3GsDg.svg) center center no-repeat;background-size:contain}.icon_glyph_x-sign.icon_size_xs,.icon_glyph_x-sign.icon_size_xs svg{width:16px;height:16px}.icon_glyph_x-sign.icon_size_s,.icon_glyph_x-sign.icon_size_s svg{width:20px;height:20px}.icon_glyph_x-sign.icon_size_m,.icon_glyph_x-sign.icon_size_m svg{width:24px;height:24px}.user2__accounts{padding:10px 0}.user2__accounts-container .user-account .user-account__name{font-size:13px;font-weight:700}.user2__accounts-container .menu__item{margin-bottom:1px}.user2__add-account .user-account__name{font-size:13px;line-height:16px;white-space:normal}.user2__add-account .user-account__pic:before{position:absolute;top:-1px;right:-1px;bottom:-1px;left:-1px;content:'';opacity:.6;border:1px solid #b3b3b3;border-radius:50px;background:#ccc url(../../../../../_m/A8tpRiU5BCb0A-o6dXHsT_tMx9s.svg) center no-repeat}.user2__accounts .user2__add-account_hidden_yes{display:none}.user-account__subname{font-weight:500;color:#999}.user2__accounts-spin{margin:6px auto}.user2__accounts-spin.spin2_progress_yes{display:block}.user-organization__pic{position:relative;display:inline-block;width:42px;height:42px;vertical-align:middle;border-radius:100px;overflow:hidden}.user-organization__image{width:100%;height:100%}.user-organization__name{display:inline-block;vertical-align:middle;white-space:nowrap;overflow:hidden;max-width:170px;text-overflow:ellipsis;font-size:13px;margin-left:14px}.user2__add-organization{display:block;line-height:42px;padding:5px 30px;text-decoration:none;color:#000;outline:0}.user2__add-organization:hover{background-color:#ededed}.user2__add-org-name,.user2__add-org-pic{display:inline-block;vertical-align:middle}.user2__add-org-pic{width:20px;height:20px;background:url(../../../../../_m/Kr9oHaVRdBso68MT1qQ-YDZ3Vkw.svg) center no-repeat}.user2__add-org-name{white-space:nowrap;overflow:hidden;max-width:175px;text-overflow:ellipsis;font-size:13px;margin-left:25px;line-height:17px;color:#828282}.icon_glyph_type-arrow.icon_direction_left{-ms-transform:rotate(90deg);transform:rotate(90deg)}.icon_glyph_type-arrow.icon_direction_top{-ms-transform:rotate(180deg);transform:rotate(180deg)}.icon_glyph_type-arrow.icon_direction_right{-ms-transform:rotate(-90deg);transform:rotate(-90deg)}.icon_glyph_type-arrow svg{width:13px;height:8px}.icon_glyph_type-arrow.icon_size_xs svg{width:11px;height:7px}.icon_glyph_type-arrow.icon_size_s svg{width:15px;height:9px}.icon_glyph_type-arrow{transition:transform .1s ease-out}.pre-styles.b-page_type_pre{font-family:Helvetica,Arial,sans-serif}.pre-styles.b-page_type_pre .m-head-user{pointer-events:none}.pre-styles.b-page_type_pre .b-favs,.pre-styles.b-page_type_pre .button2_type_new-page,.pre-styles.b-page_type_pre .dropdown_type_services{pointer-events:none;opacity:.3}.pre-styles.b-page_type_pre .user2{pointer-events:none}.awesome-icon_icon_glass:before{content:"\f000"}.awesome-icon_icon_music:before{content:"\f001"}.awesome-icon_icon_search:before{content:"\f002"}.awesome-icon_icon_envelope-o:before{content:"\f003"}.awesome-icon_icon_heart:before{content:"\f004"}.awesome-icon_icon_star:before{content:"\f005"}.awesome-icon_icon_star-o:before{content:"\f006"}.awesome-icon_icon_user:before{content:"\f007"}.awesome-icon_icon_film:before{content:"\f008"}.awesome-icon_icon_th-large:before{content:"\f009"}.awesome-icon_icon_th:before{content:"\f00a"}.awesome-icon_icon_th-list:before{content:"\f00b"}.awesome-icon_icon_check:before{content:"\f00c"}.awesome-icon_icon_close:before,.awesome-icon_icon_remove:before,.awesome-icon_icon_times:before{content:"\f00d"}.awesome-icon_icon_search-plus:before{content:"\f00e"}.awesome-icon_icon_search-minus:before{content:"\f010"}.awesome-icon_icon_power-off:before{content:"\f011"}.awesome-icon_icon_signal:before{content:"\f012"}.awesome-icon_icon_cog:before,.awesome-icon_icon_gear:before{content:"\f013"}.awesome-icon_icon_trash-o:before{content:"\f014"}.awesome-icon_icon_home:before{content:"\f015"}.awesome-icon_icon_file-o:before{content:"\f016"}.awesome-icon_icon_clock-o:before{content:"\f017"}.awesome-icon_icon_road:before{content:"\f018"}.awesome-icon_icon_download:before{content:"\f019"}.awesome-icon_icon_arrow-circle-o-down:before{content:"\f01a"}.awesome-icon_icon_arrow-circle-o-up:before{content:"\f01b"}.awesome-icon_icon_inbox:before{content:"\f01c"}.awesome-icon_icon_play-circle-o:before{content:"\f01d"}.awesome-icon_icon_repeat:before,.awesome-icon_icon_rotate-right:before{content:"\f01e"}.awesome-icon_icon_refresh:before{content:"\f021"}.awesome-icon_icon_list-alt:before{content:"\f022"}.awesome-icon_icon_lock:before{content:"\f023"}.awesome-icon_icon_flag:before{content:"\f024"}.awesome-icon_icon_headphones:before{content:"\f025"}.awesome-icon_icon_volume-off:before{content:"\f026"}.awesome-icon_icon_volume-down:before{content:"\f027"}.awesome-icon_icon_volume-up:before{content:"\f028"}.awesome-icon_icon_qrcode:before{content:"\f029"}.awesome-icon_icon_barcode:before{content:"\f02a"}.awesome-icon_icon_tag:before{content:"\f02b"}.awesome-icon_icon_tags:before{content:"\f02c"}.awesome-icon_icon_book:before{content:"\f02d"}.awesome-icon_icon_bookmark:before{content:"\f02e"}.awesome-icon_icon_print:before{content:"\f02f"}.awesome-icon_icon_camera:before{content:"\f030"}.awesome-icon_icon_font:before{content:"\f031"}.awesome-icon_icon_bold:before{content:"\f032"}.awesome-icon_icon_italic:before{content:"\f033"}.awesome-icon_icon_text-height:before{content:"\f034"}.awesome-icon_icon_text-width:before{content:"\f035"}.awesome-icon_icon_align-left:before{content:"\f036"}.awesome-icon_icon_align-center:before{content:"\f037"}.awesome-icon_icon_align-right:before{content:"\f038"}.awesome-icon_icon_align-justify:before{content:"\f039"}.awesome-icon_icon_list:before{content:"\f03a"}.awesome-icon_icon_dedent:before,.awesome-icon_icon_outdent:before{content:"\f03b"}.awesome-icon_icon_indent:before{content:"\f03c"}.awesome-icon_icon_video-camera:before{content:"\f03d"}.awesome-icon_icon_image:before,.awesome-icon_icon_photo:before,.awesome-icon_icon_picture-o:before{content:"\f03e"}.awesome-icon_icon_pencil:before{content:"\f040"}.awesome-icon_icon_map-marker:before{content:"\f041"}.awesome-icon_icon_adjust:before{content:"\f042"}.awesome-icon_icon_tint:before{content:"\f043"}.awesome-icon_icon_edit:before,.awesome-icon_icon_pencil-square-o:before{content:"\f044"}.awesome-icon_icon_share-square-o:before{content:"\f045"}.awesome-icon_icon_check-square-o:before{content:"\f046"}.awesome-icon_icon_arrows:before{content:"\f047"}.awesome-icon_icon_step-backward:before{content:"\f048"}.awesome-icon_icon_fast-backward:before{content:"\f049"}.awesome-icon_icon_backward:before{content:"\f04a"}.awesome-icon_icon_play:before{content:"\f04b"}.awesome-icon_icon_pause:before{content:"\f04c"}.awesome-icon_icon_stop:before{content:"\f04d"}.awesome-icon_icon_forward:before{content:"\f04e"}.awesome-icon_icon_fast-forward:before{content:"\f050"}.awesome-icon_icon_step-forward:before{content:"\f051"}.awesome-icon_icon_eject:before{content:"\f052"}.awesome-icon_icon_chevron-left:before{content:"\f053"}.awesome-icon_icon_chevron-right:before{content:"\f054"}.awesome-icon_icon_plus-circle:before{content:"\f055"}.awesome-icon_icon_minus-circle:before{content:"\f056"}.awesome-icon_icon_times-circle:before{content:"\f057"}.awesome-icon_icon_check-circle:before{content:"\f058"}.awesome-icon_icon_question-circle:before{content:"\f059"}.awesome-icon_icon_info-circle:before{content:"\f05a"}.awesome-icon_icon_crosshairs:before{content:"\f05b"}.awesome-icon_icon_times-circle-o:before{content:"\f05c"}.awesome-icon_icon_check-circle-o:before{content:"\f05d"}.awesome-icon_icon_ban:before{content:"\f05e"}.awesome-icon_icon_arrow-left:before{content:"\f060"}.awesome-icon_icon_arrow-right:before{content:"\f061"}.awesome-icon_icon_arrow-up:before{content:"\f062"}.awesome-icon_icon_arrow-down:before{content:"\f063"}.awesome-icon_icon_mail-forward:before,.awesome-icon_icon_share:before{content:"\f064"}.awesome-icon_icon_expand:before{content:"\f065"}.awesome-icon_icon_compress:before{content:"\f066"}.awesome-icon_icon_plus:before{content:"\f067"}.awesome-icon_icon_minus:before{content:"\f068"}.awesome-icon_icon_asterisk:before{content:"\f069"}.awesome-icon_icon_exclamation-circle:before{content:"\f06a"}.awesome-icon_icon_gift:before{content:"\f06b"}.awesome-icon_icon_leaf:before{content:"\f06c"}.awesome-icon_icon_fire:before{content:"\f06d"}.awesome-icon_icon_eye:before{content:"\f06e"}.awesome-icon_icon_eye-slash:before{content:"\f070"}.awesome-icon_icon_exclamation-triangle:before,.awesome-icon_icon_warning:before{content:"\f071"}.awesome-icon_icon_plane:before{content:"\f072"}.awesome-icon_icon_calendar:before{content:"\f073"}.awesome-icon_icon_random:before{content:"\f074"}.awesome-icon_icon_comment:before{content:"\f075"}.awesome-icon_icon_magnet:before{content:"\f076"}.awesome-icon_icon_chevron-up:before{content:"\f077"}.awesome-icon_icon_chevron-down:before{content:"\f078"}.awesome-icon_icon_retweet:before{content:"\f079"}.awesome-icon_icon_shopping-cart:before{content:"\f07a"}.awesome-icon_icon_folder:before{content:"\f07b"}.awesome-icon_icon_folder-open:before{content:"\f07c"}.awesome-icon_icon_arrows-v:before{content:"\f07d"}.awesome-icon_icon_arrows-h:before{content:"\f07e"}.awesome-icon_icon_bar-chart-o:before,.awesome-icon_icon_bar-chart:before{content:"\f080"}.awesome-icon_icon_twitter-square:before{content:"\f081"}.awesome-icon_icon_facebook-square:before{content:"\f082"}.awesome-icon_icon_camera-retro:before{content:"\f083"}.awesome-icon_icon_key:before{content:"\f084"}.awesome-icon_icon_cogs:before,.awesome-icon_icon_gears:before{content:"\f085"}.awesome-icon_icon_comments:before{content:"\f086"}.awesome-icon_icon_thumbs-o-up:before{content:"\f087"}.awesome-icon_icon_thumbs-o-down:before{content:"\f088"}.awesome-icon_icon_star-half:before{content:"\f089"}.awesome-icon_icon_heart-o:before{content:"\f08a"}.awesome-icon_icon_sign-out:before{content:"\f08b"}.awesome-icon_icon_linkedin-square:before{content:"\f08c"}.awesome-icon_icon_thumb-tack:before{content:"\f08d"}.awesome-icon_icon_external-link:before{content:"\f08e"}.awesome-icon_icon_sign-in:before{content:"\f090"}.awesome-icon_icon_trophy:before{content:"\f091"}.awesome-icon_icon_github-square:before{content:"\f092"}.awesome-icon_icon_upload:before{content:"\f093"}.awesome-icon_icon_lemon-o:before{content:"\f094"}.awesome-icon_icon_phone:before{content:"\f095"}.awesome-icon_icon_square-o:before{content:"\f096"}.awesome-icon_icon_bookmark-o:before{content:"\f097"}.awesome-icon_icon_phone-square:before{content:"\f098"}.awesome-icon_icon_twitter:before{content:"\f099"}.awesome-icon_icon_facebook-f:before,.awesome-icon_icon_facebook:before{content:"\f09a"}.awesome-icon_icon_github:before{content:"\f09b"}.awesome-icon_icon_unlock:before{content:"\f09c"}.awesome-icon_icon_credit-card:before{content:"\f09d"}.awesome-icon_icon_feed:before,.awesome-icon_icon_rss:before{content:"\f09e"}.awesome-icon_icon_hdd-o:before{content:"\f0a0"}.awesome-icon_icon_bullhorn:before{content:"\f0a1"}.awesome-icon_icon_bell:before{content:"\f0f3"}.awesome-icon_icon_certificate:before{content:"\f0a3"}.awesome-icon_icon_hand-o-right:before{content:"\f0a4"}.awesome-icon_icon_hand-o-left:before{content:"\f0a5"}.awesome-icon_icon_hand-o-up:before{content:"\f0a6"}.awesome-icon_icon_hand-o-down:before{content:"\f0a7"}.awesome-icon_icon_arrow-circle-left:before{content:"\f0a8"}.awesome-icon_icon_arrow-circle-right:before{content:"\f0a9"}.awesome-icon_icon_arrow-circle-up:before{content:"\f0aa"}.awesome-icon_icon_arrow-circle-down:before{content:"\f0ab"}.awesome-icon_icon_globe:before{content:"\f0ac"}.awesome-icon_icon_wrench:before{content:"\f0ad"}.awesome-icon_icon_tasks:before{content:"\f0ae"}.awesome-icon_icon_filter:before{content:"\f0b0"}.awesome-icon_icon_briefcase:before{content:"\f0b1"}.awesome-icon_icon_arrows-alt:before{content:"\f0b2"}.awesome-icon_icon_group:before,.awesome-icon_icon_users:before{content:"\f0c0"}.awesome-icon_icon_chain:before,.awesome-icon_icon_link:before{content:"\f0c1"}.awesome-icon_icon_cloud:before{content:"\f0c2"}.awesome-icon_icon_flask:before{content:"\f0c3"}.awesome-icon_icon_cut:before,.awesome-icon_icon_scissors:before{content:"\f0c4"}.awesome-icon_icon_copy:before,.awesome-icon_icon_files-o:before{content:"\f0c5"}.awesome-icon_icon_paperclip:before{content:"\f0c6"}.awesome-icon_icon_floppy-o:before,.awesome-icon_icon_save:before{content:"\f0c7"}.awesome-icon_icon_square:before{content:"\f0c8"}.awesome-icon_icon_bars:before,.awesome-icon_icon_navicon:before,.awesome-icon_icon_reorder:before{content:"\f0c9"}.awesome-icon_icon_list-ul:before{content:"\f0ca"}.awesome-icon_icon_list-ol:before{content:"\f0cb"}.awesome-icon_icon_strikethrough:before{content:"\f0cc"}.awesome-icon_icon_underline:before{content:"\f0cd"}.awesome-icon_icon_table:before{content:"\f0ce"}.awesome-icon_icon_magic:before{content:"\f0d0"}.awesome-icon_icon_truck:before{content:"\f0d1"}.awesome-icon_icon_pinterest:before{content:"\f0d2"}.awesome-icon_icon_pinterest-square:before{content:"\f0d3"}.awesome-icon_icon_google-plus-square:before{content:"\f0d4"}.awesome-icon_icon_google-plus:before{content:"\f0d5"}.awesome-icon_icon_money:before{content:"\f0d6"}.awesome-icon_icon_caret-down:before{content:"\f0d7"}.awesome-icon_icon_caret-up:before{content:"\f0d8"}.awesome-icon_icon_caret-left:before{content:"\f0d9"}.awesome-icon_icon_caret-right:before{content:"\f0da"}.awesome-icon_icon_columns:before{content:"\f0db"}.awesome-icon_icon_sort:before,.awesome-icon_icon_unsorted:before{content:"\f0dc"}.awesome-icon_icon_sort-desc:before,.awesome-icon_icon_sort-down:before{content:"\f0dd"}.awesome-icon_icon_sort-asc:before,.awesome-icon_icon_sort-up:before{content:"\f0de"}.awesome-icon_icon_envelope:before{content:"\f0e0"}.awesome-icon_icon_linkedin:before{content:"\f0e1"}.awesome-icon_icon_rotate-left:before,.awesome-icon_icon_undo:before{content:"\f0e2"}.awesome-icon_icon_gavel:before,.awesome-icon_icon_legal:before{content:"\f0e3"}.awesome-icon_icon_dashboard:before,.awesome-icon_icon_tachometer:before{content:"\f0e4"}.awesome-icon_icon_comment-o:before{content:"\f0e5"}.awesome-icon_icon_comments-o:before{content:"\f0e6"}.awesome-icon_icon_bolt:before,.awesome-icon_icon_flash:before{content:"\f0e7"}.awesome-icon_icon_sitemap:before{content:"\f0e8"}.awesome-icon_icon_umbrella:before{content:"\f0e9"}.awesome-icon_icon_clipboard:before,.awesome-icon_icon_paste:before{content:"\f0ea"}.awesome-icon_icon_lightbulb-o:before{content:"\f0eb"}.awesome-icon_icon_exchange:before{content:"\f0ec"}.awesome-icon_icon_cloud-download:before{content:"\f0ed"}.awesome-icon_icon_cloud-upload:before{content:"\f0ee"}.awesome-icon_icon_user-md:before{content:"\f0f0"}.awesome-icon_icon_stethoscope:before{content:"\f0f1"}.awesome-icon_icon_suitcase:before{content:"\f0f2"}.awesome-icon_icon_bell-o:before{content:"\f0a2"}.awesome-icon_icon_coffee:before{content:"\f0f4"}.awesome-icon_icon_cutlery:before{content:"\f0f5"}.awesome-icon_icon_file-text-o:before{content:"\f0f6"}.awesome-icon_icon_building-o:before{content:"\f0f7"}.awesome-icon_icon_hospital-o:before{content:"\f0f8"}.awesome-icon_icon_ambulance:before{content:"\f0f9"}.awesome-icon_icon_medkit:before{content:"\f0fa"}.awesome-icon_icon_fighter-jet:before{content:"\f0fb"}.awesome-icon_icon_beer:before{content:"\f0fc"}.awesome-icon_icon_h-square:before{content:"\f0fd"}.awesome-icon_icon_plus-square:before{content:"\f0fe"}.awesome-icon_icon_angle-double-left:before{content:"\f100"}.awesome-icon_icon_angle-double-right:before{content:"\f101"}.awesome-icon_icon_angle-double-up:before{content:"\f102"}.awesome-icon_icon_angle-double-down:before{content:"\f103"}.awesome-icon_icon_angle-left:before{content:"\f104"}.awesome-icon_icon_angle-right:before{content:"\f105"}.awesome-icon_icon_angle-up:before{content:"\f106"}.awesome-icon_icon_angle-down:before{content:"\f107"}.awesome-icon_icon_desktop:before{content:"\f108"}.awesome-icon_icon_laptop:before{content:"\f109"}.awesome-icon_icon_tablet:before{content:"\f10a"}.awesome-icon_icon_mobile-phone:before,.awesome-icon_icon_mobile:before{content:"\f10b"}.awesome-icon_icon_circle-o:before{content:"\f10c"}.awesome-icon_icon_quote-left:before{content:"\f10d"}.awesome-icon_icon_quote-right:before{content:"\f10e"}.awesome-icon_icon_spinner:before{content:"\f110"}.awesome-icon_icon_circle:before{content:"\f111"}.awesome-icon_icon_mail-reply:before,.awesome-icon_icon_reply:before{content:"\f112"}.awesome-icon_icon_github-alt:before{content:"\f113"}.awesome-icon_icon_folder-o:before{content:"\f114"}.awesome-icon_icon_folder-open-o:before{content:"\f115"}.awesome-icon_icon_smile-o:before{content:"\f118"}.awesome-icon_icon_frown-o:before{content:"\f119"}.awesome-icon_icon_meh-o:before{content:"\f11a"}.awesome-icon_icon_gamepad:before{content:"\f11b"}.awesome-icon_icon_keyboard-o:before{content:"\f11c"}.awesome-icon_icon_flag-o:before{content:"\f11d"}.awesome-icon_icon_flag-checkered:before{content:"\f11e"}.awesome-icon_icon_terminal:before{content:"\f120"}.awesome-icon_icon_code:before{content:"\f121"}.awesome-icon_icon_mail-reply-all:before,.awesome-icon_icon_reply-all:before{content:"\f122"}.awesome-icon_icon_star-half-empty:before,.awesome-icon_icon_star-half-full:before,.awesome-icon_icon_star-half-o:before{content:"\f123"}.awesome-icon_icon_location-arrow:before{content:"\f124"}.awesome-icon_icon_crop:before{content:"\f125"}.awesome-icon_icon_code-fork:before{content:"\f126"}.awesome-icon_icon_chain-broken:before,.awesome-icon_icon_unlink:before{content:"\f127"}.awesome-icon_icon_question:before{content:"\f128"}.awesome-icon_icon_info:before{content:"\f129"}.awesome-icon_icon_exclamation:before{content:"\f12a"}.awesome-icon_icon_superscript:before{content:"\f12b"}.awesome-icon_icon_subscript:before{content:"\f12c"}.awesome-icon_icon_eraser:before{content:"\f12d"}.awesome-icon_icon_puzzle-piece:before{content:"\f12e"}.awesome-icon_icon_microphone:before{content:"\f130"}.awesome-icon_icon_microphone-slash:before{content:"\f131"}.awesome-icon_icon_shield:before{content:"\f132"}.awesome-icon_icon_calendar-o:before{content:"\f133"}.awesome-icon_icon_fire-extinguisher:before{content:"\f134"}.awesome-icon_icon_rocket:before{content:"\f135"}.awesome-icon_icon_maxcdn:before{content:"\f136"}.awesome-icon_icon_chevron-circle-left:before{content:"\f137"}.awesome-icon_icon_chevron-circle-right:before{content:"\f138"}.awesome-icon_icon_chevron-circle-up:before{content:"\f139"}.awesome-icon_icon_chevron-circle-down:before{content:"\f13a"}.awesome-icon_icon_html5:before{content:"\f13b"}.awesome-icon_icon_css3:before{content:"\f13c"}.awesome-icon_icon_anchor:before{content:"\f13d"}.awesome-icon_icon_unlock-alt:before{content:"\f13e"}.awesome-icon_icon_bullseye:before{content:"\f140"}.awesome-icon_icon_ellipsis-h:before{content:"\f141"}.awesome-icon_icon_ellipsis-v:before{content:"\f142"}.awesome-icon_icon_rss-square:before{content:"\f143"}.awesome-icon_icon_play-circle:before{content:"\f144"}.awesome-icon_icon_ticket:before{content:"\f145"}.awesome-icon_icon_minus-square:before{content:"\f146"}.awesome-icon_icon_minus-square-o:before{content:"\f147"}.awesome-icon_icon_level-up:before{content:"\f148"}.awesome-icon_icon_level-down:before{content:"\f149"}.awesome-icon_icon_check-square:before{content:"\f14a"}.awesome-icon_icon_pencil-square:before{content:"\f14b"}.awesome-icon_icon_external-link-square:before{content:"\f14c"}.awesome-icon_icon_share-square:before{content:"\f14d"}.awesome-icon_icon_compass:before{content:"\f14e"}.awesome-icon_icon_caret-square-o-down:before,.awesome-icon_icon_toggle-down:before{content:"\f150"}.awesome-icon_icon_caret-square-o-up:before,.awesome-icon_icon_toggle-up:before{content:"\f151"}.awesome-icon_icon_caret-square-o-right:before,.awesome-icon_icon_toggle-right:before{content:"\f152"}.awesome-icon_icon_eur:before,.awesome-icon_icon_euro:before{content:"\f153"}.awesome-icon_icon_gbp:before{content:"\f154"}.awesome-icon_icon_dollar:before,.awesome-icon_icon_usd:before{content:"\f155"}.awesome-icon_icon_inr:before,.awesome-icon_icon_rupee:before{content:"\f156"}.awesome-icon_icon_cny:before,.awesome-icon_icon_jpy:before,.awesome-icon_icon_rmb:before,.awesome-icon_icon_yen:before{content:"\f157"}.awesome-icon_icon_rouble:before,.awesome-icon_icon_rub:before,.awesome-icon_icon_ruble:before{content:"\f158"}.awesome-icon_icon_krw:before,.awesome-icon_icon_won:before{content:"\f159"}.awesome-icon_icon_bitcoin:before,.awesome-icon_icon_btc:before{content:"\f15a"}.awesome-icon_icon_file:before{content:"\f15b"}.awesome-icon_icon_file-text:before{content:"\f15c"}.awesome-icon_icon_sort-alpha-asc:before{content:"\f15d"}.awesome-icon_icon_sort-alpha-desc:before{content:"\f15e"}.awesome-icon_icon_sort-amount-asc:before{content:"\f160"}.awesome-icon_icon_sort-amount-desc:before{content:"\f161"}.awesome-icon_icon_sort-numeric-asc:before{content:"\f162"}.awesome-icon_icon_sort-numeric-desc:before{content:"\f163"}.awesome-icon_icon_thumbs-up:before{content:"\f164"}.awesome-icon_icon_thumbs-down:before{content:"\f165"}.awesome-icon_icon_youtube-square:before{content:"\f166"}.awesome-icon_icon_youtube:before{content:"\f167"}.awesome-icon_icon_xing:before{content:"\f168"}.awesome-icon_icon_xing-square:before{content:"\f169"}.awesome-icon_icon_youtube-play:before{content:"\f16a"}.awesome-icon_icon_dropbox:before{content:"\f16b"}.awesome-icon_icon_stack-overflow:before{content:"\f16c"}.awesome-icon_icon_instagram:before{content:"\f16d"}.awesome-icon_icon_flickr:before{content:"\f16e"}.awesome-icon_icon_adn:before{content:"\f170"}.awesome-icon_icon_bitbucket:before{content:"\f171"}.awesome-icon_icon_bitbucket-square:before{content:"\f172"}.awesome-icon_icon_tumblr:before{content:"\f173"}.awesome-icon_icon_tumblr-square:before{content:"\f174"}.awesome-icon_icon_long-arrow-down:before{content:"\f175"}.awesome-icon_icon_long-arrow-up:before{content:"\f176"}.awesome-icon_icon_long-arrow-left:before{content:"\f177"}.awesome-icon_icon_long-arrow-right:before{content:"\f178"}.awesome-icon_icon_apple:before{content:"\f179"}.awesome-icon_icon_windows:before{content:"\f17a"}.awesome-icon_icon_android:before{content:"\f17b"}.awesome-icon_icon_linux:before{content:"\f17c"}.awesome-icon_icon_dribbble:before{content:"\f17d"}.awesome-icon_icon_skype:before{content:"\f17e"}.awesome-icon_icon_foursquare:before{content:"\f180"}.awesome-icon_icon_trello:before{content:"\f181"}.awesome-icon_icon_female:before{content:"\f182"}.awesome-icon_icon_male:before{content:"\f183"}.awesome-icon_icon_gittip:before,.awesome-icon_icon_gratipay:before{content:"\f184"}.awesome-icon_icon_sun-o:before{content:"\f185"}.awesome-icon_icon_moon-o:before{content:"\f186"}.awesome-icon_icon_archive:before{content:"\f187"}.awesome-icon_icon_bug:before{content:"\f188"}.awesome-icon_icon_vk:before{content:"\f189"}.awesome-icon_icon_weibo:before{content:"\f18a"}.awesome-icon_icon_renren:before{content:"\f18b"}.awesome-icon_icon_pagelines:before{content:"\f18c"}.awesome-icon_icon_stack-exchange:before{content:"\f18d"}.awesome-icon_icon_arrow-circle-o-right:before{content:"\f18e"}.awesome-icon_icon_arrow-circle-o-left:before{content:"\f190"}.awesome-icon_icon_caret-square-o-left:before,.awesome-icon_icon_toggle-left:before{content:"\f191"}.awesome-icon_icon_dot-circle-o:before{content:"\f192"}.awesome-icon_icon_wheelchair:before{content:"\f193"}.awesome-icon_icon_vimeo-square:before{content:"\f194"}.awesome-icon_icon_try:before,.awesome-icon_icon_turkish-lira:before{content:"\f195"}.awesome-icon_icon_plus-square-o:before{content:"\f196"}.awesome-icon_icon_space-shuttle:before{content:"\f197"}.awesome-icon_icon_slack:before{content:"\f198"}.awesome-icon_icon_envelope-square:before{content:"\f199"}.awesome-icon_icon_wordpress:before{content:"\f19a"}.awesome-icon_icon_openid:before{content:"\f19b"}.awesome-icon_icon_bank:before,.awesome-icon_icon_institution:before,.awesome-icon_icon_university:before{content:"\f19c"}.awesome-icon_icon_graduation-cap:before,.awesome-icon_icon_mortar-board:before{content:"\f19d"}.awesome-icon_icon_yahoo:before{content:"\f19e"}.awesome-icon_icon_google:before{content:"\f1a0"}.awesome-icon_icon_reddit:before{content:"\f1a1"}.awesome-icon_icon_reddit-square:before{content:"\f1a2"}.awesome-icon_icon_stumbleupon-circle:before{content:"\f1a3"}.awesome-icon_icon_stumbleupon:before{content:"\f1a4"}.awesome-icon_icon_delicious:before{content:"\f1a5"}.awesome-icon_icon_digg:before{content:"\f1a6"}.awesome-icon_icon_pied-piper-pp:before{content:"\f1a7"}.awesome-icon_icon_pied-piper-alt:before{content:"\f1a8"}.awesome-icon_icon_drupal:before{content:"\f1a9"}.awesome-icon_icon_joomla:before{content:"\f1aa"}.awesome-icon_icon_language:before{content:"\f1ab"}.awesome-icon_icon_fax:before{content:"\f1ac"}.awesome-icon_icon_building:before{content:"\f1ad"}.awesome-icon_icon_child:before{content:"\f1ae"}.awesome-icon_icon_paw:before{content:"\f1b0"}.awesome-icon_icon_spoon:before{content:"\f1b1"}.awesome-icon_icon_cube:before{content:"\f1b2"}.awesome-icon_icon_cubes:before{content:"\f1b3"}.awesome-icon_icon_behance:before{content:"\f1b4"}.awesome-icon_icon_behance-square:before{content:"\f1b5"}.awesome-icon_icon_steam:before{content:"\f1b6"}.awesome-icon_icon_steam-square:before{content:"\f1b7"}.awesome-icon_icon_recycle:before{content:"\f1b8"}.awesome-icon_icon_automobile:before,.awesome-icon_icon_car:before{content:"\f1b9"}.awesome-icon_icon_cab:before,.awesome-icon_icon_taxi:before{content:"\f1ba"}.awesome-icon_icon_tree:before{content:"\f1bb"}.awesome-icon_icon_spotify:before{content:"\f1bc"}.awesome-icon_icon_deviantart:before{content:"\f1bd"}.awesome-icon_icon_soundcloud:before{content:"\f1be"}.awesome-icon_icon_database:before{content:"\f1c0"}.awesome-icon_icon_file-pdf-o:before{content:"\f1c1"}.awesome-icon_icon_file-word-o:before{content:"\f1c2"}.awesome-icon_icon_file-excel-o:before{content:"\f1c3"}.awesome-icon_icon_file-powerpoint-o:before{content:"\f1c4"}.awesome-icon_icon_file-image-o:before,.awesome-icon_icon_file-photo-o:before,.awesome-icon_icon_file-picture-o:before{content:"\f1c5"}.awesome-icon_icon_file-archive-o:before,.awesome-icon_icon_file-zip-o:before{content:"\f1c6"}.awesome-icon_icon_file-audio-o:before,.awesome-icon_icon_file-sound-o:before{content:"\f1c7"}.awesome-icon_icon_file-movie-o:before,.awesome-icon_icon_file-video-o:before{content:"\f1c8"}.awesome-icon_icon_file-code-o:before{content:"\f1c9"}.awesome-icon_icon_vine:before{content:"\f1ca"}.awesome-icon_icon_codepen:before{content:"\f1cb"}.awesome-icon_icon_jsfiddle:before{content:"\f1cc"}.awesome-icon_icon_life-bouy:before,.awesome-icon_icon_life-buoy:before,.awesome-icon_icon_life-ring:before,.awesome-icon_icon_life-saver:before,.awesome-icon_icon_support:before{content:"\f1cd"}.awesome-icon_icon_circle-o-notch:before{content:"\f1ce"}.awesome-icon_icon_ra:before,.awesome-icon_icon_rebel:before,.awesome-icon_icon_resistance:before{content:"\f1d0"}.awesome-icon_icon_empire:before,.awesome-icon_icon_ge:before{content:"\f1d1"}.awesome-icon_icon_git-square:before{content:"\f1d2"}.awesome-icon_icon_git:before{content:"\f1d3"}.awesome-icon_icon_hacker-news:before,.awesome-icon_icon_y-combinator-square:before,.awesome-icon_icon_yc-square:before{content:"\f1d4"}.awesome-icon_icon_tencent-weibo:before{content:"\f1d5"}.awesome-icon_icon_qq:before{content:"\f1d6"}.awesome-icon_icon_wechat:before,.awesome-icon_icon_weixin:before{content:"\f1d7"}.awesome-icon_icon_paper-plane:before,.awesome-icon_icon_send:before{content:"\f1d8"}.awesome-icon_icon_paper-plane-o:before,.awesome-icon_icon_send-o:before{content:"\f1d9"}.awesome-icon_icon_history:before{content:"\f1da"}.awesome-icon_icon_circle-thin:before{content:"\f1db"}.awesome-icon_icon_header:before{content:"\f1dc"}.awesome-icon_icon_paragraph:before{content:"\f1dd"}.awesome-icon_icon_sliders:before{content:"\f1de"}.awesome-icon_icon_share-alt:before{content:"\f1e0"}.awesome-icon_icon_share-alt-square:before{content:"\f1e1"}.awesome-icon_icon_bomb:before{content:"\f1e2"}.awesome-icon_icon_futbol-o:before,.awesome-icon_icon_soccer-ball-o:before{content:"\f1e3"}.awesome-icon_icon_tty:before{content:"\f1e4"}.awesome-icon_icon_binoculars:before{content:"\f1e5"}.awesome-icon_icon_plug:before{content:"\f1e6"}.awesome-icon_icon_slideshare:before{content:"\f1e7"}.awesome-icon_icon_twitch:before{content:"\f1e8"}.awesome-icon_icon_yelp:before{content:"\f1e9"}.awesome-icon_icon_newspaper-o:before{content:"\f1ea"}.awesome-icon_icon_wifi:before{content:"\f1eb"}.awesome-icon_icon_calculator:before{content:"\f1ec"}.awesome-icon_icon_paypal:before{content:"\f1ed"}.awesome-icon_icon_google-wallet:before{content:"\f1ee"}.awesome-icon_icon_cc-visa:before{content:"\f1f0"}.awesome-icon_icon_cc-mastercard:before{content:"\f1f1"}.awesome-icon_icon_cc-discover:before{content:"\f1f2"}.awesome-icon_icon_cc-amex:before{content:"\f1f3"}.awesome-icon_icon_cc-paypal:before{content:"\f1f4"}.awesome-icon_icon_cc-stripe:before{content:"\f1f5"}.awesome-icon_icon_bell-slash:before{content:"\f1f6"}.awesome-icon_icon_bell-slash-o:before{content:"\f1f7"}.awesome-icon_icon_trash:before{content:"\f1f8"}.awesome-icon_icon_copyright:before{content:"\f1f9"}.awesome-icon_icon_at:before{content:"\f1fa"}.awesome-icon_icon_eyedropper:before{content:"\f1fb"}.awesome-icon_icon_paint-brush:before{content:"\f1fc"}.awesome-icon_icon_birthday-cake:before{content:"\f1fd"}.awesome-icon_icon_area-chart:before{content:"\f1fe"}.awesome-icon_icon_pie-chart:before{content:"\f200"}.awesome-icon_icon_line-chart:before{content:"\f201"}.awesome-icon_icon_lastfm:before{content:"\f202"}.awesome-icon_icon_lastfm-square:before{content:"\f203"}.awesome-icon_icon_toggle-off:before{content:"\f204"}.awesome-icon_icon_toggle-on:before{content:"\f205"}.awesome-icon_icon_bicycle:before{content:"\f206"}.awesome-icon_icon_bus:before{content:"\f207"}.awesome-icon_icon_ioxhost:before{content:"\f208"}.awesome-icon_icon_angellist:before{content:"\f209"}.awesome-icon_icon_cc:before{content:"\f20a"}.awesome-icon_icon_ils:before,.awesome-icon_icon_shekel:before,.awesome-icon_icon_sheqel:before{content:"\f20b"}.awesome-icon_icon_meanpath:before{content:"\f20c"}.awesome-icon_icon_buysellads:before{content:"\f20d"}.awesome-icon_icon_connectdevelop:before{content:"\f20e"}.awesome-icon_icon_dashcube:before{content:"\f210"}.awesome-icon_icon_forumbee:before{content:"\f211"}.awesome-icon_icon_leanpub:before{content:"\f212"}.awesome-icon_icon_sellsy:before{content:"\f213"}.awesome-icon_icon_shirtsinbulk:before{content:"\f214"}.awesome-icon_icon_simplybuilt:before{content:"\f215"}.awesome-icon_icon_skyatlas:before{content:"\f216"}.awesome-icon_icon_cart-plus:before{content:"\f217"}.awesome-icon_icon_cart-arrow-down:before{content:"\f218"}.awesome-icon_icon_diamond:before{content:"\f219"}.awesome-icon_icon_ship:before{content:"\f21a"}.awesome-icon_icon_user-secret:before{content:"\f21b"}.awesome-icon_icon_motorcycle:before{content:"\f21c"}.awesome-icon_icon_street-view:before{content:"\f21d"}.awesome-icon_icon_heartbeat:before{content:"\f21e"}.awesome-icon_icon_venus:before{content:"\f221"}.awesome-icon_icon_mars:before{content:"\f222"}.awesome-icon_icon_mercury:before{content:"\f223"}.awesome-icon_icon_intersex:before,.awesome-icon_icon_transgender:before{content:"\f224"}.awesome-icon_icon_transgender-alt:before{content:"\f225"}.awesome-icon_icon_venus-double:before{content:"\f226"}.awesome-icon_icon_mars-double:before{content:"\f227"}.awesome-icon_icon_venus-mars:before{content:"\f228"}.awesome-icon_icon_mars-stroke:before{content:"\f229"}.awesome-icon_icon_mars-stroke-v:before{content:"\f22a"}.awesome-icon_icon_mars-stroke-h:before{content:"\f22b"}.awesome-icon_icon_neuter:before{content:"\f22c"}.awesome-icon_icon_genderless:before{content:"\f22d"}.awesome-icon_icon_facebook-official:before{content:"\f230"}.awesome-icon_icon_pinterest-p:before{content:"\f231"}.awesome-icon_icon_whatsapp:before{content:"\f232"}.awesome-icon_icon_server:before{content:"\f233"}.awesome-icon_icon_user-plus:before{content:"\f234"}.awesome-icon_icon_user-times:before{content:"\f235"}.awesome-icon_icon_bed:before,.awesome-icon_icon_hotel:before{content:"\f236"}.awesome-icon_icon_viacoin:before{content:"\f237"}.awesome-icon_icon_train:before{content:"\f238"}.awesome-icon_icon_subway:before{content:"\f239"}.awesome-icon_icon_medium:before{content:"\f23a"}.awesome-icon_icon_y-combinator:before,.awesome-icon_icon_yc:before{content:"\f23b"}.awesome-icon_icon_optin-monster:before{content:"\f23c"}.awesome-icon_icon_opencart:before{content:"\f23d"}.awesome-icon_icon_expeditedssl:before{content:"\f23e"}.awesome-icon_icon_battery-4:before,.awesome-icon_icon_battery-full:before{content:"\f240"}.awesome-icon_icon_battery-3:before,.awesome-icon_icon_battery-three-quarters:before{content:"\f241"}.awesome-icon_icon_battery-2:before,.awesome-icon_icon_battery-half:before{content:"\f242"}.awesome-icon_icon_battery-1:before,.awesome-icon_icon_battery-quarter:before{content:"\f243"}.awesome-icon_icon_battery-0:before,.awesome-icon_icon_battery-empty:before{content:"\f244"}.awesome-icon_icon_mouse-pointer:before{content:"\f245"}.awesome-icon_icon_i-cursor:before{content:"\f246"}.awesome-icon_icon_object-group:before{content:"\f247"}.awesome-icon_icon_object-ungroup:before{content:"\f248"}.awesome-icon_icon_sticky-note:before{content:"\f249"}.awesome-icon_icon_sticky-note-o:before{content:"\f24a"}.awesome-icon_icon_cc-jcb:before{content:"\f24b"}.awesome-icon_icon_cc-diners-club:before{content:"\f24c"}.awesome-icon_icon_clone:before{content:"\f24d"}.awesome-icon_icon_balance-scale:before{content:"\f24e"}.awesome-icon_icon_hourglass-o:before{content:"\f250"}.awesome-icon_icon_hourglass-1:before,.awesome-icon_icon_hourglass-start:before{content:"\f251"}.awesome-icon_icon_hourglass-2:before,.awesome-icon_icon_hourglass-half:before{content:"\f252"}.awesome-icon_icon_hourglass-3:before,.awesome-icon_icon_hourglass-end:before{content:"\f253"}.awesome-icon_icon_hourglass:before{content:"\f254"}.awesome-icon_icon_hand-grab-o:before,.awesome-icon_icon_hand-rock-o:before{content:"\f255"}.awesome-icon_icon_hand-paper-o:before,.awesome-icon_icon_hand-stop-o:before{content:"\f256"}.awesome-icon_icon_hand-scissors-o:before{content:"\f257"}.awesome-icon_icon_hand-lizard-o:before{content:"\f258"}.awesome-icon_icon_hand-spock-o:before{content:"\f259"}.awesome-icon_icon_hand-pointer-o:before{content:"\f25a"}.awesome-icon_icon_hand-peace-o:before{content:"\f25b"}.awesome-icon_icon_trademark:before{content:"\f25c"}.awesome-icon_icon_registered:before{content:"\f25d"}.awesome-icon_icon_creative-commons:before{content:"\f25e"}.awesome-icon_icon_gg:before{content:"\f260"}.awesome-icon_icon_gg-circle:before{content:"\f261"}.awesome-icon_icon_tripadvisor:before{content:"\f262"}.awesome-icon_icon_odnoklassniki:before{content:"\f263"}.awesome-icon_icon_odnoklassniki-square:before{content:"\f264"}.awesome-icon_icon_get-pocket:before{content:"\f265"}.awesome-icon_icon_wikipedia-w:before{content:"\f266"}.awesome-icon_icon_safari:before{content:"\f267"}.awesome-icon_icon_chrome:before{content:"\f268"}.awesome-icon_icon_firefox:before{content:"\f269"}.awesome-icon_icon_opera:before{content:"\f26a"}.awesome-icon_icon_internet-explorer:before{content:"\f26b"}.awesome-icon_icon_television:before,.awesome-icon_icon_tv:before{content:"\f26c"}.awesome-icon_icon_contao:before{content:"\f26d"}.awesome-icon_icon_500px:before{content:"\f26e"}.awesome-icon_icon_amazon:before{content:"\f270"}.awesome-icon_icon_calendar-plus-o:before{content:"\f271"}.awesome-icon_icon_calendar-minus-o:before{content:"\f272"}.awesome-icon_icon_calendar-times-o:before{content:"\f273"}.awesome-icon_icon_calendar-check-o:before{content:"\f274"}.awesome-icon_icon_industry:before{content:"\f275"}.awesome-icon_icon_map-pin:before{content:"\f276"}.awesome-icon_icon_map-signs:before{content:"\f277"}.awesome-icon_icon_map-o:before{content:"\f278"}.awesome-icon_icon_map:before{content:"\f279"}.awesome-icon_icon_commenting:before{content:"\f27a"}.awesome-icon_icon_commenting-o:before{content:"\f27b"}.awesome-icon_icon_houzz:before{content:"\f27c"}.awesome-icon_icon_vimeo:before{content:"\f27d"}.awesome-icon_icon_black-tie:before{content:"\f27e"}.awesome-icon_icon_fonticons:before{content:"\f280"}.awesome-icon_icon_reddit-alien:before{content:"\f281"}.awesome-icon_icon_edge:before{content:"\f282"}.awesome-icon_icon_credit-card-alt:before{content:"\f283"}.awesome-icon_icon_codiepie:before{content:"\f284"}.awesome-icon_icon_modx:before{content:"\f285"}.awesome-icon_icon_fort-awesome:before{content:"\f286"}.awesome-icon_icon_usb:before{content:"\f287"}.awesome-icon_icon_product-hunt:before{content:"\f288"}.awesome-icon_icon_mixcloud:before{content:"\f289"}.awesome-icon_icon_scribd:before{content:"\f28a"}.awesome-icon_icon_pause-circle:before{content:"\f28b"}.awesome-icon_icon_pause-circle-o:before{content:"\f28c"}.awesome-icon_icon_stop-circle:before{content:"\f28d"}.awesome-icon_icon_stop-circle-o:before{content:"\f28e"}.awesome-icon_icon_shopping-bag:before{content:"\f290"}.awesome-icon_icon_shopping-basket:before{content:"\f291"}.awesome-icon_icon_hashtag:before{content:"\f292"}.awesome-icon_icon_bluetooth:before{content:"\f293"}.awesome-icon_icon_bluetooth-b:before{content:"\f294"}.awesome-icon_icon_percent:before{content:"\f295"}.awesome-icon_icon_gitlab:before{content:"\f296"}.awesome-icon_icon_wpbeginner:before{content:"\f297"}.awesome-icon_icon_wpforms:before{content:"\f298"}.awesome-icon_icon_envira:before{content:"\f299"}.awesome-icon_icon_universal-access:before{content:"\f29a"}.awesome-icon_icon_wheelchair-alt:before{content:"\f29b"}.awesome-icon_icon_question-circle-o:before{content:"\f29c"}.awesome-icon_icon_blind:before{content:"\f29d"}.awesome-icon_icon_audio-description:before{content:"\f29e"}.awesome-icon_icon_volume-control-phone:before{content:"\f2a0"}.awesome-icon_icon_braille:before{content:"\f2a1"}.awesome-icon_icon_assistive-listening-systems:before{content:"\f2a2"}.awesome-icon_icon_american-sign-language-interpreting:before,.awesome-icon_icon_asl-interpreting:before{content:"\f2a3"}.awesome-icon_icon_deaf:before,.awesome-icon_icon_deafness:before,.awesome-icon_icon_hard-of-hearing:before{content:"\f2a4"}.awesome-icon_icon_glide:before{content:"\f2a5"}.awesome-icon_icon_glide-g:before{content:"\f2a6"}.awesome-icon_icon_sign-language:before,.awesome-icon_icon_signing:before{content:"\f2a7"}.awesome-icon_icon_low-vision:before{content:"\f2a8"}.awesome-icon_icon_viadeo:before{content:"\f2a9"}.awesome-icon_icon_viadeo-square:before{content:"\f2aa"}.awesome-icon_icon_snapchat:before{content:"\f2ab"}.awesome-icon_icon_snapchat-ghost:before{content:"\f2ac"}.awesome-icon_icon_snapchat-square:before{content:"\f2ad"}.awesome-icon_icon_pied-piper:before{content:"\f2ae"}.awesome-icon_icon_first-order:before{content:"\f2b0"}.awesome-icon_icon_yoast:before{content:"\f2b1"}.awesome-icon_icon_themeisle:before{content:"\f2b2"}.awesome-icon_icon_google-plus-circle:before,.awesome-icon_icon_google-plus-official:before{content:"\f2b3"}.awesome-icon_icon_fa:before,.awesome-icon_icon_font-awesome:before{content:"\f2b4"}@font-face{font-family:'textbook';src:local('textbook');src:url(../../../../../_m/FejgbLhRRLM_5llHkFzT2hXkH9Y.woff2),url(../../../../../_m/1wUguRKdVPX0Lw2dlQ1I-l4X0hI.woff),url(../../../../../_m/_qMiA1SBxUbup2B5BieefMuSpsk.ttf)}.i-font_face_textbook{font-family:'textbook'}.scroll__thumb_orientation_horizontal{top:3px;bottom:3px}.spin2_size_xs{width:24px;height:24px;font-size:13px;line-height:20px;background-position:-2px -19px}.spin2_size_xs.spin2_position_center{margin-top:-12px;margin-left:-12px}.spin2_view_default.spin2_tone_default.spin2_progress_yes{border-top-color:#fc0;border-left-color:#fc0}.textinput__icon_side_left{left:0}.icon_type_cross{background-image:url(../../../../../_m/eS-nxtWWJ1LfBWLfd096swuFjH4.svg)}.icon_size_s.icon_type_cross,.icon_size_xs.icon_type_cross{background-image:url(../../../../../_m/B8eOwa4HB-JnzSOAZiWnu0hWGAk.svg)}.spin2_position_center{position:absolute;top:50%;left:50%}.header2__logo_size_m{box-sizing:border-box;padding:15px 25px 0 21px}.logo_type_link{overflow:hidden;white-space:nowrap;text-indent:100%;outline:0}.logo_name_ru-84x36{width:84px;height:36px;background-image:url(../../../../../_m/naK_mfGt8c8UtA-SGYyQT7fBzTs.svg)}.input_theme_websearch{vertical-align:top}.input_theme_websearch .input__filter~.input__box{overflow:hidden}.input_theme_websearch .input__filter{float:right;margin-left:-4px}.input_theme_websearch .input__filter .icon_type_filter{background-size:20px 20px}.icon_glyph_carets-v svg{width:8px;height:14px}.service-icon__images_color_56,.service-icon__maps_color_56{width:56px;height:56px;background-image:url(../../../../../_m/hANbSoVIpeZ0TOwv7MFUlPp_8TQ.svg);background-repeat:no-repeat;background-position:center}.service-icon__maps_color_56{background-image:url(../../../../../_m/GjWurtA8NnU6vyYkQsiXyrOyL1w.svg)}.service-icon__mail_color_56,.service-icon__news_color_56,.service-icon__video_color_56{width:56px;height:56px;background-image:url(../../../../../_m/wu1BsNI51H4EFkjYMMa9vni8vKY.svg);background-repeat:no-repeat;background-position:center}.service-icon__mail_color_56,.service-icon__video_color_56{background-image:url(../../../../../_m/Ah4H8REC5WeyJt6w_YZjvhxuqI4.svg)}.service-icon__video_color_56{background-image:url(../../../../../_m/K5IR5CXx47Tt3j_7MFoU9iwuVXQ.svg)}.service-icon__translate_color_56{width:56px;height:56px;background:url(../../../../../_m/2kMViTNxLgdNKgc-rAShssu23gM.svg)}.service-icon__afisha_color_56,.service-icon__browser_color_56{width:56px;height:56px;background-image:url(../../../../../_m/gwmkzgx-7R84-N3iDa7lPhvIcpI.svg);background-repeat:no-repeat;background-position:center 6px}.service-icon__afisha_color_56{background-image:url(../../../../../_m/64yvHhqres3L-aE9rl-G0zFx50I.svg);background-position:center 5px}.service-icon__disk_color_56,.service-icon__market_color_56{width:56px;height:56px;background-image:url(../../../../../_m/n67lweH9OwalP3rZp5hqpmXs0Vs.svg);background-repeat:no-repeat;background-position:center}.service-icon__market_color_56{background-image:url(../../../../../_m/PSrsVH_E4ir6Q3UFV0W8QatvnBw.svg)}.service-icon__music_color_56,.service-icon__taxi_color_56,.service-icon__tv_color_56{width:56px;height:56px;background-image:url(../../../../../_m/9gZn0fJAEIZwqzuvwLAswMlICU.svg);background-repeat:no-repeat;background-position:center}.service-icon__music_color_56,.service-icon__taxi_color_56{background-image:url(../../../../../_m/rXbZWKiN930ZO579RjaRU9KdL9g.svg)}.service-icon__taxi_color_56{background-image:url(../../../../../_m/ZdqIJYiL7bmeMk9qBOeAc0ATZ68.svg)}.service-icon__auto_color_56{width:56px;height:56px;background:url(../../../../../_m/eslSCKJ0Xl87s1GKgKVvM70yCRE.svg)}.service-icon__autoru_color_56{width:56px;height:56px;background:url(../../../../../_m/Mo2CfMUxJFoX0EUNuIKtSAFH7TQ.svg) no-repeat center center}.service-icon__money_color_56{width:56px;height:56px;background-image:url(../../../../../_m/X_8vnHSHFB8rBQfe31V_VAC-66A.svg);background-repeat:no-repeat;background-position:center}.service-icon__calendar_color_56{width:56px;height:56px;background:url(../../../../../_m/DF00ldxyHmD6WQp5ngzQQD3nueI.svg)}.service-icon__yamb_color_56{width:56px;height:56px;background:url(../../../../../_m/B-XB4prHtBD1N3Upgrv2vn7Bxow.svg)}.service-icon__wiki_color_56{width:56px;height:56px;background:url(../../../../../_m/wVC3PiQHsRd-0PQmqY20n-IOyJM.svg)}.service-icon__dashboard_color_56{width:56px;height:56px;background:url(../../../../../_m/Fr61d4zpsX2ZwUpnwsmi1RrCgMA.svg)}.service-icon__tracker_color_56{width:56px;height:56px;background:url(../../../../../_m/JVpURSs3cVrajT0y_52Gb7pvQfk.svg)}.service-icon__admin_color_56{width:56px;height:56px;background:url(../../../../../_m/NtcABOx9qjCHhXZYkEttOQKNQY0.png)}.service-icon__staff_color_56{width:56px;height:56px;background:url(../../../../../_m/zITYUSEC3L6zBdTYl6kuna0C1Hk.svg)}.user2__menu-counter_state_empty{display:none}.popup2{position:absolute}.popup2_outside_yes{top:-10000px!important;left:-10000px!important;display:block!important}.staff-card__popup .staff-card__link_type_user{color:#000}:link{transition:color .15s ease-out;text-decoration:none;color:#04b}*{margin:0}td{font-size:100%}h5,h6{font-size:1.2em}h6{font-size:1.1em}h1,h2,h3,h4{padding:0}table,td,th{border-collapse:collapse}td,th{text-align:left;vertical-align:top}ol,ul{list-style:none}h5,h6,li,ol,td,th,ul{padding:0}.b-favs{position:relative;cursor:pointer}.b-favs&gt;.link{position:relative;display:block;padding-right:16px}.b-favs&gt;.link:after{position:absolute;right:0;display:inline-block;content:'\f078';font-family:'FontAwesome';font-size:11px;font-weight:400}.b-favs_mode_opened&gt;.link:after{content:'\f077'}.b-favs&gt;.link:after{top:2px}.b-favs-widget{position:fixed;z-index:50;display:none;overflow:hidden;width:100%;height:100%}.b-favs-widget_visibility_yes{display:block}.b-favs-widget__paranja{position:absolute;z-index:19;top:0;left:0;width:100%;height:100%;opacity:0;background-color:#000}.b-favs-widget_animate_yes .b-favs-widget__paranja{opacity:.4}.b-favs-widget__content{position:relative;z-index:20;top:-500px;overflow:hidden;width:100%;height:500px;max-height:500px;margin:0;padding:0;background:#fff;box-shadow:0 0 0 transparent}.b-favs-widget_animate_yes .b-favs-widget__content{top:0;box-shadow:0 3px 5px rgba(0,0,0,.1)}.b-favs-widget__content,.b-favs-widget__paranja{transition:all .3s ease-out 0s}.b-favs-widget{top:60px}.b-favs-folders{position:absolute;width:250px;height:460px;margin:20px 20px 20px 10px}.b-favs-folders .scroll{height:420px}.b-favs-folders .spin2_show_no{display:none}.b-favs-folders__list{overflow-x:hidden;width:230px}.b-favs-folder{position:relative;overflow:hidden;margin-bottom:5px;padding:5px 28px 5px 40px;cursor:pointer;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none;border:1px solid #fff;border-radius:4px;line-height:23px}.b-favs-folders_mode_edited .b-favs-folder_type_custom:hover{background-color:#f9f3da}.b-favs-folder__icon{position:absolute;top:5px;color:#ccc;font-size:15px}.b-favs-folder__icon.awesome-icon_icon_bookmark{left:12px}.b-favs-folder__icon.awesome-icon_icon_folder{left:10px}.b-favs-folder__icon.awesome-icon_icon_plus-square{left:10px;color:#666}.b-favs-folder:hover .b-favs-folder__icon.awesome-icon_icon_bookmark,.b-favs-folder_current_true .b-favs-folder__icon.awesome-icon_icon_bookmark{color:red}.b-favs-folder:hover .b-favs-folder__icon.awesome-icon_icon_folder,.b-favs-folder_current_true .b-favs-folder__icon.awesome-icon_icon_folder{color:#facc33}.b-favs-folders_mode_edited .b-favs-folder_type_custom:hover .b-favs-folder__icon{display:none}.b-favs-folder__content{float:left;overflow:hidden;max-width:173px}.b-favs-folder__name{transition:color .15s ease-out;color:#999;font-size:15px}.b-favs-folder_current_true .b-favs-folder__name{color:#000}.b-favs-folder:hover .b-favs-folder__name{color:#c00}.b-favs-folder .input,.b-favs-folder_mode_edited .b-favs-folder__name{display:none}.b-favs-folder_mode_edited .input{display:inline-block;background-color:#fff;line-height:24px}.b-favs-folder_mode_edited .input .input__control{padding:0;font-size:15px}.b-favs-folder_mode_edited .input .input__box{padding:0}.b-favs-folder_mode_edited .b-favs-folder__count,.b-favs-folder_mode_edited .input .input__clear{display:none}.b-favs-folder__count{margin-left:5px;color:#ccc}.b-favs-folders_dragging_yes .b-favs-folder{border:1px dashed #ccc}.b-favs-folders_dragging_yes .b-favs-folder_current_true,.b-favs-folders_dragging_yes .b-favs-folder_type_auto,.b-favs-folders_dragging_yes .b-favs-folder_type_new-folder{border:1px solid #fff}.b-favs-folders_dragging_yes .b-favs-folder_dragging_over{border:1px dashed #333}.b-favs-folders_dragging_yes .b-favs-folder_dragging_over *{pointer-events:none}.b-favs-folder__move,.b-favs-folder__remove,.b-favs-folder_type_new-folder{display:none}.b-favs-folders_mode_edited .b-favs-folder_type_new-folder{display:list-item}.b-favs-folders_mode_edited .b-favs-folder_type_custom:hover .b-favs-folder__move,.b-favs-folders_mode_edited .b-favs-folder_type_custom:hover .b-favs-folder__remove{display:block}.b-favs-folder__move,.b-favs-folder__remove{position:absolute;top:0;color:#999;font-size:13px}.b-favs-folder__move{left:0;padding:6px 16px;cursor:move}.b-favs-folder__remove{right:0;padding:5px 9px;cursor:pointer}.b-favs-folder_mode_removing .b-favs-folder__remove,.b-favs-folders_moving_yes .b-favs-folder *,.b-favs-new-folder_mode_creating{pointer-events:none}.b-favs-folder_mode_dragging,.b-favs-folder_mode_moving,.b-favs-folder_mode_removing{transition:all .2s ease-out;opacity:.3;background-color:#f9f3da}.wi-error__default-error{position:fixed;z-index:9999999;top:50px;right:20px;min-width:150px;padding:10px;vertical-align:middle;color:#fff;border:3px solid transparent;border-radius:10px;background-color:rgba(0,0,0,.7);box-shadow:5px 5px 10px rgba(0,0,0,.5)}.wi-error__default-error:hover{border-color:#fff}.wi-notification__tooltip.popup .popup__content{overflow:auto;max-width:500px;max-height:200px;word-wrap:break-word;word-break:break-word}.wi-notification__tooltip{max-width:400px}.tooltip.popup2_theme_normal:before{content:none;box-shadow:none}.tooltip_view_classic,a.user-account{cursor:pointer}.tooltip_view_classic.tooltip_theme_normal.popup2_theme_normal,.tooltip_view_classic.tooltip_theme_success.popup2_theme_normal{color:#fff;border:0}.tooltip_view_classic.tooltip_theme_success.popup2_theme_normal .tooltip__backdrop{opacity:.9}.tooltip_view_classic.tooltip_theme_success.popup2_theme_normal .tooltip__backdrop:before{background:#6cba68}.tooltip_view_classic.tooltip_theme_success.popup2_theme_normal:before{background:0 0}.tooltip_view_classic.tooltip_theme_success .tooltip__backdrop:before{box-shadow:none}.tooltip_view_classic.tooltip_theme_success.popup2_theme_normal .popup2__tail:after{background-image:linear-gradient(to top right,#6cba68 50%,transparent 50%)}.tooltip_view_classic.tooltip_theme_normal.popup2_theme_normal .tooltip__backdrop{opacity:.8}.tooltip_view_classic.tooltip_theme_normal.popup2_theme_normal .tooltip__backdrop:before{background:#323232}.tooltip_view_classic.tooltip_theme_normal.popup2_theme_normal:before{background:0 0}.tooltip_view_classic.tooltip_theme_normal .tooltip__backdrop:before{box-shadow:none}.tooltip_view_classic.tooltip_theme_normal.popup2_theme_normal .popup2__tail:after{background-image:linear-gradient(to top right,#323232 50%,transparent 50%)}.m-notification{position:fixed;z-index:50000;min-width:180px;padding:10px;cursor:default;vertical-align:middle;font-size:15px;opacity:0;color:#fff;border-radius:4px}.m-notification__icon{position:absolute;top:50%;left:8px;display:none;margin-top:-9px}.m-notification__content{display:inline}.m-notification_activated_yes{opacity:1;transition:opacity .4s ease-out,top .3s ease-out,bottom .3s ease-out}.m-notification .awesome-icon_type_clear{position:absolute;top:50%;right:10px;display:none;width:8px;height:8px;margin-top:-11px;cursor:pointer;opacity:.6}.m-notification{max-width:50%}.m-notification_theme_warning{background-color:#f5a623}.m-notification_theme_warning:hover{background-color:rgba(245,166,35,.85)}.m-notification_theme_error{background-color:#ff5668}.m-notification_theme_error:hover{background-color:rgba(255,86,104,.85)}.m-notification_theme_success{background-color:#5ac977}.m-notification_theme_success:hover{background-color:rgba(90,201,119,.85)}.input{position:relative;display:inline-block;width:100%}.input_disabled_yes,.input_disabled_yes .input__control{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.input_disabled_yes .input__box,.input_disabled_yes .input__control{cursor:default}.input__clear{position:absolute;z-index:5;top:0;right:0;visibility:hidden;margin:0;padding:0;pointer-events:none;opacity:0;background-repeat:no-repeat;background-position:50% 50%;transition:visibility 0s linear .1s,opacity .1s ease-out}.input_disabled_yes .input__clear{display:none}.input_size_s .input__clear,.input_size_xs .input__clear{background-image:url(../../../../../_m/B8eOwa4HB-JnzSOAZiWnu0hWGAk.svg)}.input_size_m .input__clear{background-image:url(../../../../../_m/eS-nxtWWJ1LfBWLfd096swuFjH4.svg)}.b-favs-links{position:relative;height:460px;margin:20px 5% 20px 280px}.b-favs-links .scroll{height:420px}.b-favs-links__list{padding-right:20px}.b-favs-links .scroll__native{margin-bottom:0;padding:0!important}.b-favs-links .scroll__track_orientation_horizontal,.b-favs-links .spin2_show_no{display:none}.b-favs-links .input_type_filter{display:none;width:calc(100% - 70px);margin:5px 0 10px 25px}.b-favs-links .spin2_type_load{position:absolute;top:10px}.b-favs-link{position:relative;clear:both;min-width:500px;height:20px;padding:7px 25px;border-radius:4px;line-height:20px}.b-favs-link_mode_edited{min-width:300px}.b-favs-links_mode_edited .b-favs-link:hover{background-color:#f9f3da}.b-favs-link__title,.b-favs-link__url{float:left;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.b-favs-link__title{font-size:15px;max-width:45%;color:#1a3dc1}.b-favs-link__title .link{color:#04b!important}.b-favs-link__title .link:visited{color:#909!important}.b-favs-link__title .link:hover,.b-favs-link__title .link:visited:hover{color:#c00!important}.b-favs-links_mode_edited .b-favs-link__title .link,.b-favs-links_mode_edited .b-favs-link__title .link:active,.b-favs-links_mode_edited .b-favs-link__title .link:hover,.b-favs-links_mode_edited .b-favs-link__title .link:link,.b-favs-links_mode_edited .b-favs-link__title .link:visited{color:#000!important}.b-favs-link__title .input,.b-favs-link_mode_edited .b-favs-link__title .link{display:none}.b-favs-link_mode_edited .b-favs-link__title .input{display:inline-block;background-color:#fff;line-height:20px}.b-favs-link_mode_edited .b-favs-link__title{width:60%;max-width:none}.b-favs-link__title .input__control{padding:0;font-size:15px}.b-favs-link__title .input__box{padding:0}.b-favs-link__title .input__clear{display:none}.b-favs-link__url{max-width:40%;margin-left:5px;color:#ccc}.b-favs-link_mode_edited .b-favs-link__url{max-width:20%}.b-favs-link__date{float:right;color:#ccc}.b-favs-link__move,.b-favs-link__remove,.b-favs-links_mode_edited .b-favs-link__date{display:none}.b-favs-links_mode_edited .b-favs-link:hover .b-favs-link__move,.b-favs-links_mode_edited .b-favs-link:hover .b-favs-link__remove{display:block}.b-favs-link__move,.b-favs-link__remove{position:absolute;top:0;padding:7px 10px;color:#999;font-size:13px}.b-favs-link__move{left:0;cursor:move}.b-favs-link__remove{right:0;cursor:pointer}.b-favs-link_mode_dragging,.b-favs-link_mode_moving,.b-favs-link_mode_removing{transition:all .2s ease-out;opacity:.3;background-color:#f9f3da}.b-favs-link_mode_removing .b-favs-link__remove,.b-favs-links_dragging_yes .b-favs-link *{pointer-events:none}.input_size_m{font-size:15px;line-height:32px}.input_size_m .input__control,.input_size_m .input__hint{height:32px;border-right-width:10px;border-left-width:10px}.input_size_m .input__icon{width:32px}.input_size_m .input__clear{width:32px;height:32px}.input_size_m .input__icon_side_right~.input__clear{right:16px}.input_size_m .input__clear_visibility_visible~.input__control{border-right-width:26px}.input_size_m .input__icon_side_right~.input__clear_visibility_visible~.input__control{border-right-width:42px}.input_size_m .input__hint.input__hint_rpad_yes,.input_size_m .input__icon_side_right~.input__control{border-right-width:32px}.input_size_m .input__hint.input__hint_lpad_yes,.input_size_m .input__icon_side_left~.input__control{border-left-width:32px}.input_size_m.input_type_textarea .input__control{padding:6px 8px 0}.input_size_m.input_type_textarea .input__clear~.input__control{padding-right:30px}.input_size_m .input__control{line-height:32px}.input_theme_lite .input__box:before{border-top:none;border-right:none;border-bottom:2px solid rgba(203,203,203,.6);border-left:none}.input_theme_lite.input_focused_yes .input__box:before{border-bottom-color:#fc0;box-shadow:none}.b-favs-options-button{position:absolute;bottom:20px;left:20px}.b-favs-options-button.button2{position:absolute}.m-suggest__popup.popup2_role_suggest-items{overflow:hidden;min-width:150px;padding:0;border:1px solid rgba(0,0,0,.1);box-shadow:none}.m-suggest__popup.popup2_role_suggest-items.popup2_suggest-type_b2b{border:0;box-shadow:0 10px 20px 0 rgba(0,0,0,.2)}.m-suggest__popup_labels_yes.popup2_role_suggest-items:not(.popup2_suggest-type_b2b){border-top:none}.m-suggest__popup_header_yes.popup2_role_suggest-items:not(.popup2_suggest-type_b2b){border-right:none}.m-suggest__popup_header_yes.popup2_visible_yes:not(.popup2_outside_yes){right:0;border-top:0;border-right:0}.m-suggest__popup .popup2__content{padding:0}.m-suggest__popup-items{margin:0;padding:0;list-style:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.m-suggest__popup-items:not(.m-suggest-in-search-header){max-width:600px}.m-suggest__popup-items .m-suggest-item{padding-left:8px}.m-suggest__popup .popup2__content,.popup_role_suggest-items .popup__content{overflow:auto}.messenger{position:relative;width:35px;height:35px;cursor:pointer}.messenger:active .messenger__icon{-ms-transform:scale(.95);transform:scale(.95)}.w-header-settings{display:inline-block;width:30px;line-height:25px}.w-header-settings .awesome-icon{position:relative;top:2px;left:6px;cursor:pointer;opacity:.4;font-size:21px}.w-header-settings .awesome-icon:hover{opacity:.7}.w-header-settings__popup .popup2__content{padding:5px 0}.w-header-settings__item .link{display:block;padding:7px 10px;transition:none;color:#000;font-size:14px}.w-header-settings__item .link:hover{background:#ffeba0}.w-header-settings__item .awesome-icon{margin-right:6px}.input_theme_websearch{position:relative;font-family:arial,sans-serif;color:#000}.input_theme_websearch .input__control{font-family:inherit}.input_theme_websearch .input__box:before{content:none}.input_theme_websearch:before{position:absolute;top:0;right:0;bottom:0;left:0;content:'';border-style:solid;border-color:#ffdb4d;background-color:#fff;background-clip:padding-box;border-color:rgba(75,75,75,.15);border-radius:3px}.input_theme_websearch .input__clear{background-image:url(../../../../../_m/nJL92_8XGrQ8WN7LePOnzmpHzd4.svg);background-size:16px}.input_theme_websearch.input_focused_yes:before{border-color:#ffdb4d}.dropdown2{display:inline-block}.services-table{margin:0 auto;padding:0;list-style:none}.header__under .services-table{margin:15px auto}.services-table_size_s{width:480px}.user2__add-account.user-account{color:#333}.user-account,.user2{position:relative;display:inline-block}.user2__add-account.user-account_focused_yes{color:#d00}.user-account{z-index:0;text-decoration:none;color:#000;outline:0}.user-account_focused_yes{outline:1px solid transparent}.user-account.user-account_template_yes{display:none}.user-account{transition:color .15s ease-out}.b-head .header2__left .header2__menu-item:hover .link,a.user-account_hovered_yes{color:red}.user-pic__camera{position:absolute;z-index:1;top:0;overflow:hidden;width:100%;height:100%;border-radius:50%}.user-pic__link{position:absolute;bottom:0;left:0;width:100%;outline:0;background-color:rgba(0,0,0,.5);height:50%;transition:height .3s ease-out}.user-pic__camera:after{position:absolute;top:50%;left:50%;width:24px;height:24px;content:'';pointer-events:none;background-image:url(../../../../../_m/N1p136nb5S7kvGXsPgezX85pm4k.svg);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);transition:transform .3s ease-out;-ms-transform:translate(-50%,-10%) scale(.66);transform:translate(-50%,-10%) scale(.66);will-change:transform}.user-pic:hover .user-pic__camera:after{top:50%;-ms-transform:translate(-50%,-50%) scale(1);transform:translate(-50%,-50%) scale(1)}.user-pic:hover .user-pic__link{height:100%}.ticker{display:inline-block;font:700 13px/15px 'Helvetica Neue',Helvetica,Arial,sans-serif;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:opacity .2s}.light-popup{position:absolute;top:100%;visibility:hidden;width:100%;margin:-9999px 0 0 -9999px}.light-popup_visible_yes{visibility:visible;margin:0}.user2__organizations{position:relative;margin-top:10px;border-top:1px solid rgba(0,0,0,.1);border-bottom:1px solid rgba(0,0,0,.1)}.icon.user2__expand-organizations-icon{display:none;position:absolute;pointer-events:none;top:15px;right:15px}.user2__organizations_expandable_yes .user2__expand-organizations-icon{display:inline-block}.user2__organizations_expandable_yes .user-organization_hovered_yes{background-color:#ededed;cursor:pointer}.user2__organizations-trigger .user-organization__name{font-weight:700}.user2__organizations_collapsed_yes .user2__organizations-cropper{height:0;overflow:hidden}.user-organization{display:block;position:relative;height:42px;padding:5px 20px;text-decoration:none;color:#000;outline:0;cursor:default}.user-organization_focused_yes{outline:1px solid transparent}.user-organization_template_yes{display:none}.b-head .dropdown2_role_services{position:absolute;top:22px;left:32px}.b-head .dropdown2_role_services .button2::before{border:0}.b-head .dropdown2_role_services .header2__burger{width:16px;height:16px;cursor:pointer}.b-head .b-favs&gt;.link:after{font-size:10px}.b-head .header2 .header2__main{height:60px;border-bottom:1px solid rgba(0,0,0,.06)}.b-head .header2__logo{display:table-cell;height:60px;padding-right:5px;padding-left:65px;cursor:pointer;vertical-align:middle;white-space:nowrap}.b-head .header2__logo .b-head__org-logo{min-width:44px;max-width:124px;max-height:44px;margin-right:7px;vertical-align:middle}.b-head .header2__logo .logo{position:relative;bottom:3px}.b-head .header2__service-logo{margin-right:62px;padding-top:8px;cursor:pointer}.b-head .header2__left{padding-top:10px}.b-head .header2__left .header2__menu-item:first-of-type{margin-left:0}.b-head .header2__left .header2__menu-item{position:relative;top:11px;margin-left:33px;font-size:14px}.b-head .header2__left .header2__menu-item.header2__menu-item_active_yes:after{position:absolute;top:-20px;right:0;left:0;content:' ';border:1px solid #ffdb4d}.b-head .header2__right{padding:14px 20px 0 12px}.b-head .header2__right .button2_type_new-page{font-size:14px}.b-head .header2__right .button2_type_new-page .button2__text{margin-right:21px}.b-head .header2__right .button2_type_new-page .button2__icon_side_left~.button2__text{margin-left:44px}.b-head .header2__right .button2_type_new-page .button2__icon_side_left{left:7px}.b-head .header2__right .button2_type_new-page,.b-head .header2__right .dropdown-menu,.b-head .header2__right .search2,.b-head .header2__right .w-header-settings{vertical-align:middle}.b-head .header2__right .b-head__search-button .button2__icon,.b-head .header2__right .b-head__search-button .button2__text,.b-head .header2__right .b-head__search-button.button2_checked_yes:not(.button2_disabled_yes) .button2__icon,.b-head .header2__right .input_role_search .input__clear_visibility_visible{opacity:.25}.b-head .header2__right .input_role_search:before{border-width:2px}.b-head .header2__right .search2{width:300px;margin-right:20px;margin-left:20px}.b-head .header2__right .link_type_settings{margin-right:20px}.b-head .header2__right .link_type_settings .icon{width:16px;height:16px}.b-head .header2__right .user2 .user-account__pic,.b-head .header2__right .user2 .user-pic__image{width:32px;height:32px}.b-head .header2__right .user2 .user2__current-account{direction:rtl}.b-head .header2__right .user2 .user2__current-account .user-pic{margin-left:10px}.b-head .header2__right .user2 .user2__current-account .user-account__name{margin-left:0}.b-head__services-popup{border-radius:2px;padding:22px 17px}.b-head__services-popup .services-table{width:300px}.b-head__services-popup .services-table .services-table__item{width:100px;height:95px}.b-head__services-popup .services-table .services-table__item .service__icon{width:42px;height:42px;background-position:center;background-size:contain}.b-head__services-popup .services-table .services-table__item .service__name{position:relative;top:10px;font-size:14px}.popup2_behavior_staff-card{z-index:32701!important}.popup2_theme_normal{visibility:hidden;box-sizing:border-box;margin:-9999px 0 0 -9999px;border:1px solid rgba(0,0,0,.06);animation-duration:.1s;animation-timing-function:ease-out;animation-fill-mode:forwards}.popup2_theme_normal .popup2__tail:before{position:absolute;top:1px;right:1px;bottom:0;left:0;content:'';border:1px solid transparent;border-bottom-color:rgba(0,0,0,.06);border-left-color:rgba(0,0,0,.06)}.popup2_theme_normal .popup2__tail:after{position:absolute;top:0;right:0;bottom:1px;left:1px;content:'';background-image:linear-gradient(to top right,#fff 50%,transparent 50%)}.popup2_theme_normal:before{position:absolute;top:0;right:0;bottom:0;left:0;content:'';border-radius:.1px;background:#fff;box-shadow:0 10px 20px -5px rgba(0,0,0,.4)}.popup2_theme_normal.popup2_visible_yes:before{z-index:-1}.popup2_theme_normal.popup2_js_inited{display:block}.popup2_theme_normal.popup2_visible_yes{visibility:visible;margin:0}.popup2_theme_normal.popup2_direction_bottom-center,.popup2_theme_normal.popup2_direction_bottom-left,.popup2_theme_normal.popup2_direction_bottom-right{animation-name:popup2_theme_normal_bottom}.popup2_theme_normal.popup2_direction_bottom-center.popup2_visible_yes,.popup2_theme_normal.popup2_direction_bottom-left.popup2_visible_yes,.popup2_theme_normal.popup2_direction_bottom-right.popup2_visible_yes{animation-name:popup2_theme_normal_bottom_visible}.popup2_theme_normal.popup2_direction_top-center,.popup2_theme_normal.popup2_direction_top-left,.popup2_theme_normal.popup2_direction_top-right{animation-name:popup2_theme_normal_top}.popup2_theme_normal.popup2_direction_top-center.popup2_visible_yes,.popup2_theme_normal.popup2_direction_top-left.popup2_visible_yes,.popup2_theme_normal.popup2_direction_top-right.popup2_visible_yes{animation-name:popup2_theme_normal_top_visible}.popup2_theme_normal.popup2_direction_right-bottom,.popup2_theme_normal.popup2_direction_right-center,.popup2_theme_normal.popup2_direction_right-top{animation-name:popup2_theme_normal_right}.popup2_theme_normal.popup2_direction_right-bottom.popup2_visible_yes,.popup2_theme_normal.popup2_direction_right-center.popup2_visible_yes,.popup2_theme_normal.popup2_direction_right-top.popup2_visible_yes{animation-name:popup2_theme_normal_right_visible}.popup2_theme_normal.popup2_direction_left-bottom,.popup2_theme_normal.popup2_direction_left-center,.popup2_theme_normal.popup2_direction_left-top{animation-name:popup2_theme_normal_left}.popup2_theme_normal.popup2_direction_left-bottom.popup2_visible_yes,.popup2_theme_normal.popup2_direction_left-center.popup2_visible_yes,.popup2_theme_normal.popup2_direction_left-top.popup2_visible_yes{animation-name:popup2_theme_normal_left_visible}.m-head-menu__more-popup{border:1px solid rgba(0,0,0,.1)}.m-head-menu__more-popup:before{content:none}.m-head-menu__more-popup .popup2__content{padding:4px 0;background:#fff}.m-head-menu__more-popup .popup2__tail:before{border-bottom-color:rgba(0,0,0,.1);border-left-color:rgba(0,0,0,.1)}.tooltip_size_s .tooltip__content{padding:8px;font-size:13px;line-height:12px}.tooltip_size_s .popup2__tail{width:12px;height:12px}.tooltip_view_classic.tooltip_theme_error.popup2_theme_normal{color:#fff;border:0}.tooltip_view_classic.tooltip_theme_error.popup2_theme_normal .tooltip__backdrop{opacity:.9}.tooltip_view_classic.tooltip_theme_error.popup2_theme_normal .tooltip__backdrop:before{background:#ff6464}.tooltip_view_classic.tooltip_theme_error.popup2_theme_normal:before{background:0 0}.tooltip_view_classic.tooltip_theme_error .tooltip__backdrop:before{box-shadow:none}.tooltip_view_classic.tooltip_theme_error.popup2_theme_normal .popup2__tail:after{background-image:linear-gradient(to top right,#ff6464 50%,transparent 50%)}.m-notification_theme_info{background-color:#5b5b5b}.m-notification_theme_info:hover{background-color:rgba(91,91,91,.85)}.m-notification_icons_yes{min-width:160px;padding-left:30px}.m-notification_icons_yes .m-notification__icon{display:inline}.m-notification_icons_yes .awesome-icon_type_theme-icon{font-size:110%}.m-notification_clear_yes .awesome-icon_type_clear{display:block}.m-notification_clear_yes{padding-right:25px}.input_size_s{font-size:13px;line-height:28px}.input_size_s .input__control,.input_size_s .input__hint{height:28px;border-right-width:8px;border-left-width:8px}.input_size_s .input__icon{width:28px}.input_size_s .input__clear{width:28px;height:28px}.input_size_s .input__icon_side_right~.input__clear{right:14px}.input_size_s .input__clear_visibility_visible~.input__control{border-right-width:22px}.input_size_s .input__icon_side_right~.input__clear_visibility_visible~.input__control{border-right-width:36px}.input_size_s .input__hint.input__hint_rpad_yes,.input_size_s .input__icon_side_right~.input__control{border-right-width:28px}.input_size_s .input__hint.input__hint_lpad_yes,.input_size_s .input__icon_side_left~.input__control{border-left-width:28px}.input_size_s.input_type_textarea .input__control{padding:4px 6px 0}.input_size_s.input_type_textarea .input__clear~.input__control{padding-right:22px}.input_size_s .input__control{line-height:28px}.input_theme_normal,.input_theme_normal .input__control{font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;color:#000}.input_disabled_yes.input_theme_normal .input__control{color:#aaa;-webkit-text-fill-color:#aaa}.input_theme_normal .input__control::-webkit-input-placeholder,.input_theme_normal .input__hint{opacity:1;color:#999}.input_theme_normal .input__control:-ms-input-placeholder,.input_theme_normal .input__hint{opacity:1;color:#999}.input_theme_normal .input__control::placeholder,.input_theme_normal .input__hint{opacity:1;color:#999}.input_theme_normal .input__box:before{border:1px solid rgba(0,0,0,.2);background-color:#fff;background-clip:padding-box;transition:.1s ease-out;transition-property:border-color,border-width,background-color}.input_theme_normal.input_hovered_yes .input__box:before{border-color:rgba(0,0,0,.3)}.input_theme_normal.input_focused_yes .input__box:before{border:2px solid #ffdb4d}.input_theme_normal.input_disabled_yes .input__box:before{border-width:0;background-color:rgba(0,0,0,.08)}.input_theme_normal.input_type_textarea .input__box:before{transition-property:border-color,border-width,top,left,right,bottom}.input__clear_visibility_visible{visibility:visible;cursor:pointer;pointer-events:auto;opacity:.3;transition:opacity .1s ease-out}.input__clear_visibility_visible:hover{opacity:.8}.b-favs-links_data-loaded_yes .input_type_filter{display:inline-block}.m-suggest-item{position:relative;display:block;margin:0;padding:5px 5px 5px 0;list-style:none;cursor:pointer;white-space:nowrap;text-decoration:none}.m-suggest-item_in-search-header_yes{padding:9px 0}.m-suggest-item_size_s{font-size:14px}.m-suggest-item_size_m{font-size:16px}.m-suggest-item .m-suggest-item__info-wrapper{position:relative;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.m-suggest-item__selected{font-weight:700}.m-suggest-item_type_maillist{color:rgba(0,0,0,.2)}.m-suggest-item_type_equipment,.m-suggest-item_type_room,.m-suggest-item_type_table{min-height:44px;padding-top:3px;padding-bottom:3px}.m-suggest-item_type_table .m-suggest-item__table{display:inline-block;margin-top:3px}.m-suggest-item_type_table .m-suggest-item__office{overflow:hidden;margin-top:2px;white-space:nowrap;text-overflow:ellipsis;font-size:13px;color:rgba(0,0,0,.2)}.m-suggest-item_type_equipment .m-suggest-item__equipment{display:inline-block;margin-top:3px}.m-suggest-item_type_equipment .m-suggest-item__office{overflow:hidden;margin-top:2px;white-space:nowrap;text-overflow:ellipsis;font-size:13px;color:rgba(0,0,0,.2)}.m-suggest-item_type_simple.m-suggest-item_link_yes{text-decoration:underline}.m-suggest-item_type_room .m-suggest-item__room{display:inline-block;margin-top:3px}.m-suggest-item_type_room .m-suggest-item__office{overflow:hidden;margin-top:2px;white-space:nowrap;text-overflow:ellipsis;font-size:13px;color:rgba(0,0,0,.2)}.m-suggest-item_type_nav .m-suggest-item__icon{display:inline-block;width:1em;height:1em;vertical-align:middle;background-repeat:no-repeat;background-position:center}.m-suggest-item_type_nav .m-suggest-item__icon_type_abc{background-image:url(../../../../../_m/RuHGQlY3wQa8gS1NhQ8j9qbEPS8.svg)}.m-suggest-item_type_nav .m-suggest-item__info{overflow:hidden;margin-top:2px;white-space:nowrap;text-overflow:ellipsis;font-size:13px;color:rgba(0,0,0,.2)}.m-suggest-item_type_b2b-departments,.m-suggest-item_type_b2b-groups,.m-suggest-item_type_b2b-people{height:40px;padding:9px 16px;color:#000}.m-suggest-item_type_b2b-people .m-suggest-item__avatar{position:relative;display:inline-block;margin-right:12px;border-radius:100%}.m-suggest-item_type_b2b-people .m-suggest-item__main-info{display:inline-block;width:calc(100% - 52px);height:40px;vertical-align:top}.m-suggest-item_type_b2b-people .m-suggest-item__title{overflow:hidden;margin-bottom:2px;text-overflow:ellipsis;font-size:14px;line-height:21px}.m-suggest-item_type_b2b-people .m-suggest-item__description{overflow:hidden;text-overflow:ellipsis;font-size:13px;color:#939393}.m-suggest-item_type_b2b-groups .m-suggest-item__avatar{position:relative;display:inline-block;width:40px;height:40px;margin-right:12px;border-radius:100%;background:url(../../../../../_m/0JPsdqulHujLurEiFsG40wmVuow.svg) center no-repeat;background-color:#af95eb;background-position-y:9px}.m-suggest-item_type_b2b-groups .m-suggest-item__main-info{display:inline-block;width:calc(100% - 52px);height:40px;vertical-align:top}.m-suggest-item_type_b2b-groups .m-suggest-item__title{overflow:hidden;text-overflow:ellipsis;font-size:14px;line-height:40px}.m-suggest-item_type_b2b-departments .m-suggest-item__avatar{position:relative;display:inline-block;width:40px;height:40px;margin-right:12px;border-radius:100%;background:url(../../../../../_m/yx1eVZ20GF_U6g7uoAbnoargWK4.svg) center no-repeat;background-color:#76ebc5;background-position-y:7px}.m-suggest-item_type_b2b-departments .m-suggest-item__main-info{display:inline-block;width:calc(100% - 52px);height:40px;vertical-align:top}.m-suggest-item_type_b2b-departments .m-suggest-item__title{overflow:hidden;text-overflow:ellipsis;font-size:14px;line-height:40px}.m-suggest-group{padding-top:10px}.m-suggest-group:last-child{padding-bottom:10px}.m-suggest-group .m-suggest-group__group-label{padding-left:8px;font-size:13px;color:#ccc}.m-suggest_multiple_yes .textinput{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.m-suggest_multiple_yes .textinput .m-suggest__cloud{z-index:2;height:22px;margin-top:4px;margin-left:10px;padding:0 5px;border:1px solid #ccc;line-height:22px}.m-suggest_multiple_yes .input .input__box .m-suggest__cloud .m-username:hover,.m-suggest_multiple_yes .input .input__box .m-suggest__cloud .m-username:hover .m-username__first-letter,.m-suggest_multiple_yes .textinput .m-suggest__cloud .m-username:hover,.m-suggest_multiple_yes .textinput .m-suggest__cloud .m-username:hover .m-username__first-letter{color:#c00!important}.m-suggest_multiple_yes .textinput .m-suggest__cloud .awesome-icon{margin-left:7px;cursor:pointer;opacity:.2}.m-suggest_multiple_yes .input .input__box .m-suggest__cloud .awesome-icon:hover,.m-suggest_multiple_yes .textinput .m-suggest__cloud .awesome-icon:hover{opacity:.4}.m-suggest_multiple_yes .textinput .textinput__clear{top:initial;bottom:0}.m-suggest_multiple_yes .textinput .textinput__control{-ms-flex:1;flex:1;min-width:30%}.m-suggest_multiple_yes .input .input__box:before,.m-suggest_multiple_yes .textinput:before{background-color:transparent}.m-suggest_multiple_yes .input .input__box{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.m-suggest_multiple_yes .input .input__box .m-suggest__cloud{z-index:1;height:22px;margin-top:4px;margin-left:10px;padding:0 5px;border:1px solid #ccc;line-height:22px}.m-suggest_multiple_yes .input .input__box .m-suggest__cloud .awesome-icon{margin-left:7px;cursor:pointer;opacity:.2}.m-suggest_multiple_yes .input .input__box .input__clear{top:initial;bottom:0}.m-suggest_multiple_yes .input .input__box .input__control{-ms-flex:1;flex:1;min-width:30%}.m-suggest-item_type_cluster-search{background:#fcfcfc}.m-suggest-item_type_cluster-search.m-suggest-item_hovered_yes{background:#fdedaf}.m-suggest-item_type_cluster-search .m-suggest-item__info-wrapper{padding:5px 0;color:#000}.popup2.popup2_view_default{border:0;border-radius:4px;box-shadow:0 1.5ex 2ex -1ex rgba(0,0,0,.3)}.popup2.popup2_view_default:before{border-radius:4px;box-shadow:0 0 0 1px rgba(0,0,0,.05)}.popup2.popup2_view_default .popup2__tail:before{top:0;right:0}.popup2.popup2_view_default&gt;:first-child{border-top-left-radius:4px;border-top-right-radius:4px}.popup2.popup2_view_default&gt;:last-child{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.popup2.popup2_view_default.popup2_tone_default{color:#000;background-color:#fff}.popup2.popup2_view_default.popup2_tone_default:before{background-color:transparent}.popup2_view_default.popup2_tone_default .popup2__tail:after{background-image:linear-gradient(to top right,#fff 50%,transparent 50%)}.w-header-settings_opened_yes .awesome-icon{opacity:.7}.input_size_ws-head{font-size:14px;line-height:32px}.input_size_ws-head:before{border-width:2px 0 2px 2px}.input_size_ws-head .input__control{border-right-width:30px;border-left-width:13px}.input_theme_websearch .input__clear{width:32px}.input_size_ws-head .input__control,.input_theme_websearch .input__clear{height:32px}.services-table_size_l{width:800px}.ticker_state_empty{visibility:hidden;opacity:0}.user-account_has-accent-letter_yes .user-account__name:first-letter{color:red}.light-popup_animated_yes{visibility:hidden;animation-duration:.1s;animation-timing-function:ease-out;animation-fill-mode:forwards}.light-popup_animated_yes.light-popup_reverse-animation{animation-name:light-popup_theme_normal_bottom}.light-popup_animated_yes.light-popup_visible_yes{visibility:visible;margin-right:0;margin-left:0;animation-name:light-popup_theme_normal_bottom_visible}.user-account_has-subname_yes .user-account__name{font-size:13px;font-weight:700}.user-account_has-subname_yes .user-account__subname{display:block;font-weight:500;color:#999}.user-account_has-subname_yes .user-account__pic~.user-account__name{margin-left:14px;line-height:20px}.m-head-menu__popup{padding:0;box-shadow:0 0 0 1px rgba(0,0,0,.1) inset,0 10px 20px -5px rgba(0,0,0,.4);border:1px solid rgba(0,0,0,.1)}.m-head-menu__popup.popup2_theme_normal{animation:none}.button2,.m-head-menu__popup .popup2__content,.m-head-menu__popup.popup_has-close_yes .popup2__content{padding:0}.m-head-menu__popup .popup2__tail{border:1px solid rgba(0,0,0,.1);background:#fff}.m-head-menu__popup.popup_has-close_yes .popup__close{top:0;right:0;left:0;width:100%;height:46px;background:0 0}.m-head-menu__popup.popup2 .m-head-menu__item_hassub_yes .link .m-head-menu__icon:before{-moz-transform-origin:50% 70%}.m-head-menu__popup.popup2.popup2_visible_yes .m-head-menu__item_hassub_yes .link .m-head-menu__icon:before{transition:transform .3s;-ms-transform:rotate(-180deg);transform:rotate(-180deg)}.button2{display:inline-block;overflow:visible;box-sizing:border-box;margin:0;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;-moz-user-focus:ignore;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;text-align:center;white-space:nowrap;text-decoration:none;background:0 0;-webkit-tap-highlight-color:transparent;-ms-touch-action:manipulation;touch-action:manipulation}.button2[aria-disabled=true],.button2_disabled_yes{pointer-events:none}.button2::-moz-focus-inner{padding:0;border:0}.button2:before{position:absolute;z-index:-1;top:0;right:0;bottom:0;left:0;content:''}.button2{cursor:pointer}.button2[aria-disabled=true],.button2_disabled_yes{cursor:default}.button2.button2.button2_pin_brick-round:before{border-top-left-radius:0;border-bottom-left-radius:0}.scroll{position:relative}.scroll_dragged_yes{cursor:default}.m-suggest-item_type_staff{min-height:44px;margin-bottom:1px;padding-top:3px;padding-right:60px;padding-bottom:3px}.m-suggest-item_type_staff .m-userpic{position:absolute;top:0;right:0}.m-suggest-item_type_staff .m-suggest-item__info-wrapper{margin-top:3px}.m-suggest-item_type_staff .m-suggest-item__brief,.m-suggest-item_type_staff .m-suggest-item__fullname,.m-suggest-item_type_staff .m-suggest-item__phone{display:inline;color:#000}.m-suggest-item_type_staff .m-suggest-item__general-info{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.m-suggest-item_type_staff .m-suggest-item__general-info_short_yes{padding-right:47px}.m-suggest-item_type_staff .m-suggest-item__phone{position:absolute;top:0;right:0;font-size:13px}.m-suggest-item_type_staff .m-suggest-item__info{overflow:hidden;margin-top:2px;white-space:nowrap;text-overflow:ellipsis;font-size:13px;color:rgba(0,0,0,.2)}.m-suggest-item_hovered_yes{background:#fdedaf}.m-suggest-item_labels_yes .m-suggest-item__item-label{position:absolute;display:none;overflow:hidden;box-sizing:border-box;width:100px;padding-right:20px;text-align:right;text-overflow:ellipsis;color:rgba(0,0,0,.2)}.m-suggest-group .m-suggest-item_labels_yes:first-child .m-suggest-item__item-label{display:inline-block;font-size:13px}.m-suggest-item_labels_yes.m-suggest-item_type_staff .m-suggest-item__item-label{top:5px}.m-suggest-item_labels_yes .m-suggest-item__info-wrapper{padding-left:97px}.m-suggest-in-search-header .m-suggest-item__info-wrapper{padding-left:158px}.textinput_size_s{height:28px}.textinput_size_s .textinput__control{height:28px;font-size:13px;border-width:0 8px}.textinput_size_s .textinput__icon_side_left~.textinput__control{border-left-width:28px}.textinput_size_s .textinput__icon_side_right~.textinput__control{border-right-width:28px}.textinput_size_s.textinput_has-clear_yes .textinput__control{border-right-width:22px}.textinput_size_s.textinput_has-clear_yes .textinput__icon_side_right~.textinput__control{border-right-width:44px}.textinput_size_s.textinput_icon-right_yes .textinput__clear{right:22px}.textinput_size_s .textinput__icon.icon{width:28px;height:28px}[class*=_pin_] .textinput__box{border-radius:3px}.textinput_view_default .textinput__box{border-radius:4px}.button2.button2.button2_pin_clear-round:before{border-left-width:0;border-top-left-radius:0;border-bottom-left-radius:0}.notifier{position:relative;cursor:pointer;text-align:center;-ms-touch-action:manipulation;touch-action:manipulation}.notifier:before{display:inline-block;height:100%;content:'';vertical-align:middle}.notifier:active{-ms-transform:scale(.95);transform:scale(.95)}.button2_size_head{font-size:14px;line-height:32px}.button2_size_head .button2__text{margin:0 13px}.button2_size_head .button2__icon{width:32px}.button2_size_head .button2__icon_side_left~.button2__text{margin-left:33px}.button2_size_head .button2__icon_side_right~.button2__text{margin-right:33px}.button2_theme_action,.button2_theme_clear,.button2_theme_pseudo{position:relative;z-index:0;color:#000;border:0;outline:0}.button2_view_classic.button2_theme_action:before{border-radius:3px;background-color:#ffdb4d;transition:background-color .1s ease-out 0s}.button2_view_classic.button2.button2_theme_action.button2_pressed_yes[class]:before,.button2_view_classic.button2.button2_theme_action:not([aria-disabled=true]):active:before{background-color:#fc0}.button2_view_classic.button2_theme_action.button2_disabled_yes:before,.button2_view_classic.button2_theme_action[aria-disabled=true]:before{background-color:rgba(0,0,0,.08)}.button2_theme_action.button2_disabled_yes .button2__icon,.button2_theme_action.button2_disabled_yes .button2__text,.button2_theme_action[aria-disabled=true] .button2__icon,.button2_theme_action[aria-disabled=true] .button2__text{opacity:.5}.button2_view_classic.button2_theme_action.button2_progress_yes:before{background-color:#ffd426;background-image:repeating-linear-gradient(-45deg,#ffd426,#ffd426 4px,#f7c600 4px,#f7c600 8px);background-size:34px 34px}.button2.button2_theme_action.button2_progress_yes .button2__icon,.button2.button2_theme_action.button2_progress_yes .button2__text{opacity:1}.button2.button2_theme_action.button2_progress_yes:before{animation-name:button2-progress;animation-duration:.5s;animation-timing-function:linear;animation-iteration-count:infinite}.button2_view_classic.button2_theme_action.button2_hovered_yes:before,.button2_view_classic.button2_theme_action:not([aria-disabled=true]):hover:before{background-color:#ffd633}.utilityfocus .button2_view_classic.button2_theme_action.button2_focused_yes:before,.utilityfocus .button2_view_classic.button2_theme_action:not([aria-disabled=true]):focus:before{animation:button2-action-focus 1s infinite linear}.button2_view_classic.button2_theme_clear:before{border-radius:3px;transition:background-color .1s ease-out}.button2_theme_clear .button2__icon,.button2_theme_clear .button2__text{opacity:.3;transition:opacity .1s ease-out}.button2.button2_theme_clear.button2_checked_yes:not(.button2_disabled_yes) .button2__icon,.button2.button2_theme_clear.button2_checked_yes:not(.button2_disabled_yes) .button2__text,.button2.button2_theme_clear.button2_checked_yes:not([aria-disabled=true]) .button2__icon,.button2.button2_theme_clear.button2_checked_yes:not([aria-disabled=true]) .button2__text,.button2_theme_clear.button2_hovered_yes .button2__icon,.button2_theme_clear.button2_hovered_yes .button2__text,.button2_theme_clear:not([aria-disabled=true]):hover .button2__icon,.button2_theme_clear:not([aria-disabled=true]):hover .button2__text{opacity:.8}.utilityfocus .button2_view_classic.button2_theme_clear.button2_focused_yes[class]:before,.utilityfocus .button2_view_classic.button2_theme_clear:focus:before{border:2px solid #ffdb4d}.button2_view_classic.button2_theme_clear.button2_checked_yes.button2_pressed_yes:before,.button2_view_classic.button2_theme_clear.button2_checked_yes:not([aria-disabled=true]):active:before{background-color:transparent}.button2_view_classic.button2_theme_clear.button2_disabled_yes:before,.button2_view_classic.button2_theme_clear[aria-disabled=true]:before{background-color:rgba(0,0,0,.08)}.button2_view_classic.button2_theme_clear.button2_disabled_yes.button2_checked_yes:before,.button2_view_classic.button2_theme_clear[aria-disabled=true].button2_checked_yes:before{background-color:rgba(0,0,0,.15)}.input_pin_round-clear .input__box:before{border-right-width:0;border-top-left-radius:3px;border-bottom-left-radius:3px}.button2_view_classic.button2_theme_pseudo:before{border:1px solid;border-color:rgba(0,0,0,.2);border-radius:3px;background-color:transparent;background-clip:padding-box;transition:.1s ease-out;transition-property:border-color,border-width,background-color}.utilityfocus.utilityfocus .button2_view_classic.button2_theme_normal.button2_focused_yes[class]:before,.utilityfocus.utilityfocus .button2_view_classic.button2_theme_normal[class]:focus:before,.utilityfocus.utilityfocus .button2_view_classic.button2_theme_pseudo.button2_focused_yes[class]:before,.utilityfocus.utilityfocus .button2_view_classic.button2_theme_pseudo:focus[class]:before{border-width:2px;border-color:#ffdb4d}.button2_view_classic.button2_theme_pseudo.button2_pressed_yes:before,.button2_view_classic.button2_theme_pseudo:not([aria-disabled=true]):active:before{background-color:rgba(0,0,0,.05)}.button2_view_classic.button2_theme_pseudo.button2_checked_yes:before{border-color:rgba(153,122,0,.5);background-color:#ffeba0}.button2_view_classic.button2_theme_pseudo.button2_checked_yes.button2_pressed_yes:before,.button2_view_classic.button2_theme_pseudo.button2_checked_yes:not([aria-disabled=true]):active:before{border-color:rgba(129,103,0,.6);background-color:#fee481}.button2_view_classic.button2_theme_pseudo.button2_disabled_yes:before,.button2_view_classic.button2_theme_pseudo[aria-disabled=true]:before{border-color:rgba(0,0,0,.08);background-color:rgba(0,0,0,.08)}.button2_view_classic.button2_theme_pseudo.button2_disabled_yes.button2_checked_yes:before,.button2_view_classic.button2_theme_pseudo[aria-disabled=true].button2_checked_yes:before{border-color:rgba(0,0,0,.15);background-color:rgba(0,0,0,.15)}.button2_theme_pseudo.button2_disabled_yes .button2__icon,.button2_theme_pseudo.button2_disabled_yes .button2__text,.button2_theme_pseudo[aria-disabled=true] .button2__icon,.button2_theme_pseudo[aria-disabled=true] .button2__text{opacity:.5}.button2_view_classic.button2_theme_pseudo.button2_hovered_yes:before,.button2_view_classic.button2_theme_pseudo:not([aria-disabled=true]):hover:before{border-color:rgba(0,0,0,.3)}.button2_view_classic.button2_theme_pseudo.button2_checked_yes.button2_hovered_yes:before,.button2_view_classic.button2_theme_pseudo.button2_checked_yes:not([aria-disabled=true]):hover:before{border-color:rgba(118,94,0,.65)}.button2_size_s{height:28px;font-size:13px;line-height:28px}.button2_size_s .button2__text{margin:0 13px}.button2_size_s .button2__icon{width:28px}.button2_size_s .button2__icon.icon_type_arrow{width:31px}.button2_size_s .button2__icon_side_left~.button2__text{margin-left:25px}.button2_size_s .button2__icon_side_right~.button2__text{margin-right:25px}.menu{display:inline-block;overflow-x:hidden;overflow-y:auto;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.menu__item{white-space:nowrap}.menu_type_navigation{padding:0}.menu_type_navigation,.menu_type_navigation .menu__group{margin:0;list-style:none}.menu__item_disabled_yes,.menu_disabled_yes{cursor:default;pointer-events:none}.menu:after,.menu:before{display:block;content:''}.m-suggest-group_is-b2b_yes .m-suggest-item_hovered_yes{background:#f1f2f3}.m-suggest-group_is-b2b_yes .m-suggest-group__group-label,.m-suggest__popup-items .m-suggest-group_is-b2b_yes .m-suggest-item{padding-left:16px}.m-suggest-group_is-b2b_yes .m-suggest-group__group-label{margin-top:5px;margin-bottom:10px;font-size:14px;color:#939393}.link{text-decoration:none;outline:0;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer}.utilityfocus .link:focus{outline:2px solid #fc0}.link[aria-disabled=true]{pointer-events:none;color:#ddd;cursor:default}.link__icon{transition:opacity .15s ease-out}.link[aria-disabled=true]:hover{color:#ddd}.link_theme_black{color:#000}.link_theme_black:hover{color:#c00}.link_theme_pseudo{color:#04b}.link_theme_pseudo .link__inner{border-bottom:1px dotted}.utilityfocus .link_theme_pseudo:focus{border-bottom:1px dotted;outline:0;box-shadow:0 0 0 2px #fc0}.utilityfocus .link_theme_pseudo:focus .link__inner{border-bottom:none}.link_theme_pseudo:hover{color:#c00}.button2_theme_normal{position:relative;z-index:0;color:#000;border:0;outline:0}.button2_view_classic.button2_theme_normal:before{border:1px solid;border-color:rgba(0,0,0,.2);border-radius:3px;background-color:#fff;background-clip:padding-box;transition:.1s ease-out;transition-property:border-color,border-width,background-color}.button2_view_classic.button2_theme_normal.button2_pressed_yes:before,.button2_view_classic.button2_theme_normal:not([aria-disabled=true]):active:before{background-color:#f3f1ed}.button2_view_classic.button2_theme_normal.button2_checked_yes:before{border-color:rgba(153,122,0,.5);background-color:#ffeba0}.button2_view_classic.button2_theme_normal.button2_checked_yes.button2_pressed_yes:before,.button2_view_classic.button2_theme_normal.button2_checked_yes:not([aria-disabled=true]):active:before{border-color:rgba(129,103,0,.6);background-color:#fee481}.button2_view_classic.button2_theme_normal.button2_disabled_yes:before,.button2_view_classic.button2_theme_normal[aria-disabled=true]:before{border-color:rgba(0,0,0,.08);background-color:rgba(0,0,0,.08)}.button2_view_classic.button2_theme_normal.button2_disabled_yes.button2_checked_yes:before,.button2_view_classic.button2_theme_normal[aria-disabled=true].button2_checked_yes:before{border-color:rgba(0,0,0,.15);background-color:rgba(0,0,0,.15)}.button2_theme_normal.button2_disabled_yes .button2__icon,.button2_theme_normal.button2_disabled_yes .button2__text,.button2_theme_normal[aria-disabled=true] .button2__icon,.button2_theme_normal[aria-disabled=true] .button2__text{opacity:.5}.button2_view_classic.button2_theme_normal.button2_hovered_yes:before,.button2_view_classic.button2_theme_normal:not([aria-disabled=true]):hover:before{border-color:rgba(0,0,0,.3)}.button2_view_classic.button2_theme_normal.button2_checked_yes.button2_hovered_yes:before,.button2_view_classic.button2_theme_normal.button2_checked_yes:not([aria-disabled=true]):hover:before{border-color:rgba(129,103,0,.6)}.button2_size_m{height:32px;font-size:15px;line-height:32px}.button2_size_m .button2__text{margin:0 15px}.button2_size_m .button2__icon{width:32px}.button2_size_m .button2__icon.icon_type_arrow{width:35px}.button2_size_m .button2__icon_side_left~.button2__text{margin-left:29px}.button2_size_m .button2__icon_side_right~.button2__text{margin-right:29px}.button2.button2.button2_pin_round-brick:before{border-top-right-radius:0;border-bottom-right-radius:0}.scroll_theme_normal&gt;.scroll__track.scroll__track_hovered_yes{background:rgba(0,0,0,.08)}.scroll_theme_normal&gt;.scroll__track .scroll__thumb{background:rgba(0,0,0,.4)}.scroll_tech_js{overflow:hidden}.textinput_theme_normal{position:relative;display:inline-block;box-sizing:border-box;width:100%;vertical-align:top}.textinput_theme_normal .textinput__control{color:#000}.textinput_view_classic.textinput_disabled_yes.textinput_theme_normal .textinput__control{color:#aaa;-webkit-text-fill-color:#aaa}.textinput_view_classic.textinput_theme_normal .textinput__control::-webkit-input-placeholder{color:#999}.textinput_view_classic.textinput_theme_normal .textinput__control:-ms-input-placeholder{color:#999}.textinput_view_classic.textinput_theme_normal .textinput__control::placeholder{color:#999}.textinput_view_classic.textinput_theme_normal .textinput__box{border:1px solid rgba(0,0,0,.2);background-color:#fff}.textinput_view_classic.textinput_theme_normal.textinput_hovered_yes .textinput__box{border-color:rgba(0,0,0,.3)}.textinput_view_classic.textinput_theme_normal.textinput_focused_yes{border:0}.textinput_view_classic.textinput_theme_normal.textinput_focused_yes .textinput__box,.textinput_view_classic.textinput_theme_normal.textinput_focused_yes.textinput_hovered_yes .textinput__box{border:2px solid #ffdb4d}.textinput_view_classic.textinput_theme_normal.textinput_disabled_yes .textinput__box{border-color:transparent;background-color:rgba(0,0,0,.08)}.textinput_size_m{height:32px}.textinput_size_m .textinput__control{height:32px;font-size:15px;border-width:0 10px}.textinput_size_m .textinput__icon_side_left~.textinput__control{border-left-width:32px}.textinput_size_m .textinput__icon_side_right~.textinput__control{border-right-width:32px}.textinput_size_m.textinput_has-clear_yes .textinput__control{border-right-width:24px}.textinput_size_m.textinput_has-clear_yes .textinput__icon_side_right~.textinput__control{border-right-width:48px}.textinput_size_m.textinput_icon-right_yes .textinput__clear{right:24px}.textinput_size_m .textinput__icon.icon{width:32px;height:32px}.textinput.textinput_pin_round-brick .textinput__box{border-top-right-radius:0;border-bottom-right-radius:0}.m-head-user{-ms-flex-negative:0;flex-shrink:0}.m-head-user .m-userpic{cursor:pointer}.m-head-user .m-userpic__img{height:50px}.m-head-arrow__popup.popup2:before,.m-head-user__popup:before{box-shadow:none}.notifier_size_m{width:40px;height:40px}.notifier_size_m .notifier__ticker{top:-3px;right:6px;width:8px;height:8px;border:2px solid #fff}.notifier_size_m .notifier__box{height:21px}.notifier_size_m .notifier__bell{-ms-transform-origin:11px 0;transform-origin:11px 0}.notifier_has-unread_yes .notifier__bell{-ms-transform:rotate(8deg);transform:rotate(8deg)}.notifier_has-unread_yes .notifier__ticker{-ms-transform:scale(1);transform:scale(1)}.link_theme_normal{color:#04b}.link_theme_normal:hover{color:#c00}.m-head-action__button:before,.m-head-action__popup-toggler:before{border:1px solid;border-color:rgba(0,0,0,.2)}.m-head-action .button2__text{font-size:13px}.m-head-action .button:hover{color:inherit!important}.m-head-search{min-width:220px;max-width:300px}.m-head-search__search{display:-ms-flexbox;display:flex;width:100%;font-size:100%}.m-head-search__field{-ms-flex-positive:1;flex-grow:1}.m-head-search__button .button2__text{font-size:13px;line-height:31px}.m-head-arrow{position:relative;z-index:0;display:-ms-flexbox;display:flex;box-sizing:border-box;padding:0 32px 0 16px;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:#fff;outline:0;background:#ed9a3e}.m-head-arrow:after{position:absolute;z-index:1;top:0;right:-2px;bottom:0;width:25px;content:'';background:right center no-repeat url("data:image/svg+xml;utf8,&lt;svg width=\'21\' height=\'70\' xmlns=\'http://www.w3.org/2000/svg\'&gt;&lt;title&gt;Layer 1&lt;/title&gt;&lt;path fill=\'rgb(246,245,243)\' d=\'M0 0h22v70H0l18-35z\'/&gt;&lt;/svg&gt;")}.m-head-arrow .awesome-icon{width:16px;margin-right:16px;font-size:21px;line-height:50px;opacity:.7}.m-head-arrow__home{display:block;height:50px;font-size:22px;line-height:50px;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;margin-right:10px}.m-head-arrow__popup.popup2{border:0}.m-head-menu,.m-head-menu__list{margin:0;padding:0;vertical-align:top}.m-head-menu .m-head-menu__item .link_pseudo_yes .link__inner{border-bottom:none}.m-head-menu{display:-ms-flexbox;display:flex}.m-head-menu .link:focus,.m-head-menu .link:link{outline:0}.m-head-menu__item .link:hover,.m-head-menu__item .link:visited:hover{color:#c00!important}.m-head-action_with_popup .button2_role_list-toggler .button2__icon.awesome-icon{font-size:11px}.m-head-action_with_popup .button2_role_list-toggler .button2__icon.awesome-icon:before{height:7px;line-height:7px;transition:transform .3s}.m-head-action_with_popup .button2_role_list-toggler.button2_direction_up .button2__icon.awesome-icon:before{-ms-transform:rotate(-180deg);transform:rotate(-180deg)}.m-head-action__action-popup .popup__content{padding:0}.m-head-action__action-popup .m-head-action__popup-item .link{display:block;padding:0 18px 0 16px;cursor:pointer;font-size:15px;line-height:36px;color:#000;outline:0;transition:all .15s ease-out}.m-head-action__action-popup .m-head-action__popup-item .link:hover{background:#fde8a4}.m-head-action .button2.button2_pin_brick-round:before{left:-1px;border-top-left-radius:0;border-bottom-left-radius:0}.m-head-menu_type_open{min-width:0;padding-left:0;border-top:none;background:#fff}.m-head-menu.m-head-menu_type_open .link_menu_title,.m-head-menu_type_open .m-head-menu__item_hassub_yes .m-head-menu__item .link,.m-head-menu_type_open.m-head-menu_mode_more .link{top:0}.m-head-menu.m-head-menu_type_open .link_menu_title{line-height:44px}.m-head-menu_mode_more .m-head-menu__item .link,.m-head-menu_type_open .m-head-menu__item_hassub_yes .m-head-menu__item .link{line-height:36px}.m-head-menu_type_open .m-head-menu__item .link:hover{background:#fde8a4}.m-head-menu_type_open .m-head-menu__item .link_menu_title{display:inline-block}.m-head-menu_type_open .m-head-menu__item .link_menu_title:hover{color:inherit!important;background:0 0}.m-head-menu_type_open .m-head-menu__item_current_yes{border-top:none}.m-head{display:-ms-flexbox;display:flex;height:50px;margin:0;padding:0;background:#f6f5f3}.m-head__main,.m-head__min{background:#f6f5f3;-ms-flex-negative:0;flex-shrink:0}.m-head__main{padding:0 20px;-ms-flex-positive:1;flex-grow:1}.m-head__min{display:-ms-flexbox;display:flex;padding-right:20px;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between}.m-head__min.m-head-arrow{margin-right:0}.m-head__min.m-head-search{-ms-flex-positive:1;flex-grow:1;-ms-flex-negative:1;flex-shrink:1}.m-head .m-head-user{width:50px}.m-head .m-head__right{display:-ms-flexbox;display:flex;width:165px}.m-head_type_wiki{border:0}.m-head_type_wiki .m-head-arrow{background:#97b958;background:linear-gradient(to bottom,#97b958 0%,#7bab40 100%)}.m-head_type_wiki .m-head-arrow__home{color:#fff;font-weight:500}.m-head_type_wiki .m-head-menu__item:hover,.m-head_type_wiki .m-head-menu__item_current_yes{border-top-color:#97b958}.m-head_type_wiki .button_type_new-page{height:32px}</style><div class="b-head i-bem b-head_js_inited" data-bem="{&quot;b-head&quot;:{&quot;error&quot;:null}}"><div class="header2" role="banner"><div class="header2__main"><div class="dropdown2 dropdown2_switcher_button2 dropdown2_theme_normal dropdown2_autoclosable_yes dropdown2_role_services dropdown2_view_classic i-bem dropdown2_js_inited" data-bem="{&quot;dropdown2&quot;:{}}"><button class="button2 button2_view_classic button2_size_s button2_theme_normal i-bem" data-bem="{&quot;button2&quot;:{}}" type="button" autocomplete="off" tabindex="0"><span class="icon icon_type_burger icon_direction_bottom icon_size_s header2__burger"></span></button><div class="popup2 popup2_view_classic popup2_theme_normal popup2_autoclosable_yes popup2_target_anchor popup2_role_table-options popup2_hiding_yes b-head__services-popup i-bem popup2_js_inited" data-bem="{&quot;popup2&quot;:{&quot;directions&quot;:[&quot;bottom-left&quot;]}}"><div class="popup2__tail"></div><div class="popup2__tail"></div><ul class="services-table services-table_size_s i-bem services-table_js_inited"><li class="services-table__item"><div class="service"><a class="service__url link link_theme_normal" href="https://connect.yandex.ru/portal/home"><span class="service__icon service__icon_color_56 service-icon__dashboard service-icon__dashboard_color_56" style="background: url(https://yastatic.net/q/connect/portal-header-icons/dashboard.svg); background-size: contain; background-position: center; background-repeat: no-repeat;"></span><span class="service__name">Главная</span></a></div></li><li class="services-table__item"><div class="service"><a class="service__url link link_theme_normal" href="https://mail.yandex.ru/"><span class="service__icon service__icon_color_56 service-icon__mail service-icon__mail_color_56" style="background: url(https://yastatic.net/q/connect/portal-header-icons/mail.svg); background-size: contain; background-position: center; background-repeat: no-repeat;"></span><span class="service__name">Почта</span></a></div></li><li class="services-table__item"><div class="service"><a class="service__url link link_theme_normal" href="https://yandex.ru/chat"><span class="service__icon service__icon_color_56 service-icon__yamb service-icon__yamb_color_56" style="background: url(https://yastatic.net/q/connect/portal-header-icons/chat.svg); background-size: contain; background-position: center; background-repeat: no-repeat;"></span><span class="service__name">Мессенджер</span></a></div></li><li class="services-table__item"><div class="service"><a class="service__url link link_theme_normal" href="https://disk.yandex.ru/"><span class="service__icon service__icon_color_56 service-icon__disk service-icon__disk_color_56" style="background: url(https://yastatic.net/q/connect/portal-header-icons/disk.svg); background-size: contain; background-position: center; background-repeat: no-repeat;"></span><span class="service__name">Диск</span></a></div></li><li class="services-table__item"><div class="service"><a class="service__url link link_theme_normal" href="https://connect.yandex.ru/portal/staff"><span class="service__icon service__icon_color_56 service-icon__staff service-icon__staff_color_56" style="background: url(https://yastatic.net/q/connect/portal-header-icons/staff.svg); background-size: contain; background-position: center; background-repeat: no-repeat;"></span><span class="service__name">Люди</span></a></div></li><li class="services-table__item"><div class="service"><a class="service__url link link_theme_normal" href="https://wiki.yandex.ru/"><span class="service__icon service__icon_color_56 service-icon__wiki service-icon__wiki_color_56" style="background: url(https://yastatic.net/q/connect/portal-header-icons/wiki.svg); background-size: contain; background-position: center; background-repeat: no-repeat;"></span><span class="service__name">Вики</span></a></div></li><li class="services-table__item"><div class="service"><a class="service__url link link_theme_normal" href="https://forms.yandex.ru/admin/"><span class="service__icon service__icon_color_56 service-icon__forms service-icon__forms_color_56" style="background: url(https://yastatic.net/q/connect/portal-header-icons/forms.svg); background-size: contain; background-position: center; background-repeat: no-repeat;"></span><span class="service__name">Формы</span></a></div></li><li class="services-table__item"><div class="service"><a class="service__url link link_theme_normal" href="https://calendar.yandex.ru/"><span class="service__icon service__icon_color_56 service-icon__calendar service-icon__calendar_color_56" style="background: url(https://yastatic.net/q/connect/portal-header-icons/calendar.svg); background-size: contain; background-position: center; background-repeat: no-repeat;"></span><span class="service__name">Календарь</span></a></div></li></ul></div></div><div class="header2__logo"><span class="logo logo_name_ys-ru-69x28 i-bem logo_js_inited"></span></div><a class="link link_theme_normal i-bem" data-bem="{&quot;link&quot;:{}}" tabindex="0" href="https://wiki.yandex.ru/"><img class="image header2__service-logo" src="./Styleguide @ Wiki_files/Вики.svg" alt=""></a><div class="header2__left"><div class="header2__menu-item w-getting-started__elem w-getting-started__elem_user-cluster_1"><a class="link link_theme_normal i-bem" data-bem="{&quot;link&quot;:{}}" tabindex="0" href="https://wiki.yandex.ru/~">Моя страница</a></div><div class="header2__menu-item b-favs w-getting-started__elem w-getting-started__elem_favorites_2 i-bem" data-bem="{&quot;b-favs&quot;:{}}"><a class="link link_theme_normal i-bem" data-bem="{&quot;link&quot;:{}}" tabindex="0" href="https://wiki.yandex.ru/shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide/?from=%252Fshad%252FAlgorithmsStyleguide%252F">Закладки</a></div><div class="header2__menu-item"><a class="link link_theme_normal i-bem" data-bem="{&quot;link&quot;:{}}" tabindex="0" href="https://wiki.yandex.ru/~/notes/">Заметки</a></div><div class="header2__menu-item"><a class="link link_theme_normal i-bem link_js_inited" data-bem="{&quot;link&quot;:{}}" tabindex="0" href="https://yandex.ru/support/connect/wiki/">Помощь</a></div></div><div class="header2__right"><button class="button2 button2_size_m button2_theme_action button2_type_new-page button2_view_classic i-bem button2_js_inited" data-bem="{&quot;button2&quot;:{}}" type="button" autocomplete="off" tabindex="0"><span class="icon icon_type_plus icon_direction_bottom icon_size_s button2__icon button2__icon_side_left"></span><span class="button2__text">Создать</span></button><form class="search2" role="search" action="https://connect.yandex.ru/search/wiki"><div class="search2__input"><div class="m-suggest m-suggest_b2b-header_yes m-suggest_type_b2b m-suggest_size_s i-bem m-suggest_js_inited" data-bem="{&quot;m-suggest&quot;:{&quot;headName&quot;:&quot;b-head&quot;,&quot;layers&quot;:&quot;people,departments,groups&quot;,&quot;addRequestParams&quot;:{&quot;people.order&quot;:1,&quot;departments.order&quot;:2,&quot;groups.order&quot;:3,&quot;org_id&quot;:&quot;3668647&quot;},&quot;types&quot;:[&quot;staff&quot;],&quot;inHeader&quot;:true,&quot;url&quot;:&quot;https://connect.yandex.ru/suggest/&quot;}}"><span class="input input_size_ws-head input_pin_round-clear input_has-clear_yes input_theme_websearch input_role_search i-bem input_js_inited" data-bem="{&quot;input&quot;:{&quot;live&quot;:false}}"><label class="input__hint input__hint_visibility_visible" id="hintuniq158763679485812285" for="uniq158763679485812285" aria-hidden="true">Поиск</label><button class="button2 button2_type_check button2_size_head button2_theme_clear button2_view_classic input__filter b-head__search-button i-bem" data-bem="{&quot;button2&quot;:{}}" type="button" autocomplete="off" tabindex="-1" aria-pressed="false"><span class="icon icon_size_head icon_type_search button2__icon"></span></button><span class="input__box"><span class="input__clear" unselectable="on">&nbsp;</span><input class="input__control" id="uniq158763679485812285" name="text" placeholder="Поиск" aria-labelledby="labeluniq158763679485812285 hintuniq158763679485812285" autocomplete="off"></span></span></div></div><div class="search2__button"></div></form><a class="link link_theme_islands link_size_m link_type_settings i-bem" data-bem="{&quot;link&quot;:{}}" tabindex="0" href="https://wiki.yandex.ru/_settings"><span class="icon icon_type_settings"></span></a><div class="user2 user2_fetch-accounts_yes user2_fetch-unread_yes user2_with-organizations_yes user2_fetch-organizations_yes i-bem" data-bem="{&quot;user2&quot;:{&quot;accountsUrl&quot;:&quot;https://api.passport.yandex.ru/all_accounts&quot;,&quot;organizationsUrl&quot;:&quot;https://api.directory.yandex.ru/v6/organizations-by-session/&quot;,&quot;contextSwitchUrl&quot;:&quot;https://connect.yandex.ru/portal/context?mode=portal&amp;origin=user2&amp;retpath=https%3A%2F%2Fwiki.yandex.ru%2Fshad%2Fgroups%2F2019%2FSemester1%2FAlgorithms1%2FAlgorithmsStyleguide%2F&amp;sk=y323216ff3e308ccefde215a2a8bc4e0b&quot;,&quot;_uid&quot;:&quot;21359538&quot;,&quot;_retpath&quot;:&quot;https://wiki.yandex.ru/shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide/&quot;,&quot;_yu&quot;:&quot;5674387151582622982&quot;,&quot;_passportHost&quot;:&quot;https://passport.yandex.ru&quot;,&quot;_avatarHost&quot;:&quot;https://avatars.mds.yandex.net&quot;}}"><a class="user-account user-account_has-ticker_yes user-account_has-accent-letter_yes user-account_hide-name_yes user2__current-account i-bem" data-bem="{&quot;user-account&quot;:{}}" tabindex="0" href="https://passport.yandex.ru/"><div class="user-pic user-account__pic"><img class="user-pic__image" src="./Styleguide @ Wiki_files/islands-middle" srcset="https://avatars.mds.yandex.net/get-yapic/21493/enc-9d4b777cc48254e59350250ed08c21a4d4244a9ff2dd625fc99e2cbf3aa36589/islands-middle 1x, https://avatars.mds.yandex.net/get-yapic/21493/enc-9d4b777cc48254e59350250ed08c21a4d4244a9ff2dd625fc99e2cbf3aa36589/islands-retina-middle 2x"></div><span class="user-account__name">evg3307</span><span class="ticker ticker_state_empty user-account__ticker i-bem ticker_js_inited" data-bem="{&quot;ticker&quot;:{&quot;count&quot;:0,&quot;maxCount&quot;:99}}" role="alert" aria-live="assertive" aria-atomic="true"><span class="ticker__count ticker__plain"><span class="ticker__text a11y-hidden">Уведомлений</span><span class="ticker__value" title="0">0</span></span></span></a><a class="link link_theme_pseudo user2__a11y-exit a11y-hidden i-bem" data-bem="{&quot;link&quot;:{}}" accesskey="x" tabindex="-1" href="https://passport.yandex.ru/passport?mode=embeddedauth&amp;action=logout&amp;yu=5674387151582622982&amp;uid=21359538&amp;retpath=https%3A%2F%2Fwiki.yandex.ru%2Fshad%2Fgroups%2F2019%2FSemester1%2FAlgorithms1%2FAlgorithmsStyleguide%2F">Выйти</a><div class="light-popup light-popup_autoclosable_yes light-popup_animated_yes user2__popup i-bem light-popup_js_inited" data-bem="{&quot;light-popup&quot;:{&quot;moved&quot;:true}}"><ul class="menu menu_type_navigation menu_view_classic user2__menu i-bem" data-bem="{&quot;menu&quot;:{}}"><div class="user2__menu-header"><div class="user-account user-account_has-subname_yes user2__account i-bem" data-bem="{&quot;user-account&quot;:{}}" tabindex="0"><div class="user-pic user-account__pic"><img class="user-pic__image" src="./Styleguide @ Wiki_files/islands-middle" srcset="https://avatars.mds.yandex.net/get-yapic/21493/enc-9d4b777cc48254e59350250ed08c21a4d4244a9ff2dd625fc99e2cbf3aa36589/islands-middle 1x, https://avatars.mds.yandex.net/get-yapic/21493/enc-9d4b777cc48254e59350250ed08c21a4d4244a9ff2dd625fc99e2cbf3aa36589/islands-retina-middle 2x"></div><span class="user-account__name">evg3307</span></div></div><div class="user2__organizations user2__organizations_collapsed_yes"><div class="spin2 spin2_size_xs spin2_view_default spin2_tone_default user2__accounts-spin"></div><a class="user-organization user-organization_template_yes i-bem" data-bem="{&quot;user-organization&quot;:{}}" tabindex="0" href="https://connect.yandex.ru/portal/context?mode=portal&amp;origin=user2&amp;retpath=https%3A%2F%2Fwiki.yandex.ru%2Fshad%2Fgroups%2F2019%2FSemester1%2FAlgorithms1%2FAlgorithmsStyleguide%2F&amp;sk=y323216ff3e308ccefde215a2a8bc4e0b"><div class="user-organization__pic"><img class="user-organization__image" src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;43&#39; height=&#39;31&#39; viewBox=&#39;0 0 43 31&#39; fill=&#39;none&#39;%3E%3Cpath fill=&#39;%23DADADA&#39; d=&#39;M6.25.6h30v20h-30z&#39;/%3E%3Cpath fill=&#39;%23979797&#39; fill-rule=&#39;evenodd&#39; d=&#39;M6.25 20.6h30v5H0l6.25-5z&#39; clip-rule=&#39;evenodd&#39;/%3E%3Cpath fill=&#39;%23C6C6C6&#39; d=&#39;M13.75 10.6h22.5v15h-22.5z&#39;/%3E%3Cpath fill=&#39;%23979797&#39; fill-rule=&#39;evenodd&#39; d=&#39;M13.75 25.6h22.5l6.25 5H13.75v-5z&#39; clip-rule=&#39;evenodd&#39;/%3E%3C/svg%3E%0A"></div><span class="user-organization__name"></span></a><div class="user2__organizations-cropper"></div><a class="user2__add-organization menu__item" href="https://connect.yandex.ru/portal/registration?action=add&amp;source=&amp;preset=&amp;retpath=https%3A%2F%2Fwiki.yandex.ru%2Fshad%2Fgroups%2F2019%2FSemester1%2FAlgorithms1%2FAlgorithmsStyleguide%2F"><span class="user2__add-org-pic"></span><span class="user2__add-org-name">Добавить организацию</span></a><span class="icon icon_glyph_type-arrow icon_size_s icon_has-glyph_yes user2__expand-organizations-icon"><svg width="0" height="0" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 13 8"><path d="M11.3 1L6.5 5.7 1.7 1l-.7.7L6.5 7 12 1.7l-.7-.7z"></path></svg></span></div><ul class="menu__group" role="group"><li class="menu__list-item"><a class="menu__item menu__item_type_link user2__menu-item user2__menu-item_action_mail" data-bem="{&quot;menu__item&quot;:{}}" role="link" href="https://mail.yandex.ru/" tabindex="0"><span class="menu__text">Почта<span class="user2__menu-counter user2__menu-counter_state_empty" role="alert">0</span></span></a></li><li class="menu__list-item"><a class="menu__item menu__item_type_link user2__menu-item user2__menu-item_action_passport" data-bem="{&quot;menu__item&quot;:{}}" role="link" href="https://passport.yandex.ru/" tabindex="0"><span class="menu__text">Управление аккаунтом</span></a></li><li class="menu__list-item"><a class="menu__item menu__item_type_link user2__menu-item user2__menu-item_action_exit" data-bem="{&quot;menu__item&quot;:{}}" role="link" href="https://passport.yandex.ru/passport?mode=embeddedauth&amp;action=logout&amp;yu=5674387151582622982&amp;uid=21359538&amp;retpath=https%3A%2F%2Fwiki.yandex.ru%2Fshad%2Fgroups%2F2019%2FSemester1%2FAlgorithms1%2FAlgorithmsStyleguide%2F" tabindex="0"><span class="menu__text">Выйти</span></a></li></ul><div class="user2__multi-auth"><div class="user2__accounts"><div class="spin2 spin2_size_xs spin2_view_default spin2_tone_default user2__accounts-spin"></div><div class="user2__accounts-container"><li class="menu__list-item"><div class="menu__item" data-bem="{&quot;menu__item&quot;:{}}"><div class="user-account user-account_template_yes user2__account i-bem" data-bem="{&quot;user-account&quot;:{}}" tabindex="0"><div class="user-pic user-account__pic"><img class="user-pic__image"></div><span class="user-account__name"><span class="user-account__name-text"></span><span class="user-account__subname"></span></span></div></div></li></div><li class="menu__list-item"><div class="menu__item" data-bem="{&quot;menu__item&quot;:{}}"><a class="user-account user2__add-account i-bem" data-bem="{&quot;user-account&quot;:{}}" tabindex="0" href="https://passport.yandex.ru/auth?mode=add-user&amp;retpath=https%3A%2F%2Fwiki.yandex.ru%2Fshad%2Fgroups%2F2019%2FSemester1%2FAlgorithms1%2FAlgorithmsStyleguide%2F"><div class="user-account__pic"></div><span class="user-account__name">Добавить аккаунт</span></a></div></li></div></div><div class="user2__menu-footer"><a class="button2 button2_theme_clear button2_size_s button2_type_link button2_view_classic user2__footer-link i-bem" data-bem="{&quot;button2&quot;:{}}" tabindex="0" href="https://yandex.ru/tune"><span class="button2__text">Настройки</span></a><a class="button2 button2_theme_clear button2_size_s button2_type_link button2_view_classic user2__footer-link i-bem" data-bem="{&quot;button2&quot;:{}}" tabindex="0" href="https://yandex.ru/support/"><span class="button2__text">Помощь</span></a></div></ul></div></div></div></div></div></div><link rel="stylesheet" href="./Styleguide @ Wiki_files/_common.desktop.business.post.css"><link rel="stylesheet" href="./Styleguide @ Wiki_files/desktop.css"><div class="i-metrica i-bem i-metrica_js_inited" data-bem="{&quot;i-metrica&quot;:{&quot;visitParams&quot;:{&quot;id&quot;:&quot;3668647&quot;},&quot;userParams&quot;:{&quot;org_id&quot;:&quot;3668647&quot;,&quot;uid&quot;:&quot;21359538&quot;}}}"></div><script nonce="">window.__formatterDefaults = {"lang":"ru","platform":"desktop","instance":"business","schi_url":"https:\u002F\u002Fwf-biz.tools.yandex.ru","magiclinks_url":"https:\u002F\u002Fmagiclinks.yandex.ru\u002Fmagiclinks\u002Fv1\u002Flinks\u002F","tracker_url":"https:\u002F\u002Ftracker.yandex.ru\u002F","staff_url":"https:\u002F\u002Fstaff.yandex.ru\u002F","forms_url":"https:\u002F\u002Fconnect.yandex.ru","wiki_url":"https:\u002F\u002Fwiki.yandex.ru","wiki_api_url":"wiki-api.yandex.ru","docviewer_url":"https:\u002F\u002Fdocviewer.yandex.ru\u002F","at_url":"https:\u002F\u002Fclubs.at.yandex-team.ru","charts_url":"https:\u002F\u002Fcharts-beta.yandex-team.ru","statface_url":"https:\u002F\u002Fstat-beta.yandex-team.ru","yastatic_url":"https:\u002F\u002Fyastatic.net","useAJAX":false,"renderActionsByClick":false,"hideTroubles":false,"fallback":function defaultFallback(text) {
    return '<div class="wiki-p">' + htmlescape(text).replace(/\n/g, '<br>') + '</div>';
},"code_theme":"github","page_path":"\u002Fshad\u002Fgroups\u002F2019\u002Fsemester1\u002Falgorithms1\u002Falgorithmsstyleguide","remark":{"markdown":{"commonmark":true,"footnotes":true,"position":true},"woofmd":{"actions":[{"name":"a","scope":"inline"},{"name":"anchor","scope":"inline"},{"name":"forms","scope":"inline"},{"name":"iframe","scope":"block"},{"name":"grid","scope":"block"},{"name":"tree","scope":"block"},{"name":"toc","scope":"block"},{"name":"mypages","scope":"block"},{"name":"mywatches","scope":"block"},{"name":"backlinks","scope":"block"},{"name":"tasks","scope":"block"}]}},"extensions":{"wiki-head":function (ctx) {
    if (!ctx.block) {
        return ctx;
    }

    var block = ctx.block.replace('wiki', 'wf');
    var params = {};
    params[block] = {};

    return Object.assign({}, ctx, {
        mix: Object.assign({}, ctx.mix, { block: block, mods: ctx.mods }),
        attrs: { 'data-bem': JSON.stringify(params) }
    });
},"wiki-doc":function (ctx) {
    if (!ctx.block) {
        return ctx;
    }

    var block = ctx.block.replace('wiki', 'wf');
    var params = {};
    params[block] = {};

    return Object.assign({}, ctx, {
        mix: Object.assign({}, ctx.mix, { block: block, mods: ctx.mods }),
        attrs: { 'data-bem': JSON.stringify(params) }
    });
}},"bemjsonStarHandler":(bemjson, settings, node) => {
    // https://st.yandex-team.ru/WIKI-11858 это уедет в форматтер
    if (settings && settings.noActions && bemjson.block === 'wiki-action') {
        return node.position && node.position.start && node.position.end ?
            settings.input.slice(node.position.start.offset, node.position.end.offset) : '';
    }

    if (bemjson.block === 'wiki-action' && bemjson.name === 'grid') {
        return {
            block: 'wf-grid',
            js: true,
            attrs: {
                'data-bem': JSON.stringify({
                    'wf-grid': {
                        data: bemjson.params,
                        readonly: settings.renderActionsByClick
                    }
                })
            }
        };
    }

    if (bemjson.block === 'wiki-formatter' && bemjson.lang === 'form') {
        bemjson.mix = [{
            block: 'wf-form',
            js: true
        }];
        bemjson.attrs = {
            'data-bem': JSON.stringify({
                'wf-form': {
                    start: node.position.start.offset,
                    end: node.position.end.offset
                }
            })
        };
    }

    return bemjson;
},"translations":{"wiki-action-include":{"error_403":function (p) { return 'У вас нет доступа к ' + (p && p.content || '?') + '.' },"error_404":function (p) { return 'Страница ' + (p && p.content || '?') + ' не существует.' },"cycle":"Обнаружена циклическая зависимость","page":"Страница","grid":"Страница-грид вставляется на страницу посредством экшена {{grid}}"},"wiki-formatter":{"error":function (p) { return 'Ошибка отрисовки ' + (p && p.formatter || '?') + '.' }},"wiki-action-serviceteam":{"contacts":"Контакты сервиса","roles":"Команда сервиса","serviceteam":"Команда сервиса"},"wiki-action-backlinks":{"backlinks":"Страницы, ссылающиеся на данную","backlinks_for":function (p) { return 'Страницы, ссылающиеся на ' + (p && p.content || '?') }},"wiki-action-mywatches":{"unwatch":"Отписаться от изменений"},"wiki-action-mypages":{"user_pages":"Страницы пользователя","ordered":"упорядоченные"},"wiki-action-tasks":{"no-tasks":"Тикеты по данному запросу не найдены."},"wiki-action":{"error":"Ошибка при получении экшена","not_implemented":function (p) { return 'Экшн ' + (p && p.action || '') + ' еще не реализован.' },"error_args_not_found":function (p) { return 'Не удалось загрузить экшн ' + (p && p.action || '') + '. Не переданы следующие параметры: ' + (p && p.args || '') + '.' },"error_unauthorized":function (p) { return 'Не удалось загрузить экшн ' + (p && p.action || '') + '. Ошибка авторизации.' },"load":"Загрузить","action":"Экшн","error_any":function (p) { return 'Ошибка при получении ' + (p && p.content || '?') }},"wiki-widget-action":{"error":"Ошибка при получении экшена"},"wiki-action-tree":{"cluster_tree":"Структура раздела","expand_all":"Показать все подстраницы","full_loaded":"Все подстраницы загружены","not_full_loaded":"Не все подстраницы загружены"},"wiki-action-tree-page":{"created":"создано","modified":"отредактировано"},"wiki-action-feed":{"today":"сегодня"},"wiki-head":{"edit":"правка"},"wiki-toc":{"contents":"Оглавление документа"},"wiki-ref":{"external_link":"Внешняя ссылка (откроется в новом окне)"},"wiki-cut":{"more":"Подробнее"}}}</script><div class="wi-store i-bem wi-store_js_inited" data-bem="{&quot;wi-store&quot;:{&quot;model&quot;:&quot;session&quot;,&quot;id&quot;:&quot;session&quot;,&quot;data&quot;:{}}}" style="display: none"></div><div class="wi-store i-bem wi-store_js_inited" data-bem="{&quot;wi-store&quot;:{&quot;model&quot;:&quot;application&quot;,&quot;id&quot;:&quot;app&quot;,&quot;data&quot;:{&quot;action&quot;:&quot;view&quot;,&quot;view&quot;:&quot;view&quot;,&quot;sidebar&quot;:&quot;closed&quot;,&quot;contentLoaded&quot;:true}}}" style="display: none"></div><div class="w-getting-started i-bem w-getting-started_js_inited" data-bem="{&quot;w-getting-started&quot;:{&quot;supertag&quot;:&quot;shad/groups/2019/semester1/algorithms1/algorithmsstyleguide&quot;}}"></div><div class="b-page__content"><script nonce="" defer="">!function(i,t){if(i.Ya=i.Ya||{},Ya.Rum)throw new Error("Rum: interface is already defined");var n=i.performance,e=n&&n.timing&&n.timing.navigationStart||Ya.startPageLoad||+new Date,s=i.requestAnimationFrame;Ya.Rum={enabled:!!n,vsStart:document.visibilityState,vsChanged:!1,_defTimes:[],_defRes:[],_deltaMarks:{},_settings:{},_vars:{},init:function(i,t){this._settings=i,this._vars=t},getTime:n&&n.now?function(){return n.now()}:Date.now?function(){return Date.now()-e}:function(){return new Date-e},time:function(i){this._deltaMarks[i]=[this.getTime()]},timeEnd:function(i){var t=this._deltaMarks[i];t&&0!==t.length&&t.push(this.getTime())},sendTimeMark:function(i,t,n,e){void 0===t&&(t=this.getTime()),this._defTimes.push([i,t,e]),this.mark(i,t)},sendResTiming:function(i,t){this._defRes.push([i,t])},sendRaf:function(i){if(s&&!this.isVisibilityChanged()){var t=this,n="2616."+i;s(function(){t.isVisibilityChanged()||(t.sendTimeMark(n+".205"),s(function(){t.isVisibilityChanged()||t.sendTimeMark(n+".1928")}))})}},isVisibilityChanged:function(){return this.vsStart&&("visible"!==this.vsStart||this.vsChanged)},mark:n&&n.mark?function(i,t){n.mark(i+(t?": "+t:""))}:function(){}},document.addEventListener&&document.addEventListener("visibilitychange",function i(){Ya.Rum.vsChanged=!0,document.removeEventListener("visibilitychange",i)})}(window);

!function(){"use strict";if(window.PerformanceLongTaskTiming){var e=Ya.Rum._tti={events:[],observer:new PerformanceObserver(function(n){e.events=e.events.concat(n.getEntries()),e.events.length>100&&e.events.shift()})};e.observer.observe({entryTypes:["longtask"]})}}();

!function(){"use strict";Ya.Rum.observeDOMNode=window.IntersectionObserver?function(e,i,n){var t=this;!function s(){if(!t.isVisibilityChanged()){var o="string"==typeof i?document.querySelector(i):i;o?new IntersectionObserver(function(i,n){t.isVisibilityChanged()||(Ya.Rum.sendTimeMark(e),n.unobserve(o))},n).observe(o):setTimeout(s,100)}}()}:function(){}}();
</script><script nonce="" defer="">
                        Ya.Rum.init({"beacon":true,"clck":"https://yandex.ru/clck/click","slots":[],"reqid":"a8473df44eaabcb00948d94c9f33eb27","crossOrigin":""}, {"143":"28.2502.3298.2048.136.","287":"213"}); 
                        Ya.Rum.observeDOMNode('2876', '.w-content > .wiki-doc');</script><script nonce="">!function(n){if(!n.Ya||!Ya.Rum)throw new Error("Rum: interface is not defined");var t=Ya.Rum;t.getSetting=function(n){var e=t._settings[n];return null===e?null:e||""}}(window);

!function(e){var r={client:["690.2354",-1,100,0],uncaught:["690.2361",100,10,0],external:["690.2854",100,10,0],script:["690.2609",100,10,0]};function n(e,r){for(var n in r)r.hasOwnProperty(n)&&(e[n]=r[n]);return e}e.ERROR_LEVEL={INFO:"info",DEBUG:"debug",WARN:"warn",ERROR:"error",FATAL:"fatal"},e._errorSettings={clck:"https://yandex.ru/clck/click",beacon:!0,project:"unknown",page:"",env:"",experiments:[],additional:{},platform:"",region:"",level:"",version:"",preventError:!1,unhandledRejection:!1,debug:!1,limits:{},silent:{},filters:{}},e.initErrors=function(r){n(e._errorSettings,r)},e.updateErrors=e.initErrors,e._handleError=function(t,o){var i,a,s=e._errorSettings;s.preventError&&t.preventDefault&&t.preventDefault(),o?(i=t,a="client"):a=(i=e._normalizeError(t,s)).type;var l=r[a][1];"number"==typeof s.limits[a]&&(l=s.limits[a]);var c=r[a][2];"number"==typeof s.silent[a]&&(c=s.silent[a]);var u=r[a][3];if(u<l||-1===l){i.path=r[a][0];var d="";try{var m=n({},s.additional);d=JSON.stringify(n(m,t.additional))}catch(e){s.debug&&window.console&&console.error("[error-counter] json.stringify:",e)}e._sendError(i,{additional:d,silent:u<c||-1===c?"no":"yes",isCustom:Boolean(o)}),r[a][3]++}},e._normalizeError=function(r){var n,t=r.filename||r.fileName||"",o=r.error&&r.error.stack||r.stack||"",i="uncaught",a="",s="";return/^Script error\.?$/.test(r.message)?i="script":(n=e._isExternalError(t,r.message,o)).hasExternal&&(i="external",a=n.common,s=n.custom),{file:t,line:r.lineno||r.lineNumber,col:r.colno||r.colNumber,stack:o,message:r.message,external:a,externalCustom:s,type:i}},e._sendError=function(r,n){var t=e._errorSettings,o=t.experiments.length?t.experiments.join(";"):"",i={"-url":r.file,"-line":r.line,"-col":r.col,"-stack":r.stack,"-env":t.env,"-msg":r.message,"-external":r.external,"-externalCustom":r.externalCustom,"-project":t.project,"-service":r.service,"-page":r.page||t.page,"-platform":t.platform,"-level":r.level,"-experiments":o,"-version":t.version,"-region":t.region,"-source":r.source,"-type":n.isCustom?r.type:"","-block":r.block,"-additional":n.additional,"-adb":window.Ya&&Ya.blocker||t.blocker||"","-ua":navigator.userAgent,"-silent":n.silent,"-ts":+new Date},a=function(e){var r=[];for(var n in e)e.hasOwnProperty(n)&&(e[n]||0===e[n])&&r.push(n+"="+encodeURIComponent(e[n]));return r.join(",")}(i);t.debug&&window.console&&console.error("[error-counter]",i),e.send(null,r.path,a,null,null,null,null)};var t=function(e){Ya.Rum._handleError(e,!1)};window.addEventListener?(window.addEventListener("error",t),"Promise"in window&&e._errorSettings.unhandledRejection&&window.addEventListener("unhandledrejection",function(e){var r=e.reason;if(r)if(r.stack&&r.message)t({message:"Unhandled rejection: "+r.message,stack:r.stack});else{var n=String(r);if("[object Event]"===n)n="event.type: "+r.type;else if("[object Object]"===n)try{n=JSON.stringify(r)}catch(e){n="unknown object"}t({message:"Unhandled rejection: "+n})}})):window.onerror=function(e,r,n,o,i){t({error:i||new Error(e||"Empty error"),message:e,lineno:n,colno:o,filename:r})}}(Ya.Rum);

!function(e){var r={url:{0:/(miscellaneous|extension)_bindings/,1:/^chrome:/,2:/kaspersky-labs\.com\//,3:/^(?:moz|chrome)-extension:\/\//,4:/^file:/,5:/^resource:\/\//,6:/webnetc\.top/,7:/local\.adguard\.com/},message:{0:/__adgRemoveDirect/,1:/Content Security Policy/,2:/vid_mate_check/,3:/ucapi/,4:/Access is denied/i,5:/^Uncaught SecurityError/i,6:/__ybro/,7:/__show__deepen/,8:/ntp is not defined/,9:/Cannot set property 'install' of undefined/,10:/NS_ERROR/,11:/Error loading script/,12:/TypeError: undefined is not a function/},stack:{0:/(?:moz|chrome)-extension:\/\//}};function n(e,r){if(e&&r){var n=[];for(var t in r)r.hasOwnProperty(t)&&r[t].test(e)&&n.push(t);return n.length?n.join("_"):""}}function t(e,t){var o,i=[];for(var s in r)r.hasOwnProperty(s)&&(o=n(e[s],t[s]))&&i.push(s+"~"+o);return i.length?i.join(";"):""}e._isExternalError=function(n,o,i){var s=e._errorSettings.filters,a={url:String(n||""),message:String(o||""),stack:String(i||"")};s=s||{};var c=t(a,r),u=t(a,s);return{common:c,custom:u,hasExternal:c||u}}}(Ya.Rum);

!function(){"use strict";var e;(e=Ya.Rum).logError=function(r,a){var s=(r=r||{}).message||"";(a=a||{}).message&&(s&&(s+="; "),s+=a.message),a.message=s;for(var o=["service","source","type","block","additional","level","page"],g=0;g<o.length;g++){var l=o[g];r[l]&&(a[l]=r[l])}e._handleError(a,!0)}}();

!function(){"use strict";var t;(t=Ya.Rum).logAjaxError=function(a,o,r,i){var n;a.sourceType="network",a.additional=a.additional||{},"timeout"===r?a.additional.timeout=1:o.status&&(a.additional.status=o.status),i instanceof Error?n=i:(n=new Error).message=i,t.logError(a,n)}}();
</script><script nonce="">Ya.Rum.initErrors({"reqid":"a8473df44eaabcb00948d94c9f33eb27","project":"wiki","env":"production","platform":"desktop"})</script><script src="./Styleguide @ Wiki_files/send.min.js" defer=""></script><script src="./Styleguide @ Wiki_files/implementation.min.js" defer=""></script><script src="./Styleguide @ Wiki_files/bem.min.js" defer=""></script><div class="wi-store i-bem wi-store_js_inited" data-bem="{&quot;wi-store&quot;:{&quot;model&quot;:&quot;page&quot;,&quot;id&quot;:&quot;page&quot;,&quot;data&quot;:{&quot;type&quot;:&quot;article&quot;,&quot;tag&quot;:&quot;shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide&quot;,&quot;superTag&quot;:&quot;shad/groups/2019/semester1/algorithms1/algorithmsstyleguide&quot;,&quot;url&quot;:&quot;/shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide&quot;,&quot;version&quot;:21169886,&quot;userSubscription&quot;:&quot;none&quot;,&quot;translation&quot;:&quot;&quot;,&quot;redirect&quot;:false,&quot;redirectedFrom&quot;:&quot;/shad/AlgorithmsStyleguide/&quot;,&quot;title&quot;:&quot;Styleguide&quot;,&quot;comments&quot;:true,&quot;authors&quot;:[{&quot;uid&quot;:24939579,&quot;login&quot;:&quot;alisso&quot;,&quot;first_name&quot;:&quot;Alisa&quot;,&quot;last_name&quot;:&quot;Smirnova&quot;,&quot;display&quot;:&quot;Alisa Smirnova&quot;,&quot;email&quot;:&quot;alisso@yandex.ru&quot;,&quot;is_admin&quot;:false,&quot;is_external_employee&quot;:false,&quot;is_dismissed&quot;:false}],&quot;currentUser&quot;:{&quot;uid&quot;:21359538,&quot;login&quot;:&quot;evg3307&quot;,&quot;first_name&quot;:&quot;Евгения&quot;,&quot;last_name&quot;:&quot;Елистратова&quot;,&quot;display&quot;:&quot;Евгения Елистратова&quot;,&quot;email&quot;:&quot;evg3307@yandex.ru&quot;,&quot;is_admin&quot;:false,&quot;is_external_employee&quot;:false,&quot;is_dismissed&quot;:false,&quot;settings&quot;:{&quot;language&quot;:&quot;ru&quot;,&quot;code_theme&quot;:&quot;github&quot;,&quot;use_new_wf&quot;:false,&quot;use_nodejs_frontend&quot;:true,&quot;use_full_width_content&quot;:false,&quot;propose_content_translation&quot;:false},&quot;avatar&quot;:&quot;21493/enc-9d4b777cc48254e59350250ed08c21a4d4244a9ff2dd625fc99e2cbf3aa36589&quot;},&quot;withNewWf&quot;:true,&quot;isOfficial&quot;:false,&quot;isOld&quot;:false,&quot;modifiedAt&quot;:&quot;2020-02-01T14:49:36&quot;,&quot;access&quot;:{&quot;type&quot;:&quot;inherited&quot;,&quot;parent_access&quot;:&quot;restricted&quot;},&quot;isFav&quot;:false,&quot;isReadonly&quot;:false,&quot;raw&quot;:&quot;{{TOC}}\n\n===Основные правила===\n\nПрежде, чем писать какой-либо код, обязательно прочитайте C~++ Style Guide, на нашем курсе мы требуем полного выполнения ((http://google.github.io/styleguide/cppguide.html Google C++ Style Guide))\n\n&lt;{Какие пункты из Google C~++ Style Guide наиболее важны:\n  * Scoping\n    * ((http://google.github.io/styleguide/cppguide.html#Local_Variables Local Variables))\n    * ((http://google.github.io/styleguide/cppguide.html#Static_and_Global_Variables Static and Global Variables))\n  * Classes\n    * ((http://google.github.io/styleguide/cppguide.html#Doing_Work_in_Constructors Doing Work in Constructors))\n    * ((http://google.github.io/styleguide/cppguide.html#Implicit_Conversions Implicit Conversions))\n    * ((http://google.github.io/styleguide/cppguide.html#Structs_vs._Classes Structs vs. Classes))\n    * ((http://google.github.io/styleguide/cppguide.html#Access_Control Access Control))\n    * ((http://google.github.io/styleguide/cppguide.html#Declaration_Order Declaration Order))\n  * Functions\n    * ((http://google.github.io/styleguide/cppguide.html#Function_Parameter_Ordering Parameter Ordering))\n    * ((http://google.github.io/styleguide/cppguide.html#Write_Short_Functions Write Short Functions))\n    * ((http://google.github.io/styleguide/cppguide.html#Reference_Arguments Reference Arguments)) (с оговоркой про выходные параметры примитивных типов в ((https://wiki.school.yandex.ru/shad/groups/2016/Semester1/Algorithms1/Styleguide/#jazykc п. 14)))\n  * Other C++ Features\n    * ((http://google.github.io/styleguide/cppguide.html#Casting Casting))\n    * ((http://google.github.io/styleguide/cppguide.html#Preincrement_and_Predecrement Preincrement and Predecrement))\n    * ((http://google.github.io/styleguide/cppguide.html#Use_of_const Use of const))\n    * ((http://google.github.io/styleguide/cppguide.html#Use_of_constexpr Use of constexpr))\n    * ((http://google.github.io/styleguide/cppguide.html#Integer_Types Integer Types))\n    * ((http://google.github.io/styleguide/cppguide.html#0_and_nullptr/NULL 0 and nullptr/NULL))\n    * ((http://google.github.io/styleguide/cppguide.html#auto auto))\n    * ((http://google.github.io/styleguide/cppguide.html#Braced_Initializer_List Braced Initializer List))\n    * ((http://google.github.io/styleguide/cppguide.html#Lambda_expressions Lambda Expressions))\n  * ((http://google.github.io/styleguide/cppguide.html#Naming Naming))\n  * ((http://google.github.io/styleguide/cppguide.html#Formatting Formatting))\n}&gt;\n\nВаша задача на этом курсе — написать наиболее простой, понятный, читаемый и гибкий код среди тех, которые проходят ограничения по времени и по памяти. То есть в первую очередь должна быть правильной асимптотическая сложность, а потом сразу же думайте, как все сделать максимально просто. \n\n**Боритесь с дублированием кода**\n__**Это самое большое возможное зло**__. Если в процессе написания вам понадобилось копировать и вставить кусок своего кода в этот же код, то это первый признак того, что происходит дублирование. Постарайтесь детектировать идентичные и похожие места, вынесите общую часть в отдельную функцию или класс и воспользуйтесь ей дважды с разными аргументами.\n\n**Старайтесь писать аккуратно**\nУдаляйте лишний, неиспользуемый, закомментированный код, удаляйте переменные и функции, которые вам на самом деле не нужны, остальные называйте понятно.\n\n====Синтаксис====\nНа код должно быть приятно смотреть, его должно быть легко читать. Вы его пишете один раз, сохраняете, после чего его читают много раз, поэтому выгодно потратить при написании немного времени на приведение кода в порядок, чтобы впоследствии сократить своё и чужое время на чтение.\\\\\nПростые правила ниже служат для улучшения визуального восприятия.\n  * Используйте 4 пробела для отступа. Данный размер отступа является наиболее распространенным, требуется на курсе C++, поэтому используйте его всюду для единообразия. 4 пробела также является оптимальным размером для отступа согласно ((http://homepages.inf.ed.ac.uk/dts/pm/Papers/nasa-c-style.pdf NASA)).\n  * Вокруг всех бинарных операторов (%%=, ==, +, -, *, /, &gt;, &lt;&lt;%% и др.) должны быть пробелы с обеих сторон. Исключением являются операторы %%., -&gt;, ::%%.\n  * После запятой должен быть пробел. \n  * Между закрывающейся круглой скобкой и открывающейся фигурной должен быть пробел.\n  * Не жадничайте с пустыми строками. Вставляйте всегда пустые строки между определениями глобальных функций, классов, констант, typedef&#39;ов, include&#39;ов, между объявлениями методов и функций, между реализациями функций, между объявлениями классов и реализациями функций и т.д.\n  * Вставляйте пустые строки в код реализации функций, чтобы подчеркнуть разделение логических частей кода.\n  * Не размещайте if, else, for, while и др. на одной строке со своим statement:\n%%(c++ nomark)\nif (condition) statement;\nelse statement;\n...\nfor (...) statement;\n%%\n\nЭто, во-первых, ухудшает читаемость кода. Вы можете вообще один из statement&#39;ов не заметить или ошибочно решить, что он относится к if&#39;у:\n%%(c++ nomark)\nif (number % 2 == 0) std::cout &lt;&lt; \&quot;Even\\n\&quot;; even = true;\n%%\nА во-вторых, при отладке debugger&#39;ом невозможно понять, выполнив команду \&quot;Step Over\&quot;, выполнилось или не выполнилось условие (или сколько итераций цикла прошло).\n  * Также рекомендуется всегда обрамлять %%if, else, for, while%% фигурными скобками:\n%%(c++ nomark)\nfor (int index = 0; index &lt; array.size(); ++index) {\n    statement1;\n    statement2;\n    ...\n}\n%%\n%%(c++ nomark)\nfor (auto number : array) {\n    statement1;\n    statement2;\n    ...\n}\n%%\nдаже если внутри только один %%statement%%.\n%%(c++ nomark)\nif (number % 2 == 0) {\n    std::cout &lt;&lt; \&quot;Even\\n\&quot;;\n}\n%%\nЭто более читаемо и безопасно. В варианте без скобок легко ошибиться, например, вот так:\n%%(c++ nomark)\nif (number % 2 == 0)\n    std::cout &lt;&lt; \&quot;Even\\n\&quot;;\n    even = true;\n%%\n\nЛегко подумать, что код %%even = true;%% тоже находится под if&#39;ом.\n\n====Язык C~++ ====\nСуществуют разные языки программирования: C, C~++, Java, Python и великое множество других. Между ними есть очевидные внешние сходства и различия: как написать цикл, как определить оператор, как создать класс. Однако основные их отличия кроются в принятых в них методах решения типовых задач и инструментах: если писать цикл по индексу, то какие должны быть его границы? если определить оператор, каков должен быть тип принимаемых аргументов и возвращаемого значения? если создавать класс, какие переменные-члены стоит в нем определять, какие методы, что следует вынести во внешние функции? На все эти вопросы можно дать разные ответы, и все они будут отчасти верными. Есть и общие рекомендации и конструкции, которые зарекомендовали себя за долгое время использования, как надежные и удобные, а также примеры, как делать не надо. Некоторые из них описаны в этом разделе.\n\n  1. %%using namespace std;%% использовать &lt;{нельзя.\nВключать целый namespace опасно, так как из-за этого может возникнуть конфликт имен. Вследствие чего могут возникнуть нетривиальные ошибки компиляции/линковки, а если не повезет, то переменная из namespace может совпасть по названию с какой-то вашей переменной, про которую вы не помните ее область видимости, что приведет к еще более сложнонаходимым багам, хоть все и скомпилируется, но иногда вы будете использовать переменную, думая, что это ваша переменная, и в ней такое-то значение, а значение будет совсем другим. Если нужно использовать много раз %%std::vector%%, напишите %%using std::vector;%% если %%cout%%, то %%using std::cout;%% и т.д. Кроме того, включая %%namespace%%, вы нарушаете сам принцип использования namespace&#39;ов.}&gt;\n  2. Использовать массивы фиксированной длины %%int[]%%, %%int*%% не рекомендуется - используйте вместо них %%std::vector&lt;int&gt;%%.\n  3. Не используйте C-type строки %%char[]%% и %%char*%% - используйте вместо них %%std::string%%.\n  4. {[Не используйте ввод-вывод в стиле С через функции &lt;{scanf, printf:\nИспользуйте вместо них операторы &gt;&gt; и &lt;&lt; у %%std::cin%% и %%std::cout%% соответственно. Если при этом в задаче большой размер ввода-вывода (от 100000 чисел), то необходимо использовать несколько дополнительных приемов, чтобы ваш ввод-вывод работал достаточно быстро, иначе вы можете получить Time Limit Exceeded. Эти приемы описаны ниже.}&gt;\n\n&lt;{Пример на пункты 1 -- 4:\n%%(c++)\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\nusing std::string;\nusing std::vector;\n\nvector&lt;string&gt; Input() {\n    size_t rows;\n    std::cin &gt;&gt; rows;\n    vector&lt;string&gt; table;\n    table.reserve(rows);\n    for (size_t row = 0; row &lt; rows; ++row) {\n        std::string line;\n        std::cin &gt;&gt; line;\n        table.push_back(line);\n    }\n    return table;\n}\n\nvector&lt;string&gt; Process(vector&lt;string&gt; table) {\n    std::reverse(table.begin(), table.end());\n    return table;\n}\n\nvoid Output(const vector&lt;string&gt;&amp; table) {\n    for (const auto&amp; row : table) {\n        std::cout &lt;&lt; row &lt;&lt; std::endl;\n    }\n}\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    const auto&amp; table = Input();\n    table = Process(table);\n    Output(table);\n    return 0;\n}\n%% }&gt;\n\n!!Важно!! По умолчанию для %%iostream%% включен режим совместимости с %%stdio%%, который позволяет одновременно использовать оба интерфейса для ввода/вывода. В этом режиме производительность %%std::cin%% и %%std::cout%% понижается в несколько раз. &lt;{Подробнее\nПоэтому если размер ввода/вывода имеет порядок от 100000 чисел, вам надо будет отключить этот режим. Делать это надо до совершения каких-либо операций ввода-вывода, желательно первой же строкой в программе:\n%%(c++ nomark)\n#include &lt;iostream&gt;\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    ...\n    return 0;\n}\n%%\nТакже обратите внимание на то, что %%std::cout%% может работать слишком медленно, если вы выводите порядка 100000 чисел или более, и при этом у %%std::cout%% регулярно очищается буфер. Буфер очищается при каждом выводе ##std::endl##, так что в случае большого вывода лучше выводить %%\&quot;\\n\&quot;%% вместо %%std::endl%%. Также буфер ##std::cout## очищается при каждом вводе через ##std::cin## --- это связано с тем, что при пользовательском вводе-выводе через обычный ##std::cin## и ##std::cout## в консоли необходимо перед тем, как запрашивать очередной ввод от пользователя, показать ему последний вывод перед этим, а значит и очистить буфер. Эта проблема для задач с большим выводом решается с помощью вызова ##std::cin.tie(nullptr);## в самом начале программы. Выполнение всех этих рекомендаций приведет к тому, что ввод-вывод при помощи потоков ##std::cin## и ##std::cout## будет работать не медленнее ввода-вывода через ##printf## и ##scanf## на задачах с большим вводом-выводом. Подробнее см. ((http://stackoverflow.com/questions/9274057 здесь)) }&gt; ]}\n  5. Если используется значение типа истина/ложь, то используйте тип ##bool##, а не ##int##.\n  6. {[Не используйте тип ##long##. &lt;{Подробнее\nБолее стандартный тип -- ##int##, к нему у всех уже привыкли глаза, и ##long## с теми же намерениями -- просто смотрится странно. На 32-битных машинах оба типа являются 32-битными и ничем не отличаются, поэтому используйте ##int## вместо ##long##. Если вам нужен 64-битный тип, придется воспользоваться типом ##int64_t##. }&gt; ]}\n  7. При прочих равных, используйте преинкремент ##\&quot;\&quot;++\&quot;\&quot;i##, а не постинкремент ##i\&quot;\&quot;++\&quot;\&quot;##. Это полезная привычка. В случае int&#39;ов это все равно, но если у вас будет в коде сложный итератор, то в процессе постинкремента создается его копия в памяти, что может создать вам неожиданные тормоза и повышенное использование памяти, а догадаться о том, что вся проблема -- в коротком выражении ##it\&quot;\&quot;++\&quot;\&quot;## ~-- будет сложно.\n  8. ##main## должен заканчиваться ##return 0;##, в противном случае на некоторых компиляторах программа может завершиться с ненулевым кодом возврата, что в свою очередь приводит к Run-time error в тестирующей системе.\n  9. {[Вставляйте слово ##const## везде, где только это возможно по смыслу. &lt;{Подробнее\nЕсли какая-то переменная по сути меняться в функции не должна, она должна быть ##const##. Если метод класса не меняет при вызове содержимое класса, он должен быть ##const##-методом. Таким образом вы обезопасите себя от многих глупых ошибок: они отловятся еще на этапе компиляции.\nЕсли у вас из-за того, что вы где-то поставили в правильном месте ##const##, не компилируется код, то ##const## выполнил свою главную задачу. Тогда надо не его убирать, а найти и исправить проблему в другом месте: вы где-то еще забыли поставить ##const## или изменяете переменную, которую не собирались изменять. Надо в этом разобраться, доставить ##const## туда, где он еще нужен, а не удалять там, где он вам \&quot;мешает\&quot;.}&gt;  ]}\n  10. {[Используйте везде в программе индексацию с нуля. &lt;{Подробнее\nЕсли какие-то входные или выходные данные в задаче используют индексацию с единицы, лучше в функции ввода, соответственно вывода, переведите индексацию из одной системы в другую, а везде внутри программы, помимо функций ввода и вывода пользуйтесь индексацией с нуля. Весь язык C~++ так спроектирован, что индексация с нуля гораздо удобнее, а как только вы начинаете использовать индексацию с единицы, становится неудобно, появляются вычитания единицы из переменных по всему коду и т.д. }&gt; ]}\n  11. Задумывайтесь о переполнениях типов. Если у вас есть две переменные типа ##int##, значение каждой равно миллиону, и вы их перемножаете, то тип переполнится (максимальное значение -- 2^^31^^ - 1), и вы получите неправильный результат. Необходимо перед перемножением привести обе переменные к 64-битному типу ##int64_t##. Если у вас есть две ##int## переменные со значением два миллиарда и вы их складываете, -- тоже произойдет переполнение, тоже нужно предварительно приводить к ##int64_t##.\n  12. {[Не вычитайте никогда просто так ничего из ##container.size()##, где ##container## --  какой-нибудь контейнер из STL. &lt;{Подробнее\nНапример, ##vector.size()## возвращает беззнаковый ##size_t## (который обычно просто синоним для ##unsigned long##), и если вы будете из него вычитать, то можете легко получить переполнение. Например, если вектор пустой, а вы вычитаете единицу, чтобы узнать последний элемент, или вектор состоит только из одного элемента, а вы вычитаете 2, чтобы узнать предпоследний элемент, и т.д. Всегда приводите результат вызова ##size()## к int&#39;у, если вам совершенно необходимо вычесть из ##size()##. При этом в самом распространенном случае,\nкогда вам нужно написать цикл ##for##, проходящий по всем элементам, кроме, скажем, последних десяти, надо просто писать не так\n%%(c++ nomark))\n// Wrong! If container.size() &lt; 10, you&#39;ll get an infinite cycle.\nfor (int index = 0; index &lt; container.size() - 10; ++index) {\n    ...\n}\n%%\n\nВ этом цикле, если, к примеру, %%container.size() == 5%%, то вы получаете реально цикл\n%%(c++ nomark)\n// Note that 4294967291 &gt; MAX_INT, so the cycle is infinite\nfor (int index = 0; index &lt; 4294967291; ++index) {\n    ...\n}\n%%\nА пишите лучше всегда так\n%%(c++ nomark)\n// Correct: adding to int\nfor (int index = 0; index + 10 &lt; container.size(); ++index) {\n    ...\n}\n%%\nну или хотя бы так\n%%(c++ nomark)\n// Correct: casted to int\nfor (int index = 0; index &lt; static_cast&lt;int&gt;(container.size()) - 10; ++index) {\n    ...\n}\n%%\nСоответственно, если вам нужно вызвать функцию, в которую вы должны передать индекс первого и последнего элемента вектора, то делайте это так:\n%%(c++ nomark)\nSomeFunction(0, static_cast&lt;int&gt;(container.size()) - 1)\n%%\nПо-хорошему, здесь надо бы еще проверять, что в контейнере что-то есть, но к int&#39;у приводить надо в любом случае, иначе появляются неочевидные баги. }&gt; ]}\n  13. {[Не пользуйтесь макросами для определения констант. &lt;{Подробнее\nМакросы — это очень опасная и неудобная вещь. Их раскрывает специальный препроцессор, который начинает работать еще до компилятора C++, и он ничего не знает о самом языке. Все конструкции раскрываются буквально. В связи с этим есть множество возможных неочевидных побочных эффектов, а у компилятора нет возможности выполнить проверку типов, константность и т.д. Читайте более подробно об этом в книге Майерса «Effective C++».\n\nИтак, неправильный вариант:\n%%(c++ nomark)\n#define MAX_LENGTH 100000  // Wrong! Don&#39;t use macros!\n%%\nПравильный вариант:\n%%(c++ nomark)\nconstexpr int kMaxLegth = 100000;  // Correct\n%%\n}&gt; ]}\n  14. {[Входные параметры передавайте в функцию по константной ссылке; по ссылке — чтобы они лишний раз не копировались, по константной — чтобы вы не могли их случайно изменить. **Не забывайте про const!** Выходные параметры передавайте в функции по указателю — чтобы вы могли их изменить; по указателю, а не по ссылке, — чтобы вы могли в месте вызова отличить входные параметры от выходных по амперсанду перед именем переменной. Размещайте входные параметры перед выходными в списке параметров функции или метода.\nАргументы примитивных типов следует передавать в функции по-другому. Входные параметры типов ##int##, ##char##, ##bool##, ##double## передавайте по значению. Они будут копироваться, но это так же почти бесплатно, как и в случае ссылок или указателей. При этом вы не сможете их изменить изнутри функции, что и нужно, т.к. это входные параметры. Если вам нужны эти типы как выходные параметры функции, лучше передавайте их по ссылке, т.к. иначе легко внутри функции перепутать указатель на переменную с самой переменной, и сделать совсем не то, что вы собирались. \n\n&lt;{Примеры:\n%%(c++)\nvoid Input(std::vector&lt;point&gt;* sequence, int&amp; points_to_cover);\n\nvoid FindMaximumsInSlidingWindow(\n    const std::vector&lt;int&gt;&amp; sequence, \n    const std::string&amp; shifts, \n    vector&lt;int&gt;* maximums);\n\ndouble FindMinimumCoveringCircleRadius(\n    const std::vector&lt;point&gt;&amp; points, \n    int points_to_cover);\n%%\n\nПримеры вызовов:\n%%(c++)\nstd::vector&lt;int&gt; sequence;\nint points_to_cover;\nInput(&amp;sequence, points_to_cover);\n...\n...\nstd::vector&lt;int&gt; sequence;\nstd::string shifts;\nInput(&amp;sequence, &amp;shifts);\nstd::vector&lt;int&gt; maximums;\nFindMaximumsInSlidingWindow(sequence, shifts, &amp;maximums);\n...\n...\ndouble min_radius = FindMinimumCoveringRadius(points, points_to_cover);\n%%\n\nОбратите внимание на амперсанды &amp; перед переменными, в которые записывается результат вызова функции.\nЕсли функция возвращает одну величину, пусть она делает это по значению. Это столь же быстро, зато удобнее в месте вызова.\nПример:\n%%(c++)\nstd::vector&lt;int&gt; ReadNumbers(std::istream&amp; input_stream = std::cin) {\n    size_t sequence_length;\n    input_stream &gt;&gt; sequence_length;\n    std::vector&lt;int&gt; numbers(sequence_length);\n    for (size_t i = 0; i &lt; numbers.size(); ++i) {\n        input_stream &gt;&gt; numbers[i];\n    }\n    return numbers;\n}\n\nint main() {\n    std::vector&lt;int&gt; first_sequence = ReadNumbers();\n    std::vector&lt;int&gt; second_sequence = ReadNumbers();\n    ...\n}\n%%\nЛишнего копирования в этом месте не возникнет. Дело в том, что эта операция настолько часто встречается, что компиляторы научились ее распознавать и генерировать эффективный код для нее. Технология называется return value optimization, известна также под своей аббревиатурой RVO. Можно и следует по умолчанию считать, что она есть и исправно работает, и писать код так, чтобы им было удобнее пользоваться. Чтобы узнать об этом более подробно, поищите в вашем любимом поисковике ее описание по названию.\nЕсли переданный на вход параметр для выполнения алгоритма необходимо изменять, -- это не означает, что параметр автоматически становится выходным параметром. Если целью алгоритма не является менять входной параметр, то изменять этот параметр функция не должна: пользователь алгоритма этого не ожидает, и будет очень не рад такому побочному эффекту. Кроме того, если просто передать параметр по ссылке и поменять его внутри, то пользователь даже не будет догадываться о том, что переданные им данные будут изменены. Появляющиеся вследствие таких побочных эффектов баги очень тяжело искать. Соответственно, в таких ситуациях есть два решения: передавать параметр по значению или передавать как обычно ко константной ссылке, а внутри функции копировать и изменять уже копию. Первый вариант (передавать по значению) обычно предпочтителен. Т.к. объект передается по значению, его можно менять внутри функции в процессе работы алгоритма (например, сортировать, если это вектор), при этом объект не изменится в месте вызова функции. При копировании аргумента, переданного по константной ссылке, в функции появляется два одинаковых по смыслу объекта, что может привести к путанице и использованию одного из них вместо другого, кроме того, копировать приходится вручную, тогда как при передаче объекта по значению копия делается автоматически, без написания дополнительного кода.\nПример:\n%%(c++)\nstd::vector&lt;int&gt; Unique(std::vector&lt;int&gt; numbers) {\n    // here we sort a copy of given numbers,\n    // so that the user does not lose his data\n    std::sort(numbers.begin(), numbers.end());\n    numbers.erase(\n        std::unique(numbers.begin(), numbers.end()),\n        numbers.end());\n    return numbers;\n}\n%%\n}&gt; ]}\n  15. {[Разделяйте использование ##class## и ##struct##: классом должна быть любая сущность, которая содержит в себе логику, тогда как структура --- это набор данных, объединенных в один объект. В классе все переменные-члены должны быть приватными, для доступа к ним делайте аксессоры, в структуре все переменные должны быть публичными, нетривиальных методов быть не должно.\n&lt;{Пример\n%%(c++)\nstruct Point {\n    double x, y;\n};\n\n// Compares first by x-coordinate, then by y-coordinate\nbool operator &lt; (const Point&amp; first, const Point&amp; second) {\n    if (first.x != second.x) {\n        return first.x &lt; second.x;\n    }\n    return first.y &lt; second.y;\n}\n\nclass Path {\npublic:\n    Path(double time, double average_speed)\n        : time_(time), average_speed_(average_speed)\n    {}\n    \n    double Time() const {\n        return time_;\n    }\n    \n    double AverageSpeed() const {\n        return average_speed_;\n    }\n    \n    double Distance() const {\n        return time_ * average_speed_;\n    }\n\nprivate:\n    double time_;\n    double average_speed_;\n};\n%%\nОт структуры точки нам ничего не требуется, поэтому она состоит только из двух публичных полей. Метод ##compare## добавлять нельзя, задача сравнения решается определением внешнего оператора &lt;. Если нужно, например, запретить изменять координаты (устанавливать их только при создании точки), то ее нужно делать классом с двумя get-аксессорами.\nВ классе ##Path## хранится две величины, а получать требуется три. Если бы ##time## и ##averageSpeed## были публичными переменными, то доступ к значениям скорости и времени происходил бы как ##path.time## и ##path.averageSpeed##, а доступ к пройденному расстоянию -- как ##path.distance()##. Для нахождения расстояния приходится добавлять скобки, то есть всегда приходится помнить о том, что расстояние -- это метод, а время и скорость -- переменные. Если по какой-то причине (например, недостаточная точность) в будущем хранимые переменные нужно будет поменять и перейти к системе (время, расстояние), то в нашем случае с приватными переменными лишь изменится реализация методов, сохранив интерфейс класса. В случае же с публичными переменными придется изменять интерфейс класса, что немедленно влечет изменение всего кода, который его использует. Хранить все три величины переменными категорически нельзя: если время было равно 1, то действие ##path.time = 0.0## нарушит инвариант ##time * speed == distance##, что приведет к совершенно непредсказуемым последствиям.\nИтак, если вам нужно хранить данные под общим именем, вам подойдет структура; во всех остальных случаях создавайте полноценный класс только с приватными переменные-членами. }&gt; ]}\n  16. {[Старайтесь не использовать по возможности динамическое выделение памяти (с помощью ##new## и ##malloc##): &lt;{Почему\nесли вы будете его использовать, вам необходимо будет заботиться и об \&quot;уборке мусора\&quot;, т.е. освобождении памяти. Правильный, безопасный способ это делать -- не очень простой и не входит в материалы курса. Кроме того, вызов ##new## довольно медленный, поэтому если очень много раз это сделать, то можете не влезть в Time limit. Если вам интересно, как правильно управлять динамической памятью, читайте книгу Майерса \&quot;Effective C\&quot;\&quot;++\&quot;\&quot;\&quot; или наберите в поисковике \&quot;RAII\&quot;.}&gt; ]}\n  17. {[При использовании ##vector## имейте в виду, что у него есть удобные методы: различные конструкторы, позволяющие задать размер и значение элемента вектора по умолчанию, операторы присваивания, сравнения (лексикографического) и оператор ##swap##. &lt;{Примеры:\nСоздание двумерного вектора размером ##rows * columns##, заполненного значением 100:\n%%(c++ nomark)\nstd::vector&lt; vector&lt;int&gt; &gt; cache(\n    rows,\n    std::vector&lt;int&gt;(columns, 100));\n%%\nПерестановка двух векторов местами без копирования всего содержимого:\n%%(c++ nomark)\nstd::vector&lt;int&gt; first(1000000, 1);\nstd::vector&lt;int&gt; second(2000000, 2);\nfirst.swap(second);\n%%\nЗдесь меняются местами реально два внутренних указателя ##int*##, что значительно эффективнее, чем копирование векторов целиком, особенно если они большого размера.}&gt; ]}\n  18. Обратите внимание, что для взятия модуля вещественного числа (##float##, ##double##) необходимо пользоваться функцией ##fabs##, а не ##abs##. При этом в Microsoft Visual Studio сделана перегрузка ##abs##, которая работает и для вещественных чисел даже если вы не подключили заголовочный файл с ней напрямую. Однако на сервере при этом будет ##abs(-2.75)## != ##2.75##.\n\nВ общем же случае стоит отметить, что в ##c++## существует 2 версии ##abs##:\n* в ##cmath##, определенная для вещественных чисел (##float##, ##double## и ##long double##).\n* в ##cstdlib##, определенная для целых чисел (##int##, ##long## и ##long long##).\n\nРаспространенная ошибка состоит в том, что подключается ##cmath## и используется ##abs## оттуда, что приводит к приведению целых типов в ##double##, что в свою очередь может приводить к ошибкам округления при вызове ##abs(long long)##.\n\nПоэтому общее правило следующее:\n* для взятия модуля **вещественного** числа необходимо подключить ##cmath## и использовать ##fabs##.\n* для взятия модуля **целого** числа необходимо подключить ##cstdlib## и использовать ##abs##.\n\n  19. {[Если вы пользуетесь новым стандартом ##c\&quot;\&quot;++\&quot;\&quot;11(c\&quot;\&quot;++\&quot;\&quot;0x)##, то для генерации (псевдо)случайных чисел рекомендуется использовать заголовок ##random## с генератором псевдослучайных чисел ##std::mt19937## и распределениями:\n%%(c++ nomark)\n  std::uniform_int_distribution\n  std::uniform_real_distribution\n%%\nи другими, если понадобятся. &lt;{Подробнее\nВ противном случае, имейте в виду, что значение ##RAND_MAX## --- ограничения сверху на значения, выдаваемые функцией ##rand()##,--- отличаются в разных компиляторах. Тщательно изучайте, каково значение компилятора в вашем компиляторе, а каково --- на компиляторе в автоматической системе (компилятор вы выбираете при сдаче задания). Подходит ли вам такое ограничение сверху, или нужно построить на базе функции ##rand()## алгоритм, позволяющий возвращать случайные числа, равномерно распределенные в более широком диапазоне, чем ##[0, RAND_MAX - 1]##?\nПри использовании схемы, предложенной новым стандартом ##c\&quot;\&quot;++\&quot;\&quot;11|(c\&quot;\&quot;++\&quot;\&quot;0x)##, следует обратить внимание на то, где создавать генератор. Каждый алгоритм должен использовать собственный генератор, чтобы добиться независимой работы всех алгоритмов. Например, два алгоритма, использующих случайность, должны работать одинаково, вне зависимости от порядка их вызовов. Такой независимости сложно добиться при использовании функции ##rand()##. \nНапример, если вы хотите реализовать рандомизированный алгоритм сортировки, то нужно создать генератор внутри внешней функции, которую и будет вызывать пользователь, и передать его во внутреннюю, где будет реализована вся логика сортировки:\n%%(c++ nomark)\n#include &lt;random&gt;\n\ntemplate&lt;class Iterator&gt;\nvoid Sort(Iterator begin, Iterator end) {\n    std::mt19937 generator;\n    QuickSort(begin, end, generator);\n}\ntemplate&lt;class Iterator, class RandomGenerator&gt;\nvoid QuickSort(Iterator begin, Iterator end, RandomGenerator&amp; generator) {\n    ...\n}\n%%\n}&gt; ]}\n  20. {[В большинстве случаев нельзя сравнивать числа типа ##float## и ##double## просто операторами &lt;, &gt;, &lt;=, &gt;=, ==: &lt;{почему\nпри вычислениях в вещественных типах накапливается погрешность, вследствие чего равные по сути числа, вычисленные с помощью разной последовательности действий, могут получить различные значения в типах ##float## и ##double##, и даже ##a &lt; b## может измениться на ##b &lt; a##. Погрешность вычислений можно оценить, используя точные знания о том, как именно выполняются арифметические операции, а также как происходят вычисления в используемых вами функциях. Обычно делать этого точно не нужно, т.к. точность типа ##double## позволяет хранить 15-16 знаков, а требуемая в задаче точность обычно порядка 10^^-6^^ или $10^^-9^^, но не меньше. Однако для того, чтобы корректно сравнивать числа, следует использовать порог сравнения. Примеры:\n%%(c++ nomark)\nconst double COMPARISON_THRESHOLD = 1e-8;\n\nbool Less(double first, double second) {\n    return first &lt; second - COMPARISON_THRESHOLD;\n}\n\nbool LessOrEqual(double first, double second) {\n    return first &lt; second + COMPARISON_THRESHOLD;\n}\n\nbool Equal(double first, double second) {\n    return fabs(first - second) &lt; COMPARISON_THRESHOLD;\n}\n%%\n}&gt; ]}\n  21. {[Для своих типов (классов, структур), если объекты типа необходимо сравнивать между собой, реализуйте всегда ##operator\&quot;\&quot;&lt;\&quot;\&quot;## и не реализуйте остальные операторы сравнения (##operator&lt;=, operator&gt;, operator&gt;=##): &lt;{почему\nчерез ##operator\&quot;\&quot;&lt;\&quot;\&quot;## выражаются все остальные, и общепринятая конвенция --- реализовывать только сравнение на \&quot;меньше\&quot;. В противном случае, дублируется код, а работа различных операторов может оказаться несогласованной. Точно так же, общая конвенция,~-- что сортировка объектов по умолчанию делается по возрастанию, и в качестве компаратора передается функция сравнения на \&quot;меньше\&quot;. Это правило необходимо соблюдать, чтобы вашу программу было легко понимать другим программистам. }&gt; ]}\n  22. {[Не используйте ##std::pair## (за исключением случая, описанного ниже). &lt;{Подробнее: \nПричина в том, что в месте использования объекта ##pair## невозможно понять, что кроется за полем ##first##, а что ~-- за полем ##second##. Это абстрактные названия, которые могут означать что угодно, а в месте использования никаких указаний на это нет. Даже если в месте определения переменной указать, что в ней хранится в ##first## и ##second##, при чтении придется постоянно возвращаться к месту определения переменной, чтобы разобраться в коде и убедиться, в частности, что ##first## и ##second## нигде не перепутаны местами ~-- часто встречающаяся ошибка! \nИсключением являются небольшие участки кода (помещающиеся на один экран), в рамках которых создается из имеющихся объектов ##pair##, далее удобно используется для какой-нибудь операции (например, сортировка), и затем все ##pair## обратно \&quot;расшифровываются\&quot; в новые объекты и более не используются. Это может быть удобно для сортировки по вторичному параметру, т.к. для ##pair## есть оператор сравнения по умолчанию, который сравнивает сначала по ##first##, затем по ##second##. При этом код легко понять, т.к. ##pair## определен и используется в одном очень локальном куске кода, который можно охватить взглядом целиком.}&gt; ]}\n\n===Организация кода===\nКак и любая система, код при разрастании становится все более путаным и сложным. Однако есть способы перевести эту сложность преимущественно в его размер, сохраняя логику ясной и прозрачной. Помогает в этом грамотное структурирование: что может быть классом, что должна делать функция, где что должно объявляться. Оно же позволяет удобно осуществить повторное использование нужных участков кода.\n  1. У каждой переменной должна быть одна-единственная явная цель. Никогда не создавайте переменных ##tmp##, выполняющих несколько разных вспомогательных функций во всем коде. Используйте переменную только с одной целью. Переменные, в названии которых используется ##tmp## или ##temp##, почти всегда либо бессмысленные и ненужные, либо неправильно названы.\n  2. Объявляйте переменные как можно ближе к месту их первого использования. Старайтесь сразу же инициализировать переменные. Если переменная используется только внутри функции, она должна быть локальной для функции. Если только внутри цикла, она должна быть локальной для цикла. Никогда не делайте глобальных переменных. Локальные переменные блока предпочтительнее по сравнению с локальными переменными функции, локальные переменные функции ~-- по сравнению с переменными-членами класса, а последние ~-- по сравнению с глобальными переменными. Стремитесь сократить \&quot;время жизни\&quot; каждой переменной: чем меньше время жизни переменных, тем меньше переменных приходится одновременно держать в голове при чтении и написании кода. Исследования показывают, что человек может эффективно держать в памяти не более 5-7 переменных одновременно. Большее количество неизбежно приводит к ошибкам.\n  3. {[Разделяйте программу на ввод, решение и вывод, это делает ваш код более модульным.\nСпособы ввода и вывода часто меняются. У нас используются стандартные потоки и определенный описанный формат, в следующий раз те же данные могут быть записаны в файле или в базе данных в другом формате, затем они же могут поставляться уже в виде переменных в более сложной программе, которая использует ваш алгоритм в качестве подпрограммы.\nЗаписывайте вход в отдельные переменные и результат работы ~-- в отдельные. Для их заполнения и вывода напишите отдельные функции. В частности, ваш код становится легче тестируемым, что является важным свойством. Вы можете написать альтернативное решение и сравнить его с вашим, можете запустить стресс-тест.\nВообще это две принципиально разные области ответственности: ввод-вывод и преобразование данных. Не смешивайте в одном классе или функции несколько разных областей ответственности: один класс отвечает ровно за одну область. Иначе он разрастается, становится слишком сложным, а две разные области ответственности начинают быть слишком сильно связанными. Это плохо, потому что чем более независимы разные части программы, тем меньше поводов для ошибок и тем проще тестировать части программы по отдельности.]}\n  4. {[Никогда не используйте \&quot;магические константы\&quot; в коде. Если у вас где-то в коде встречаются, например, &#39;a&#39; и &#39;z&#39;, означающие минимальный и максимальный символ алфавита, то их надо заменить на именованные константы. Например так:\n%%(c++ nomark)\nconst char MIN_LETTER = &#39;a&#39;;\nconst char MAX_LETTER = &#39;z&#39;;\n...\n\nfor (char letter = MIN_LETTER; letter &lt;= MAX_LETTER; ++letter) {\n    ...\n}\n...\n%%\n]}\n  5. {[Пишите комментарии только по делу. В идеальном случае лучше обходиться вообще без них ~--- ваш код прокомментирует сам себя. Конечно, так редко удается, поэтому комментарии к классам и функциям бывают полезными.\nНе нужно оправдывать плохое имя (см. следующий раздел) подробным комментарием. Если у вас встречается объявление вида\n%%(c++ nomark)\nint n;  // number of balls in the bucket\n%%\nто нужно заменить его на ##int number_of_balls;## или ##int numBallsInBucket;## в зависимости от принятого стиля, от того, бывают ли шары не в корзине, и от контекста.\nПисать комментарий следует **над** тем, к чему он относится. Комментарии в конце строки значительно удлиняют ее, поэтому ухудшают читаемость. При этом желательно, чтобы строка влезала в 100 символов, а зачастую бывает жесткое ограничение по длине строки (как в нашей системе проверки). Если вы все же пользуетесь комментарием в конце строки, то отделяйте его двумя пробелами от кода.\nКомментарии к функции должны быть написаны рядом с интерфейсом, а не с реализацией, если они разделены: пользователь будет в первую очередь смотреть на интерфейс, к тому же реализация сторонних библиотек может быть вовсе недоступной. То же самое относится и к классам: комментарии к классу и к его методам должны быть в интерфейсе класса, а не в реализации.\nЕсли вы решили снабдить свой код подробными комментариями, указывайте в них то, что будет интересно читающему. Для класса это описание того, для чего класс нужен, как им пользоваться. Для функции и метода ~--- что они делают, что возвращают, что принимают на вход, какие исключения могут бросать.\nВот пример хорошего комментария к функции.\n%%(c++)\n/* Applies per symbol transformation to string.\n * input[i] is transformed into transform[input[i]].\n * If transform map doesn&#39;t contain input[i] and defaultSymbol isn&#39;t null,\n *   input[i] is transformed to defaultSymbol.\n * If transform map doesn&#39;t contain input[i] and defaultSymbol == 0,\n *   function throws TransformError.\n */\nstring TransformString(\n     const string&amp; input,\n     const map&lt;char, char&gt;&amp; transform,\n     const char defaultSymbol);\n%%\n]}\n\n====Имена====\nУ каждой создаваемой сущности в коде есть имя. Сперва автор, а впоследствии, и все читающие код ассоциируют имена с сущностями, которые они обозначают. Чтобы в каждый момент точно понимать, что в переменной хранится, чтобы быть уверенным в том, что вызов функция вернет ожидаемое значение, имена нужно давать осмысленные и грамотно определенные.\n  1. {[Имена переменных должны быть длинными и понятными. Каждый раз, когда вы пишете одно-двух-буквенное название переменной или используете что-то вроде cur, должно возникать неприятное чувство. Единственное место, где можно позволить себе однобуквенные переменные,~--- в качестве счетчика в очень коротком for&#39;е без вложенных циклов. И то, у вас должны быть серьезные опасения, когда вы это делаете, вы должны делать это осознанно. Иначе можно легко допустить ошибку с индексами, например перепутать i с j, что происходит постоянно, если называть так переменные. Искать такую ошибку вы будете несколько часов или дней. Даже если в описании задачи есть названия R и L, это не значит, что в программе нужно их так называть. Стиль математического текста очень сильно отличается от стиля кода программы. В математическом тексте есть очень много слов, описывающих формулы и то, что в них происходит. В самих формулах ценится краткость. В коде же наоборот, слов, описывающих происходящее, практически нет. Код должен описывать сам себя, названиями переменных, методов и классов. Поэтому названия должны быть очень прозрачными. Не должно быть нужно возвращаться и смотреть вверх в объявление переменной или смотреть на ее инициализацию, чтобы понять, что она в себе содержит.\nНикогда не называйте переменные ##something1## и ##something2##, так как очень легко ошибиться и попасть по соседней клавише, тем самым очень легко сделать баг, а искать его будет тяжело. Используйте ##something_first## и ##something_second## или что-нибудь еще. //Как выбрать понятное название переменной?// Сперва нужно описать переменную на английском (так чтобы из описания было понятно, что хранит переменная), а далее выбирать название исходя из соображений компромисса между длиной и понятностью. (3-5 слов в названии -- это нормально). \n]}\n  2. {[Все, что относится к именам переменных, относится и к именам функций, классов и методов. Кроме того, в названиях методов (функций) обязательно должен быть глагол, описывающий действие, которое выполняет метод. Это действие должно быть одно. У каждой функции должна быть одна ясная цель. Если вы понимаете, что не можете придумать название функции без слова And (например, ##ReadFromFileAndSort##), значит, функция выполняет две разные цели, и скорее всего, ее нужно разбить на несколько меньших функций (##ReadFromFile## и ##Sort##), и из внешней вызывать подряд внутренние.]}\n  3. {[Не сокращайте слова в названиях. Это ухудшает читаемость кода, а также делает невозможным поиск по нему. Не нужно сокращать ##index## до ##ind## или ##idx##, ##current## ~--- до ##cur## и т.д. Единственное исключение ~--- общепринятые сокращения типа ##Http## и т.д.]}\n  4. {[Выделяйте названия приватных членов классов, это позволяет отличить их от аргументов методов. Наиболее распространенными способами являются подчеркивание в конце: ##name_##,~--- или префикс ##m_##: ##m_name##. Начинать имя переменной с подчеркивания не принято; следует помнить о том, что имена, начинающиеся на два подчеркивания или подчеркивание и заглавную букву, зарезервированы стандартом, и использовать их нельзя.]}\n\n===Продвинутые замечания===\n  1. {[Не оптимизируйте преждевременно. Ваш алгоритм должен иметь правильную асимптотическую сложность, чтобы иметь шансы пройти в Time limit. Он должен правильно работать, чтобы не получить Wrong answer. Это два основных тезиса. Не нужно оптимизировать с целью ускорить программу в константу раз, если это хоть сколько-нибудь усложняет код. Старайтесь сделать свое изначальное решение максимально простым. Оптимизировать нужно только после того, как вы четко замерили время работы программы, убедились, что оно слишком большое, определили, какая именно функция создает узкое место. Даже суперпрофессионалы не берутся заранее предсказывать узкие места системы: в наше время, когда компиляторы умеют делать сумасшедшие оптимизации, это практически невозможно предугадать. Поэтому профессионалы и не пытаются делать это заранее и оптимизировать что-либо заранее. Сначала измерьте, найдите узкое место, а потом уже пытайтесь его оптимизировать. Все вышесказанное относится к выносу переменных из цикла для ускорения, к перебору не до n, а до n / 2 и т.д. ~-- не нужно ничего из этого сделать. Напишите максимально простое решение, добейтесь правильной его работы, и если вдруг после этого оно окажется слишком медленным ~-- только тогда оптимизируйте. Ваша задача в программах, которые вы пишете на этом курсе,~-- написать наиболее простой, понятный, читаемый и гибкий код, среди тех, которые проходят в ограничения по времени и памяти. Помните об этом и не оптимизируйте, жертвуя простотой и удобством.]}\n  2. {[Не выполняйте никакую сложную работу в конструкторе, также не обращайтесь в конструкторе к каким-либо внешним для программы объектам, таким как файловая система, стандартные потоки ввода и вывода, базы данных и т.д. В конструкторе должна быть только простейшая инициализация полей класса, автономная или в зависимости от параметров конструктора. Это связано с тестированием класса и гибкостью дизайна.\nНа самом деле, почти всегда класс, который легко тестировать, имеет гибкий дизайн и его удобно использовать, и наоборот. Если у класса в конструкторе\nпроисходят какие-то сложные действия (обращение к файлу, базе данных или запуск сложного алгоритма), то его сложно протестировать. Чтобы протестировать класс в юнит-тесте, нужно для начала хотя бы создать экземпляр этого класса.\nЕсли для этого требуется какой-то файл или база данных, то это уже получается сразу не юнит-тест, т.к. ему для работы нужны внешние данные, внешние объекты, что неудобно, в идеале тест должен быть изолирован от остальной системы для чистоты эксперимента. Подменить данные, лежащие в базе данных или в файле, существенно сложнее,  чем передать другие значения параметров в какую-то функцию. Для того, чтобы обойти использование файлов и баз данных, придется переделывать класс, в частности убирать у него из конструктора непосредственные обращения к файлам и базе данных. А если это делается не непосредственно в конструкторе этого класса, а в методах других классов, вызываемых в конструкторе, то придется выносить объекты этих классов наружу и подменять их.\nЕсли внутри конструктора сложный алгоритм, то его тоже было бы неплохо протестировать, однако это уже становится невозможно, потому что как только мы захотим создать экземпляр класса, так сразу же вызовем конструктор, и там уже весь алгоритм выполнится, отдельные функции, которые он использует протестировать не получится. Если алгоритм работает неправильно, то к моменту создания объекта класса он будет находиться в некорректном состоянии, и тестировать его будет уже бессмысленно.\nИногда даже иметь в классе указатели на объекты других конкретных классов и создавать их в конструкторе неправильно. Например, если класс, выполняющий какой-то конкретный алгоритм, имеет у себя указатель на объект для работы с базой данных, который в конструкторе инициализируется для обращения к конкретной базе, то такой класс тоже невозможно протестировать по вышеописанным причинам.\nНа самом деле, нашему алгоритмическому классу нужны от класса, работающего с базой данных, лишь конкретные данные, которые тот берет из базы данных,\nи скорее всего далеко не все данные, которые есть в базе. Поэтому имеет смысл написать \&quot;обертку\&quot; вокруг класса, работающего с базой, которая будет обращаться к базе и доставать произвольные данные с помощью внутреннего класса, работающего непосредственно с базой, а наружу отдавать\nтолько те куски данных, которые имеют смысл для алгоритмического класса. А для того, чтобы впоследствии можно было работать не только с базой данных, но те же данные брать из файла или откуда-то из памяти другого объекта, нужно сделать общий интерфейс для классов, поставляющих данные алгоритмическому, и конкретный класс, берущий данные именно из базы, породить от этого интерфейса. Под интерфейсом в данном случае имеется в виду класс с чисто виртуальными методами, который определяет интерфейс всех своих потомков, но инстанцировать который невозможно. Далее, в конструктор алгоритмического класса передавать уже указатель на такой интерфейс, а не указатель на конкретный класс для работы с базой данных, и в конструкторе просто копировать этот указатель\nво внутреннюю переменную для будущего использования. В таком случае при тестировании можно будет создать mock класса, достающего данные, реализовав этот интерфейс. Наш mock будет \&quot;подсовывать\&quot; алгоритмическому классу те данные, которые мы хотим, то есть абсолютно любые, что и нужно для полного тестирования. Соответственно, мы сможем проверить реакцию на разные крайние случаи, запустить стресс-тест, понять, какие ограничения на данные должен проверять на входе алгоритмический класс. \nНам не придется создавать специальные базы данных для тестирования с подмененными данными, мы сможем генерировать эти данные прямо в памяти, в огромных количествах, сможем выполнить хоть 100000 тестов, если каждый из них выполняется быстро. С базами данных это не получится, потому что, во-первых, один тест, обращающийся в процессе к базе данных, уже в любом случае будет занимать существенное время, а во-вторых потому что не получится создать 100000\nразличных таблиц.\n\nБолее подробное описание, примеры и другие советы для написания хорошо тестируемых классов см. ((http://misko.hevery.com/attachments/Guide-Writing%20Testable%20Code.pdf здесь)).\n]}&quot;,&quot;canSwitchWf&quot;:false,&quot;canEdit&quot;:true}}}" style="display: none"></div><div class="page-layout page-layout_sidebar_close page-layout_page_article i-bem page-layout_js_inited" data-bem="{&quot;page-layout&quot;:{}}"><div class="sidebar sidebar_state_close sidebar_full-height_yes mi-sticky mi-sticky_full-height_yes wiki-sidebar wi-files-dropper page-layout__sidebar wiki-sidebar wi-files-dropper page-layout__sidebar i-bem sidebar_js_inited mi-sticky_js_inited wi-files-dropper_js_inited wiki-sidebar_js_inited mi-sticky_undocked_yes" data-bem="{&quot;sidebar&quot;:{},&quot;mi-sticky&quot;:{&quot;placeholder&quot;:{&quot;width&quot;:&quot;&quot;},&quot;offset&quot;:{&quot;top&quot;:0,&quot;bottom&quot;:0}},&quot;wiki-sidebar&quot;:{&quot;tabs&quot;:{&quot;view&quot;:[&quot;toc&quot;,&quot;cluster-tree&quot;,&quot;files&quot;,&quot;events&quot;],&quot;edit&quot;:[&quot;hotkeys&quot;,&quot;files&quot;],&quot;grid&quot;:[&quot;grid-settings&quot;,&quot;grid-code&quot;,&quot;files&quot;,&quot;events&quot;]},&quot;view&quot;:&quot;view&quot;,&quot;selected&quot;:null},&quot;wi-files-dropper&quot;:{}}" style="top: 0px; right: auto; bottom: 0px; left: 0px;"><ul class="sidebar__tabs"><li class="sidebar__tab sidebar__tab_type_toc"><span class="awesome-icon awesome-icon_icon_list" title="Оглавление"></span></li><li class="sidebar__tab sidebar__tab_type_cluster-tree"><span class="awesome-icon awesome-icon_icon_sitemap" title="Подстраницы"></span></li><li class="sidebar__tab sidebar__tab_type_files"><span class="awesome-icon awesome-icon_icon_paperclip" title="Файлы"></span></li><li class="sidebar__tab sidebar__tab_type_events w-getting-started__elem w-getting-started__elem_sidebar-revisions_1"><span class="awesome-icon awesome-icon_icon_clock-o" title="События"></span></li><span class="sidebar__close"></span></ul><div class="sidebar__content-container w-getting-started__elem w-getting-started__elem_edit-attaching_2"><div class="sidebar__tab-content"></div></div><div class="sidebar__loader"><div class="spin2 spin2_size_l spin2_progress_yes spin2_view_default spin2_tone_default"></div></div></div><div class="mi-sticky__placeholder" style="position: relative; top: 0px; right: 0px; bottom: 0px; left: 0px; visibility: visible; float: none; height: 1368px;"></div><div class="page-layout__content"><img class="page-layout__qr" src="./Styleguide @ Wiki_files/qr.png"><div class="b-readonly i-bem b-readonly_js_inited" data-bem="{&quot;b-readonly&quot;:{}}"><div class="b-readonly__wrapper"><div class="b-readonly__text">Вики находится в режиме «Только для чтения».<br>Сохранение изменений временно недоступно.</div><div class="b-readonly__close"><span class="awesome-icon awesome-icon_icon_remove"></span></div></div><div class="b-readonly__icon"></div></div><div class="b-page__copytracker"></div><div class="w-breadcrumbs i-bem w-breadcrumbs_js_inited" data-bem="{&quot;w-breadcrumbs&quot;:{}}"><div class="w-breadcrumbs__content"><a class="link link_theme_secondary i-bem" data-bem="{&quot;link&quot;:{}}" tabindex="0" href="https://wiki.yandex.ru/shad"><div class="link__wrapper">Школа Анализа Данных</div></a><span class="awesome-icon awesome-icon_icon_angle-right awesome-icon_type_first"></span><a class="link link_theme_secondary awesome-icon i-bem" data-bem="{&quot;link&quot;:{}}" tabindex="0" href="https://wiki.yandex.ru/shad/groups"><div class="link__wrapper">Groups</div></a><span class="awesome-icon awesome-icon_icon_angle-right"></span><a class="link link_theme_secondary awesome-icon i-bem" data-bem="{&quot;link&quot;:{}}" tabindex="0" href="https://wiki.yandex.ru/shad/groups/2019"><div class="link__wrapper">Курсы набора 2019</div></a><span class="awesome-icon awesome-icon_icon_angle-right"></span><a class="link link_theme_secondary awesome-icon i-bem link_js_inited" data-bem="{&quot;link&quot;:{}}" tabindex="0" href="https://wiki.yandex.ru/shad/groups/2019/Semester1"><div class="link__wrapper">Курсы 1 семестра (первый курс 2019)</div></a><span class="awesome-icon awesome-icon_icon_angle-right"></span><a class="link link_theme_secondary awesome-icon i-bem" data-bem="{&quot;link&quot;:{}}" tabindex="0" href="https://wiki.yandex.ru/shad/groups/2019/Semester1/Algorithms1"><div class="link__wrapper">Алгоритмы и структуры данных</div></a><span class="awesome-icon awesome-icon_icon_angle-right"></span><a class="link link_theme_secondary awesome-icon i-bem" data-bem="{&quot;link&quot;:{}}" tabindex="0" href="https://wiki.yandex.ru/shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide"><div class="link__wrapper">Styleguide</div></a></div></div><div class="b-content"><div class="w-page-panel mi-sticky i-bem mi-sticky_js_inited mi-sticky_undocked_yes" data-bem="{&quot;w-page-panel&quot;:{},&quot;mi-sticky&quot;:{&quot;preventCollapse&quot;:true,&quot;offset&quot;:{&quot;left&quot;:&quot;auto&quot;}}}" style="top: 0px; right: auto; bottom: auto;"><div class="w-page-panel__left"><div class="w-page-main-info i-bem" data-bem="{&quot;w-page-main-info&quot;:{}}"><div class="w-page-main-info__left"><img class="w-userpic w-page-main-info__avatar" width="32px" height="32px" src="./Styleguide @ Wiki_files/islands-middle(1)"></div><div class="w-page-main-info__right"><div class="w-page-main-info__first-author"><a class="m-username staff-lite-card w-page-main-info__first-author-link i-bem" data-bem="{&quot;staff-lite-card&quot;:{&quot;staffLiteHost&quot;:&quot;https://staff.yandex.ru/&quot;,&quot;user&quot;:&quot;alisso&quot;}}" href="https://staff.yandex.ru//alisso"><span class="m-username__first-letter">A</span>lisa Smirnova</a><span class="link link_theme_black link_pseudo_yes w-page-main-info__open-authors i-bem" data-bem="{&quot;link&quot;:{}}" tabindex="0" role="button"><span class="link__inner"><span class="awesome-icon awesome-icon_icon_angle-down awesome-icon_role_show-authors"></span></span></span></div><div class="w-page-main-info__modified"><div class="w-page-main-info__updated">Обновлено 1 февраля, 2020 в 14:49</div></div></div></div><button class="button2 button2_theme_normal button2_size_s button2_view_classic w-access-button w-access-button_type_restricted w-page-panel__access i-bem" data-bem="{&quot;button2&quot;:{},&quot;w-access-button&quot;:{}}" type="button" autocomplete="off" tabindex="0"><span class="icon icon_size_s icon_type_lock button2__icon button2__icon_side_left"></span><span class="button2__text">Доступ ограничен</span></button></div><div class="w-page-panel__right"><button class="button2 button2_theme_normal button2_size_s button2_role_edit-page button2_view_classic w-page-panel__edit w-action w-action_type_edit w-action_theme_normal w-getting-started__elem w-getting-started__elem_edit-button_1 i-bem button2_js_inited w-action_js_inited" data-bem="{&quot;button2&quot;:{&quot;type&quot;:&quot;edit&quot;},&quot;w-action&quot;:{}}" type="button" autocomplete="off" tabindex="0"><span class="icon icon_size_s icon_type_pencil button2__icon button2__icon_side_left"></span><span class="button2__text">Редактировать</span></button><div class="dropdown2 dropdown2_switcher_button2 dropdown2_theme_normal dropdown2_autoclosable_yes dropdown2_role_subscribe dropdown2_view_classic w-subscribe-button w-subscribe-button_type_none w-mixed-tooltip i-bem" data-bem="{&quot;dropdown2&quot;:{},&quot;w-subscribe-button&quot;:{},&quot;w-mixed-tooltip&quot;:{&quot;screenWidthToShow&quot;:1200,&quot;tooltip&quot;:{&quot;block&quot;:&quot;tooltip&quot;,&quot;mods&quot;:{&quot;size&quot;:&quot;s&quot;,&quot;theme&quot;:&quot;normal&quot;},&quot;js&quot;:{&quot;to&quot;:&quot;bottom&quot;},&quot;content&quot;:&quot;Подписаться&quot;}}}"><button class="button2 button2_view_classic button2_size_s button2_theme_normal button2_small-screen-shrink_yes i-bem" data-bem="{&quot;button2&quot;:{}}" type="button" autocomplete="off" tabindex="0"><span class="icon icon_size_s icon_type_eye-main button2__icon button2__icon_side_left"></span><span class="button2__text">Подписаться</span></button><div class="popup2 popup2_view_classic popup2_theme_normal popup2_autoclosable_yes popup2_target_anchor popup2_role_subscribe popup2_hiding_yes i-bem" data-bem="{&quot;popup2&quot;:{&quot;directions&quot;:[&quot;bottom-right&quot;]}}"><div class="menu menu_type_radio menu_theme_normal menu_size_m menu_view_classic i-bem" data-bem="{&quot;menu&quot;:{}}" tabindex="0" role="listbox"><div class="menu__item menu__item_type_option" data-bem="{&quot;menu__item&quot;:{&quot;val&quot;:&quot;page&quot;}}"><span class="icon icon_size_m icon_type_eye menu__icon"></span><span class="menu__text">Подписаться на страницу</span></div><div class="menu__item menu__item_type_option" data-bem="{&quot;menu__item&quot;:{&quot;val&quot;:&quot;cluster&quot;}}"><span class="icon icon_size_m icon_type_eye menu__icon"></span><span class="menu__text">Подписаться на весь раздел</span></div><div class="menu__item menu__item_type_option menu__item_checked_yes" data-bem="{&quot;menu__item&quot;:{&quot;val&quot;:&quot;none&quot;}}" aria-selected="true"><span class="icon icon_size_m icon_type_eye-slash menu__icon"></span><span class="menu__text">Отписаться</span></div></div></div></div><button class="button2 button2_theme_normal button2_size_s button2_small-screen-shrink_yes button2_view_classic w-fav-button w-mixed-tooltip w-page-panel__fav i-bem" data-bem="{&quot;button2&quot;:{},&quot;w-fav-button&quot;:{},&quot;w-mixed-tooltip&quot;:{&quot;screenWidthToShow&quot;:1200,&quot;tooltip&quot;:{&quot;block&quot;:&quot;tooltip&quot;,&quot;mods&quot;:{&quot;size&quot;:&quot;s&quot;,&quot;theme&quot;:&quot;normal&quot;},&quot;js&quot;:{&quot;to&quot;:&quot;bottom&quot;},&quot;content&quot;:&quot;В избранное&quot;}}}" type="button" autocomplete="off" tabindex="0"><span class="icon icon_size_s icon_type_bookmark-o button2__icon button2__icon_side_left"></span><span class="button2__text">В избранное</span></button><button class="button2 button2_size_s button2_theme_normal button2_role_more-actions button2_small-screen-shrink_yes button2_view_classic b-readonly-item b-page-more w-getting-started__elem w-getting-started__elem_page-menu_1 w-mixed-tooltip i-bem _popup2-destructor _popup2-destructor_js_inited button2_js_inited b-page-more_js_inited w-mixed-tooltip_js_inited" data-bem="{&quot;button2&quot;:{},&quot;b-readonly-item&quot;:{},&quot;b-page-more&quot;:{&quot;pageData&quot;:{&quot;debug&quot;:{&quot;hostname&quot;:null,&quot;app_name&quot;:null,&quot;app_version&quot;:null,&quot;exec_duration&quot;:null,&quot;method&quot;:null,&quot;page&quot;:null,&quot;view&quot;:null},&quot;data&quot;:{&quot;page_type&quot;:&quot;article&quot;,&quot;is_redirect&quot;:false,&quot;breadcrumbs&quot;:[{&quot;tag&quot;:&quot;shad&quot;,&quot;url&quot;:&quot;/shad&quot;,&quot;title&quot;:&quot;Школа Анализа Данных&quot;,&quot;is_active&quot;:true},{&quot;tag&quot;:&quot;shad/groups&quot;,&quot;url&quot;:&quot;/shad/groups&quot;,&quot;title&quot;:&quot;Groups&quot;,&quot;is_active&quot;:true},{&quot;tag&quot;:&quot;shad/groups/2019&quot;,&quot;url&quot;:&quot;/shad/groups/2019&quot;,&quot;title&quot;:&quot;Курсы набора 2019&quot;,&quot;is_active&quot;:true},{&quot;tag&quot;:&quot;shad/groups/2019/Semester1&quot;,&quot;url&quot;:&quot;/shad/groups/2019/Semester1&quot;,&quot;title&quot;:&quot;Курсы 1 семестра (первый курс 2019)&quot;,&quot;is_active&quot;:true},{&quot;tag&quot;:&quot;shad/groups/2019/Semester1/Algorithms1&quot;,&quot;url&quot;:&quot;/shad/groups/2019/Semester1/Algorithms1&quot;,&quot;title&quot;:&quot;Алгоритмы и структуры данных&quot;,&quot;is_active&quot;:true},{&quot;tag&quot;:&quot;shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide&quot;,&quot;url&quot;:&quot;/shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide&quot;,&quot;title&quot;:&quot;Styleguide&quot;,&quot;is_active&quot;:true}],&quot;owner&quot;:{&quot;uid&quot;:24939579,&quot;login&quot;:&quot;alisso&quot;,&quot;first_name&quot;:&quot;Alisa&quot;,&quot;last_name&quot;:&quot;Smirnova&quot;,&quot;display&quot;:&quot;Alisa Smirnova&quot;,&quot;email&quot;:&quot;alisso@yandex.ru&quot;,&quot;is_admin&quot;:false,&quot;is_external_employee&quot;:false,&quot;is_dismissed&quot;:false},&quot;authors&quot;:[{&quot;uid&quot;:24939579,&quot;login&quot;:&quot;alisso&quot;,&quot;first_name&quot;:&quot;Alisa&quot;,&quot;last_name&quot;:&quot;Smirnova&quot;,&quot;display&quot;:&quot;Alisa Smirnova&quot;,&quot;email&quot;:&quot;alisso@yandex.ru&quot;,&quot;is_admin&quot;:false,&quot;is_external_employee&quot;:false,&quot;is_dismissed&quot;:false}],&quot;last_author&quot;:{&quot;uid&quot;:780890239,&quot;login&quot;:&quot;yndx-wiki-cnt-robot&quot;,&quot;first_name&quot;:&quot;Робот сервиса Wiki&quot;,&quot;last_name&quot;:&quot;Робот сервиса Wiki&quot;,&quot;display&quot;:&quot;Робот сервиса Wiki Робот сервиса Wiki&quot;,&quot;email&quot;:&quot;yndx-wiki-cnt-robot@safelvl-io-3666605.yaconnect.com&quot;,&quot;is_admin&quot;:false,&quot;is_external_employee&quot;:false,&quot;is_dismissed&quot;:false},&quot;access&quot;:{&quot;type&quot;:&quot;inherited&quot;,&quot;parent_access&quot;:&quot;restricted&quot;},&quot;current_user_subscription&quot;:&quot;none&quot;,&quot;version&quot;:&quot;21169886&quot;,&quot;user_css&quot;:null,&quot;bookmark&quot;:null,&quot;is_official&quot;:false,&quot;created_at&quot;:&quot;2020-02-01T14:49:36&quot;,&quot;modified_at&quot;:&quot;2020-02-01T14:49:36&quot;,&quot;actuality_status&quot;:&quot;actual&quot;,&quot;tag&quot;:&quot;shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide&quot;,&quot;supertag&quot;:&quot;shad/groups/2019/semester1/algorithms1/algorithmsstyleguide&quot;,&quot;url&quot;:&quot;/shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide&quot;,&quot;title&quot;:&quot;Styleguide&quot;,&quot;lang&quot;:&quot;&quot;,&quot;qr_url&quot;:&quot;https://disk.yandex.net/qr/?text=https%3A%2F%2Fwiki.yandex.ru%2Fshad%2Fgroups%2F2019%2FSemester1%2FAlgorithms1%2FAlgorithmsStyleguide%3FYzcrS1B1CWIoL24zR0hYTCpSR5k%2FgPUxSTHrqTFUFSroGhI%253D&quot;,&quot;with_new_wf&quot;:true,&quot;is_readonly&quot;:false,&quot;comments_count&quot;:5,&quot;comments_status&quot;:&quot;enabled&quot;,&quot;org&quot;:{&quot;dir_id&quot;:&quot;3668647&quot;,&quot;label&quot;:&quot;org-3668647&quot;,&quot;name&quot;:&quot;Яндекс.Школа&quot;,&quot;lang&quot;:&quot;ru&quot;},&quot;notifier&quot;:{},&quot;special&quot;:false,&quot;hasOldForm&quot;:false,&quot;redirectedFrom&quot;:&quot;/shad/AlgorithmsStyleguide/&quot;,&quot;bemjson&quot;:{&quot;html&quot;:&quot;&lt;div class=\&quot;wiki-doc wiki-doc_magiclinks_yes wiki-doc_wiki_yes woof wf-doc wf-doc_magiclinks_yes wf-doc_wiki_yes i-bem\&quot; data-woof=&#39;{\&quot;wiki-doc\&quot;:{}}&#39; data-wf=\&quot;{&amp;quot;user&amp;quot;:{&amp;quot;codeTheme&amp;quot;:&amp;quot;github&amp;quot;},&amp;quot;toc&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;depth&amp;quot;:2,&amp;quot;anchor&amp;quot;:&amp;quot;osnovnyepravila&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Основные правила&amp;quot;,&amp;quot;isMd&amp;quot;:false},{&amp;quot;type&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;depth&amp;quot;:3,&amp;quot;anchor&amp;quot;:&amp;quot;sintaksis&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Синтаксис&amp;quot;,&amp;quot;isMd&amp;quot;:false},{&amp;quot;type&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;depth&amp;quot;:3,&amp;quot;anchor&amp;quot;:&amp;quot;jazykc&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Язык C&amp;quot;,&amp;quot;isMd&amp;quot;:false},{&amp;quot;type&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;depth&amp;quot;:2,&amp;quot;anchor&amp;quot;:&amp;quot;organizacijakoda&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Организация кода&amp;quot;,&amp;quot;isMd&amp;quot;:false},{&amp;quot;type&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;depth&amp;quot;:3,&amp;quot;anchor&amp;quot;:&amp;quot;imena&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Имена&amp;quot;,&amp;quot;isMd&amp;quot;:false},{&amp;quot;type&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;depth&amp;quot;:2,&amp;quot;anchor&amp;quot;:&amp;quot;prodvinutyezamechanija&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;Продвинутые замечания&amp;quot;,&amp;quot;isMd&amp;quot;:false}],&amp;quot;wiki-attrs&amp;quot;:{&amp;quot;instance&amp;quot;:&amp;quot;business&amp;quot;,&amp;quot;platform&amp;quot;:&amp;quot;desktop&amp;quot;,&amp;quot;magiclinks_url&amp;quot;:&amp;quot;https://magiclinks.yandex.ru/magiclinks/v1/links/&amp;quot;,&amp;quot;tracker_url&amp;quot;:&amp;quot;https://tracker.yandex.ru/&amp;quot;,&amp;quot;staff_url&amp;quot;:&amp;quot;https://staff.yandex.ru/&amp;quot;,&amp;quot;forms_url&amp;quot;:&amp;quot;https://connect.yandex.ru/&amp;quot;,&amp;quot;schi_url&amp;quot;:&amp;quot;https://wf-biz.tools.yandex.ru/&amp;quot;,&amp;quot;wiki_url&amp;quot;:&amp;quot;https://wiki.yandex.ru&amp;quot;,&amp;quot;wiki_api_url&amp;quot;:&amp;quot;https://wiki-api.yandex.ru/&amp;quot;,&amp;quot;docviewer_url&amp;quot;:&amp;quot;https://docviewer.yandex.ru/&amp;quot;,&amp;quot;yastatic_url&amp;quot;:&amp;quot;//yastatic.net&amp;quot;,&amp;quot;useAJAX&amp;quot;:false,&amp;quot;remark&amp;quot;:{&amp;quot;markdown&amp;quot;:{&amp;quot;commonmark&amp;quot;:true},&amp;quot;woofmd&amp;quot;:{&amp;quot;actions&amp;quot;:[{&amp;quot;name&amp;quot;:&amp;quot;a&amp;quot;,&amp;quot;scope&amp;quot;:&amp;quot;inline&amp;quot;},{&amp;quot;name&amp;quot;:&amp;quot;anchor&amp;quot;,&amp;quot;scope&amp;quot;:&amp;quot;inline&amp;quot;},{&amp;quot;name&amp;quot;:&amp;quot;forms&amp;quot;,&amp;quot;scope&amp;quot;:&amp;quot;inline&amp;quot;},{&amp;quot;name&amp;quot;:&amp;quot;iframe&amp;quot;,&amp;quot;scope&amp;quot;:&amp;quot;block&amp;quot;},{&amp;quot;name&amp;quot;:&amp;quot;grid&amp;quot;,&amp;quot;scope&amp;quot;:&amp;quot;block&amp;quot;},{&amp;quot;name&amp;quot;:&amp;quot;tree&amp;quot;,&amp;quot;scope&amp;quot;:&amp;quot;block&amp;quot;},{&amp;quot;name&amp;quot;:&amp;quot;toc&amp;quot;,&amp;quot;scope&amp;quot;:&amp;quot;block&amp;quot;},{&amp;quot;name&amp;quot;:&amp;quot;mypages&amp;quot;,&amp;quot;scope&amp;quot;:&amp;quot;block&amp;quot;},{&amp;quot;name&amp;quot;:&amp;quot;mywatches&amp;quot;,&amp;quot;scope&amp;quot;:&amp;quot;block&amp;quot;},{&amp;quot;name&amp;quot;:&amp;quot;backlinks&amp;quot;,&amp;quot;scope&amp;quot;:&amp;quot;block&amp;quot;},{&amp;quot;name&amp;quot;:&amp;quot;tasks&amp;quot;,&amp;quot;scope&amp;quot;:&amp;quot;block&amp;quot;}]}},&amp;quot;extensions&amp;quot;:{},&amp;quot;code_theme&amp;quot;:&amp;quot;github&amp;quot;,&amp;quot;lang&amp;quot;:&amp;quot;ru&amp;quot;,&amp;quot;page_path&amp;quot;:&amp;quot;/shad/groups/2019/semester1/algorithms1/algorithmsstyleguide&amp;quot;}}\&quot; data-bem=\&quot;{&amp;quot;wf-doc&amp;quot;:{}}\&quot;&gt;&lt;fieldset class=\&quot;wiki-toc i-bem\&quot; data-woof=&#39;{\&quot;wiki-toc\&quot;:{}}&#39; data-wf=\&quot;{&amp;quot;data&amp;quot;:{},&amp;quot;indexes&amp;quot;:{&amp;quot;from&amp;quot;:null,&amp;quot;to&amp;quot;:null}}\&quot;&gt;&lt;legend class=\&quot;wiki-toc__title\&quot;&gt;Оглавление документа &lt;/legend&gt;&lt;div class=\&quot;wiki-tocitem wiki-tocitem_level_2 i-bem\&quot; data-woof=&#39;{\&quot;wiki-tocitem\&quot;:{\&quot;href\&quot;:\&quot;#osnovnyepravila\&quot;}}&#39;&gt;&lt;a class=\&quot;wiki-link\&quot; href=\&quot;#osnovnyepravila\&quot; title=\&quot;Основные правила\&quot;&gt;Основные правила&lt;/a&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-tocitem wiki-tocitem_level_3 i-bem\&quot; data-woof=&#39;{\&quot;wiki-tocitem\&quot;:{\&quot;href\&quot;:\&quot;#sintaksis\&quot;}}&#39;&gt;&lt;a class=\&quot;wiki-link\&quot; href=\&quot;#sintaksis\&quot; title=\&quot;Синтаксис\&quot;&gt;Синтаксис&lt;/a&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-tocitem wiki-tocitem_level_3 i-bem\&quot; data-woof=&#39;{\&quot;wiki-tocitem\&quot;:{\&quot;href\&quot;:\&quot;#jazykc\&quot;}}&#39;&gt;&lt;a class=\&quot;wiki-link\&quot; href=\&quot;#jazykc\&quot; title=\&quot;Язык C\&quot;&gt;Язык C&lt;/a&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-tocitem wiki-tocitem_level_2 i-bem\&quot; data-woof=&#39;{\&quot;wiki-tocitem\&quot;:{\&quot;href\&quot;:\&quot;#organizacijakoda\&quot;}}&#39;&gt;&lt;a class=\&quot;wiki-link\&quot; href=\&quot;#organizacijakoda\&quot; title=\&quot;Организация кода\&quot;&gt;Организация кода&lt;/a&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-tocitem wiki-tocitem_level_3 i-bem\&quot; data-woof=&#39;{\&quot;wiki-tocitem\&quot;:{\&quot;href\&quot;:\&quot;#imena\&quot;}}&#39;&gt;&lt;a class=\&quot;wiki-link\&quot; href=\&quot;#imena\&quot; title=\&quot;Имена\&quot;&gt;Имена&lt;/a&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-tocitem wiki-tocitem_level_2 i-bem\&quot; data-woof=&#39;{\&quot;wiki-tocitem\&quot;:{\&quot;href\&quot;:\&quot;#prodvinutyezamechanija\&quot;}}&#39;&gt;&lt;a class=\&quot;wiki-link\&quot; href=\&quot;#prodvinutyezamechanija\&quot; title=\&quot;Продвинутые замечания\&quot;&gt;Продвинутые замечания&lt;/a&gt;&lt;/div&gt;&lt;/fieldset&gt;&lt;h2 class=\&quot;wiki-head wf-head i-bem\&quot; data-woof=&#39;{\&quot;wiki-head\&quot;:{}}&#39; data-wf=\&quot;{&amp;quot;anchor&amp;quot;:&amp;quot;osnovnyepravila&amp;quot;,&amp;quot;section_local&amp;quot;:1,&amp;quot;includesPath&amp;quot;:[],&amp;quot;text&amp;quot;:&amp;quot;Основные правила&amp;quot;}\&quot; data-bem=\&quot;{&amp;quot;wf-head&amp;quot;:{}}\&quot;&gt;&lt;div class=\&quot;wiki-head__anchors\&quot;&gt;&lt;/div&gt;&lt;span class=\&quot;wiki-head__text\&quot;&gt;Основные правила&lt;/span&gt;&lt;div class=\&quot;wiki-head__anchor-link\&quot;&gt;&lt;/div&gt;&lt;/h2&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Прежде, чем писать какой-либо код, обязательно прочитайте C++ Style Guide, на нашем курсе мы требуем полного выполнения &lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://google.github.io/styleguide/cppguide.html\&quot; target=\&quot;_blank\&quot;&gt;Google C++ Style Guide&lt;/a&gt;&lt;/div&gt;&lt;details class=\&quot;wiki-cut i-bem\&quot; data-woof=&#39;{\&quot;wiki-cut\&quot;:{}}&#39;&gt;&lt;summary class=\&quot;wiki-cut__summary\&quot;&gt;&lt;span class=\&quot;wiki-cut__summary-inner\&quot;&gt;Какие пункты из Google C++ Style Guide наиболее важны:&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-up\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-down\&quot;&gt;&lt;/span&gt;&lt;/summary&gt;&lt;ul class=\&quot;wiki-list\&quot;&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Scoping&lt;/div&gt;&lt;ul class=\&quot;wiki-list\&quot;&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://google.github.io/styleguide/cppguide.html#Local_Variables\&quot; target=\&quot;_blank\&quot;&gt;Local Variables&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://google.github.io/styleguide/cppguide.html#Static_and_Global_Variables\&quot; target=\&quot;_blank\&quot;&gt;Static and Global Variables&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Classes&lt;/div&gt;&lt;ul class=\&quot;wiki-list\&quot;&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://google.github.io/styleguide/cppguide.html#Doing_Work_in_Constructors\&quot; target=\&quot;_blank\&quot;&gt;Doing Work in Constructors&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://google.github.io/styleguide/cppguide.html#Implicit_Conversions\&quot; target=\&quot;_blank\&quot;&gt;Implicit Conversions&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://google.github.io/styleguide/cppguide.html#Structs_vs._Classes\&quot; target=\&quot;_blank\&quot;&gt;Structs vs. Classes&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://google.github.io/styleguide/cppguide.html#Access_Control\&quot; target=\&quot;_blank\&quot;&gt;Access Control&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://google.github.io/styleguide/cppguide.html#Declaration_Order\&quot; target=\&quot;_blank\&quot;&gt;Declaration Order&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Functions&lt;/div&gt;&lt;ul class=\&quot;wiki-list\&quot;&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://google.github.io/styleguide/cppguide.html#Function_Parameter_Ordering\&quot; target=\&quot;_blank\&quot;&gt;Parameter Ordering&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://google.github.io/styleguide/cppguide.html#Write_Short_Functions\&quot; target=\&quot;_blank\&quot;&gt;Write Short Functions&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://google.github.io/styleguide/cppguide.html#Reference_Arguments\&quot; target=\&quot;_blank\&quot;&gt;Reference Arguments&lt;/a&gt; (с оговоркой про выходные параметры примитивных типов в &lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;https://wiki.school.yandex.ru/shad/groups/2016/Semester1/Algorithms1/Styleguide/#jazykc\&quot; target=\&quot;_blank\&quot;&gt;п. 14&lt;/a&gt;)&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Other C++ Features&lt;/div&gt;&lt;ul class=\&quot;wiki-list\&quot;&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://google.github.io/styleguide/cppguide.html#Casting\&quot; target=\&quot;_blank\&quot;&gt;Casting&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://google.github.io/styleguide/cppguide.html#Preincrement_and_Predecrement\&quot; target=\&quot;_blank\&quot;&gt;Preincrement and Predecrement&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://google.github.io/styleguide/cppguide.html#Use_of_const\&quot; target=\&quot;_blank\&quot;&gt;Use of const&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://google.github.io/styleguide/cppguide.html#Use_of_constexpr\&quot; target=\&quot;_blank\&quot;&gt;Use of constexpr&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://google.github.io/styleguide/cppguide.html#Integer_Types\&quot; target=\&quot;_blank\&quot;&gt;Integer Types&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://google.github.io/styleguide/cppguide.html#0_and_nullptr/NULL\&quot; target=\&quot;_blank\&quot;&gt;0 and nullptr/NULL&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://google.github.io/styleguide/cppguide.html#auto\&quot; target=\&quot;_blank\&quot;&gt;auto&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://google.github.io/styleguide/cppguide.html#Braced_Initializer_List\&quot; target=\&quot;_blank\&quot;&gt;Braced Initializer List&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://google.github.io/styleguide/cppguide.html#Lambda_expressions\&quot; target=\&quot;_blank\&quot;&gt;Lambda Expressions&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://google.github.io/styleguide/cppguide.html#Naming\&quot; target=\&quot;_blank\&quot;&gt;Naming&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://google.github.io/styleguide/cppguide.html#Formatting\&quot; target=\&quot;_blank\&quot;&gt;Formatting&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/details&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Ваша задача на этом курсе — написать наиболее простой, понятный, читаемый и гибкий код среди тех, которые проходят ограничения по времени и по памяти. То есть в первую очередь должна быть правильной асимптотическая сложность, а потом сразу же думайте, как все сделать максимально просто.&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;strong class=\&quot;wiki-bold\&quot;&gt;Боритесь с дублированием кода&lt;/strong&gt;&lt;br/&gt;&lt;ins class=\&quot;wiki-underline\&quot;&gt;&lt;strong class=\&quot;wiki-bold\&quot;&gt;Это самое большое возможное зло&lt;/strong&gt;&lt;/ins&gt;. Если в процессе написания вам понадобилось копировать и вставить кусок своего кода в этот же код, то это первый признак того, что происходит дублирование. Постарайтесь детектировать идентичные и похожие места, вынесите общую часть в отдельную функцию или класс и воспользуйтесь ей дважды с разными аргументами.&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;strong class=\&quot;wiki-bold\&quot;&gt;Старайтесь писать аккуратно&lt;/strong&gt;&lt;br/&gt;Удаляйте лишний, неиспользуемый, закомментированный код, удаляйте переменные и функции, которые вам на самом деле не нужны, остальные называйте понятно.&lt;/div&gt;&lt;h3 class=\&quot;wiki-head wf-head i-bem\&quot; data-woof=&#39;{\&quot;wiki-head\&quot;:{}}&#39; data-wf=\&quot;{&amp;quot;anchor&amp;quot;:&amp;quot;sintaksis&amp;quot;,&amp;quot;section_local&amp;quot;:2,&amp;quot;includesPath&amp;quot;:[],&amp;quot;text&amp;quot;:&amp;quot;Синтаксис&amp;quot;}\&quot; data-bem=\&quot;{&amp;quot;wf-head&amp;quot;:{}}\&quot;&gt;&lt;div class=\&quot;wiki-head__anchors\&quot;&gt;&lt;/div&gt;&lt;span class=\&quot;wiki-head__text\&quot;&gt;Синтаксис&lt;/span&gt;&lt;div class=\&quot;wiki-head__anchor-link\&quot;&gt;&lt;/div&gt;&lt;/h3&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;На код должно быть приятно смотреть, его должно быть легко читать. Вы его пишете один раз, сохраняете, после чего его читают много раз, поэтому выгодно потратить при написании немного времени на приведение кода в порядок, чтобы впоследствии сократить своё и чужое время на чтение.\\&lt;br/&gt;Простые правила ниже служат для улучшения визуального восприятия.&lt;/div&gt;&lt;ul class=\&quot;wiki-list\&quot;&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Используйте 4 пробела для отступа. Данный размер отступа является наиболее распространенным, требуется на курсе C++, поэтому используйте его всюду для единообразия. 4 пробела также является оптимальным размером для отступа согласно &lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://homepages.inf.ed.ac.uk/dts/pm/Papers/nasa-c-style.pdf\&quot; target=\&quot;_blank\&quot;&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-file-alt\&quot;&gt;&lt;/span&gt;NASA&lt;/a&gt;.&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Вокруг всех бинарных операторов (&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;=, ==, +, -, *, /, &amp;gt;, &amp;lt;&amp;lt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt; и др.) должны быть пробелы с обеих сторон. Исключением являются операторы &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;., -&amp;gt;, ::&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;.&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;После запятой должен быть пробел.&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Между закрывающейся круглой скобкой и открывающейся фигурной должен быть пробел.&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Не жадничайте с пустыми строками. Вставляйте всегда пустые строки между определениями глобальных функций, классов, констант, typedef&#39;ов, include&#39;ов, между объявлениями методов и функций, между реализациями функций, между объявлениями классов и реализациями функций и т.д.&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Вставляйте пустые строки в код реализации функций, чтобы подчеркнуть разделение логических частей кода.&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Не размещайте if, else, for, while и др. на одной строке со своим statement:&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_multiline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;&lt;pre class=\&quot;b-page-code__pre\&quot;&gt;if (condition) statement;\nelse statement;\n...\nfor (...) statement;\n&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Это, во-первых, ухудшает читаемость кода. Вы можете вообще один из statement&#39;ов не заметить или ошибочно решить, что он относится к if&#39;у:&lt;/div&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;if (number % 2 == 0) std::cout &amp;lt;&amp;lt; \&quot;Even\\n\&quot;; even = true;\n&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;А во-вторых, при отладке debugger&#39;ом невозможно понять, выполнив команду \&quot;Step Over\&quot;, выполнилось или не выполнилось условие (или сколько итераций цикла прошло).&lt;/div&gt;&lt;ul class=\&quot;wiki-list\&quot;&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Также рекомендуется всегда обрамлять &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;if, else, for, while&lt;/code&gt;&lt;/div&gt;&lt;/div&gt; фигурными скобками:&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_multiline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;&lt;pre class=\&quot;b-page-code__pre\&quot;&gt;for (int index = 0; index &amp;lt; array.size(); ++index) {\n    statement1;\n    statement2;\n    ...\n}\n&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_multiline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;&lt;pre class=\&quot;b-page-code__pre\&quot;&gt;for (auto number : array) {\n    statement1;\n    statement2;\n    ...\n}\n&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;даже если внутри только один &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;statement&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;.&lt;/div&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_multiline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;&lt;pre class=\&quot;b-page-code__pre\&quot;&gt;if (number % 2 == 0) {\n    std::cout &amp;lt;&amp;lt; \&quot;Even\\n\&quot;;\n}\n&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Это более читаемо и безопасно. В варианте без скобок легко ошибиться, например, вот так:&lt;/div&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_multiline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;&lt;pre class=\&quot;b-page-code__pre\&quot;&gt;if (number % 2 == 0)\n    std::cout &amp;lt;&amp;lt; \&quot;Even\\n\&quot;;\n    even = true;\n&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Легко подумать, что код &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;even = true;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt; тоже находится под if&#39;ом.&lt;/div&gt;&lt;h3 class=\&quot;wiki-head wf-head i-bem\&quot; data-woof=&#39;{\&quot;wiki-head\&quot;:{}}&#39; data-wf=\&quot;{&amp;quot;anchor&amp;quot;:&amp;quot;jazykc&amp;quot;,&amp;quot;section_local&amp;quot;:3,&amp;quot;includesPath&amp;quot;:[],&amp;quot;text&amp;quot;:&amp;quot;Язык C&amp;quot;}\&quot; data-bem=\&quot;{&amp;quot;wf-head&amp;quot;:{}}\&quot;&gt;&lt;div class=\&quot;wiki-head__anchors\&quot;&gt;&lt;/div&gt;&lt;span class=\&quot;wiki-head__text\&quot;&gt;Язык C++&lt;/span&gt;&lt;div class=\&quot;wiki-head__anchor-link\&quot;&gt;&lt;/div&gt;&lt;/h3&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Существуют разные языки программирования: C, C++, Java, Python и великое множество других. Между ними есть очевидные внешние сходства и различия: как написать цикл, как определить оператор, как создать класс. Однако основные их отличия кроются в принятых в них методах решения типовых задач и инструментах: если писать цикл по индексу, то какие должны быть его границы? если определить оператор, каков должен быть тип принимаемых аргументов и возвращаемого значения? если создавать класс, какие переменные-члены стоит в нем определять, какие методы, что следует вынести во внешние функции? На все эти вопросы можно дать разные ответы, и все они будут отчасти верными. Есть и общие рекомендации и конструкции, которые зарекомендовали себя за долгое время использования, как надежные и удобные, а также примеры, как делать не надо. Некоторые из них описаны в этом разделе.&lt;/div&gt;&lt;ol class=\&quot;wiki-list wiki-list_list-type_decimal\&quot; start=\&quot;1\&quot;&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;using namespace std;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt; использовать &lt;details class=\&quot;wiki-cut i-bem\&quot; data-woof=&#39;{\&quot;wiki-cut\&quot;:{}}&#39;&gt;&lt;summary class=\&quot;wiki-cut__summary\&quot;&gt;&lt;span class=\&quot;wiki-cut__summary-inner\&quot;&gt;нельзя.&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-up\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-down\&quot;&gt;&lt;/span&gt;&lt;/summary&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Включать целый namespace опасно, так как из-за этого может возникнуть конфликт имен. Вследствие чего могут возникнуть нетривиальные ошибки компиляции/линковки, а если не повезет, то переменная из namespace может совпасть по названию с какой-то вашей переменной, про которую вы не помните ее область видимости, что приведет к еще более сложнонаходимым багам, хоть все и скомпилируется, но иногда вы будете использовать переменную, думая, что это ваша переменная, и в ней такое-то значение, а значение будет совсем другим. Если нужно использовать много раз &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;std::vector&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;, напишите &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;using std::vector;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt; если &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;cout&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;, то &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;using std::cout;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt; и т.д. Кроме того, включая &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;namespace&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;, вы нарушаете сам принцип использования namespace&#39;ов.&lt;/div&gt;&lt;/details&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Использовать массивы фиксированной длины &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;int[]&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;, &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;int*&lt;/code&gt;&lt;/div&gt;&lt;/div&gt; не рекомендуется - используйте вместо них &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;std::vector&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;.&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Не используйте C-type строки &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;char[]&lt;/code&gt;&lt;/div&gt;&lt;/div&gt; и &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;char*&lt;/code&gt;&lt;/div&gt;&lt;/div&gt; - используйте вместо них &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;std::string&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;.&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-block\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Не используйте ввод-вывод в стиле С через функции &lt;details class=\&quot;wiki-cut i-bem\&quot; data-woof=&#39;{\&quot;wiki-cut\&quot;:{}}&#39;&gt;&lt;summary class=\&quot;wiki-cut__summary\&quot;&gt;&lt;span class=\&quot;wiki-cut__summary-inner\&quot;&gt;scanf, printf:&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-up\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-down\&quot;&gt;&lt;/span&gt;&lt;/summary&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Используйте вместо них операторы &amp;gt;&amp;gt; и &amp;lt;&amp;lt; у &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;std::cin&lt;/code&gt;&lt;/div&gt;&lt;/div&gt; и &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;std::cout&lt;/code&gt;&lt;/div&gt;&lt;/div&gt; соответственно. Если при этом в задаче большой размер ввода-вывода (от 100000 чисел), то необходимо использовать несколько дополнительных приемов, чтобы ваш ввод-вывод работал достаточно быстро, иначе вы можете получить Time Limit Exceeded. Эти приемы описаны ниже.&lt;/div&gt;&lt;/details&gt;&lt;/div&gt;&lt;details class=\&quot;wiki-cut i-bem\&quot; data-woof=&#39;{\&quot;wiki-cut\&quot;:{}}&#39;&gt;&lt;summary class=\&quot;wiki-cut__summary\&quot;&gt;&lt;span class=\&quot;wiki-cut__summary-inner\&quot;&gt;Пример на пункты 1 -- 4:&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-up\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-down\&quot;&gt;&lt;/span&gt;&lt;/summary&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_multiline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__line-numbers c++\&quot;&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;1&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;2&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;3&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;4&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;5&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;6&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;7&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;8&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;9&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;10&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;11&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;12&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;13&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;14&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;15&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;16&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;17&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;18&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;19&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;20&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;21&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;22&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;23&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;24&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;25&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;26&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;27&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;28&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;29&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;30&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;31&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;32&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;33&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;34&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;35&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;36&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;37&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;38&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;39&lt;/div&gt;&lt;/code&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;&lt;pre class=\&quot;b-page-code__pre\&quot;&gt;#include &amp;lt;algorithm&amp;gt;\n#include &amp;lt;string&amp;gt;\n#include &amp;lt;vector&amp;gt;\n\nusing std::string;\nusing std::vector;\n\nvector&amp;lt;string&amp;gt; Input() {\n    size_t rows;\n    std::cin &amp;gt;&amp;gt; rows;\n    vector&amp;lt;string&amp;gt; table;\n    table.reserve(rows);\n    for (size_t row = 0; row &amp;lt; rows; ++row) {\n        std::string line;\n        std::cin &amp;gt;&amp;gt; line;\n        table.push_back(line);\n    }\n    return table;\n}\n\nvector&amp;lt;string&amp;gt; Process(vector&amp;lt;string&amp;gt; table) {\n    std::reverse(table.begin(), table.end());\n    return table;\n}\n\nvoid Output(const vector&amp;lt;string&amp;gt;&amp;amp; table) {\n    for (const auto&amp;amp; row : table) {\n        std::cout &amp;lt;&amp;lt; row &amp;lt;&amp;lt; std::endl;\n    }\n}\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    const auto&amp;amp; table = Input();\n    table = Process(table);\n    Output(table);\n    return 0;\n}\n&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;/details&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;span class=\&quot;wiki-remark wiki-remark_color_red\&quot;&gt;Важно&lt;/span&gt; По умолчанию для &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;iostream&lt;/code&gt;&lt;/div&gt;&lt;/div&gt; включен режим совместимости с &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;stdio&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;, который позволяет одновременно использовать оба интерфейса для ввода/вывода. В этом режиме производительность &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;std::cin&lt;/code&gt;&lt;/div&gt;&lt;/div&gt; и &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;std::cout&lt;/code&gt;&lt;/div&gt;&lt;/div&gt; понижается в несколько раз. &lt;details class=\&quot;wiki-cut i-bem\&quot; data-woof=&#39;{\&quot;wiki-cut\&quot;:{}}&#39;&gt;&lt;summary class=\&quot;wiki-cut__summary\&quot;&gt;&lt;span class=\&quot;wiki-cut__summary-inner\&quot;&gt;Подробнее&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-up\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-down\&quot;&gt;&lt;/span&gt;&lt;/summary&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Поэтому если размер ввода/вывода имеет порядок от 100000 чисел, вам надо будет отключить этот режим. Делать это надо до совершения каких-либо операций ввода-вывода, желательно первой же строкой в программе:&lt;/div&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_multiline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;&lt;pre class=\&quot;b-page-code__pre\&quot;&gt;#include &amp;lt;iostream&amp;gt;\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    ...\n    return 0;\n}\n&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Также обратите внимание на то, что &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;std::cout&lt;/code&gt;&lt;/div&gt;&lt;/div&gt; может работать слишком медленно, если вы выводите порядка 100000 чисел или более, и при этом у &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;std::cout&lt;/code&gt;&lt;/div&gt;&lt;/div&gt; регулярно очищается буфер. Буфер очищается при каждом выводе &lt;tt class=\&quot;wiki-monospace\&quot;&gt;std::endl&lt;/tt&gt;, так что в случае большого вывода лучше выводить &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;\&quot;\\n\&quot;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt; вместо &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;std::endl&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;. Также буфер &lt;tt class=\&quot;wiki-monospace\&quot;&gt;std::cout&lt;/tt&gt; очищается при каждом вводе через &lt;tt class=\&quot;wiki-monospace\&quot;&gt;std::cin&lt;/tt&gt; &lt;br/&gt; это связано с тем, что при пользовательском вводе-выводе через обычный &lt;tt class=\&quot;wiki-monospace\&quot;&gt;std::cin&lt;/tt&gt; и &lt;tt class=\&quot;wiki-monospace\&quot;&gt;std::cout&lt;/tt&gt; в консоли необходимо перед тем, как запрашивать очередной ввод от пользователя, показать ему последний вывод перед этим, а значит и очистить буфер. Эта проблема для задач с большим выводом решается с помощью вызова &lt;tt class=\&quot;wiki-monospace\&quot;&gt;std::cin.tie(nullptr);&lt;/tt&gt; в самом начале программы. Выполнение всех этих рекомендаций приведет к тому, что ввод-вывод при помощи потоков &lt;tt class=\&quot;wiki-monospace\&quot;&gt;std::cin&lt;/tt&gt; и &lt;tt class=\&quot;wiki-monospace\&quot;&gt;std::cout&lt;/tt&gt; будет работать не медленнее ввода-вывода через &lt;tt class=\&quot;wiki-monospace\&quot;&gt;printf&lt;/tt&gt; и &lt;tt class=\&quot;wiki-monospace\&quot;&gt;scanf&lt;/tt&gt; на задачах с большим вводом-выводом. Подробнее см. &lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://stackoverflow.com/questions/9274057\&quot; target=\&quot;_blank\&quot;&gt;здесь&lt;/a&gt;&lt;/div&gt;&lt;/details&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Если используется значение типа истина/ложь, то используйте тип &lt;tt class=\&quot;wiki-monospace\&quot;&gt;bool&lt;/tt&gt;, а не &lt;tt class=\&quot;wiki-monospace\&quot;&gt;int&lt;/tt&gt;.&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-block\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Не используйте тип &lt;tt class=\&quot;wiki-monospace\&quot;&gt;long&lt;/tt&gt;. &lt;details class=\&quot;wiki-cut i-bem\&quot; data-woof=&#39;{\&quot;wiki-cut\&quot;:{}}&#39;&gt;&lt;summary class=\&quot;wiki-cut__summary\&quot;&gt;&lt;span class=\&quot;wiki-cut__summary-inner\&quot;&gt;Подробнее&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-up\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-down\&quot;&gt;&lt;/span&gt;&lt;/summary&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Более стандартный тип -- &lt;tt class=\&quot;wiki-monospace\&quot;&gt;int&lt;/tt&gt;, к нему у всех уже привыкли глаза, и &lt;tt class=\&quot;wiki-monospace\&quot;&gt;long&lt;/tt&gt; с теми же намерениями -- просто смотрится странно. На 32-битных машинах оба типа являются 32-битными и ничем не отличаются, поэтому используйте &lt;tt class=\&quot;wiki-monospace\&quot;&gt;int&lt;/tt&gt; вместо &lt;tt class=\&quot;wiki-monospace\&quot;&gt;long&lt;/tt&gt;. Если вам нужен 64-битный тип, придется воспользоваться типом &lt;tt class=\&quot;wiki-monospace\&quot;&gt;int64_t&lt;/tt&gt;.&lt;/div&gt;&lt;/details&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;При прочих равных, используйте преинкремент &lt;tt class=\&quot;wiki-monospace\&quot;&gt;++i&lt;/tt&gt;, а не постинкремент &lt;tt class=\&quot;wiki-monospace\&quot;&gt;i++&lt;/tt&gt;. Это полезная привычка. В случае int&#39;ов это все равно, но если у вас будет в коде сложный итератор, то в процессе постинкремента создается его копия в памяти, что может создать вам неожиданные тормоза и повышенное использование памяти, а догадаться о том, что вся проблема -- в коротком выражении &lt;tt class=\&quot;wiki-monospace\&quot;&gt;it++&lt;/tt&gt; -- будет сложно.&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;tt class=\&quot;wiki-monospace\&quot;&gt;main&lt;/tt&gt; должен заканчиваться &lt;tt class=\&quot;wiki-monospace\&quot;&gt;return 0;&lt;/tt&gt;, в противном случае на некоторых компиляторах программа может завершиться с ненулевым кодом возврата, что в свою очередь приводит к Run-time error в тестирующей системе.&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-block\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Вставляйте слово &lt;tt class=\&quot;wiki-monospace\&quot;&gt;const&lt;/tt&gt; везде, где только это возможно по смыслу. &lt;details class=\&quot;wiki-cut i-bem\&quot; data-woof=&#39;{\&quot;wiki-cut\&quot;:{}}&#39;&gt;&lt;summary class=\&quot;wiki-cut__summary\&quot;&gt;&lt;span class=\&quot;wiki-cut__summary-inner\&quot;&gt;Подробнее&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-up\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-down\&quot;&gt;&lt;/span&gt;&lt;/summary&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Если какая-то переменная по сути меняться в функции не должна, она должна быть &lt;tt class=\&quot;wiki-monospace\&quot;&gt;const&lt;/tt&gt;. Если метод класса не меняет при вызове содержимое класса, он должен быть &lt;tt class=\&quot;wiki-monospace\&quot;&gt;const&lt;/tt&gt;-методом. Таким образом вы обезопасите себя от многих глупых ошибок: они отловятся еще на этапе компиляции.&lt;br/&gt;Если у вас из-за того, что вы где-то поставили в правильном месте &lt;tt class=\&quot;wiki-monospace\&quot;&gt;const&lt;/tt&gt;, не компилируется код, то &lt;tt class=\&quot;wiki-monospace\&quot;&gt;const&lt;/tt&gt; выполнил свою главную задачу. Тогда надо не его убирать, а найти и исправить проблему в другом месте: вы где-то еще забыли поставить &lt;tt class=\&quot;wiki-monospace\&quot;&gt;const&lt;/tt&gt; или изменяете переменную, которую не собирались изменять. Надо в этом разобраться, доставить &lt;tt class=\&quot;wiki-monospace\&quot;&gt;const&lt;/tt&gt; туда, где он еще нужен, а не удалять там, где он вам \&quot;мешает\&quot;.&lt;/div&gt;&lt;/details&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-block\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Используйте везде в программе индексацию с нуля. &lt;details class=\&quot;wiki-cut i-bem\&quot; data-woof=&#39;{\&quot;wiki-cut\&quot;:{}}&#39;&gt;&lt;summary class=\&quot;wiki-cut__summary\&quot;&gt;&lt;span class=\&quot;wiki-cut__summary-inner\&quot;&gt;Подробнее&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-up\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-down\&quot;&gt;&lt;/span&gt;&lt;/summary&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Если какие-то входные или выходные данные в задаче используют индексацию с единицы, лучше в функции ввода, соответственно вывода, переведите индексацию из одной системы в другую, а везде внутри программы, помимо функций ввода и вывода пользуйтесь индексацией с нуля. Весь язык C++ так спроектирован, что индексация с нуля гораздо удобнее, а как только вы начинаете использовать индексацию с единицы, становится неудобно, появляются вычитания единицы из переменных по всему коду и т.д.&lt;/div&gt;&lt;/details&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Задумывайтесь о переполнениях типов. Если у вас есть две переменные типа &lt;tt class=\&quot;wiki-monospace\&quot;&gt;int&lt;/tt&gt;, значение каждой равно миллиону, и вы их перемножаете, то тип переполнится (максимальное значение -- 2&lt;sup class=\&quot;wiki-superscript\&quot;&gt;31&lt;/sup&gt; - 1), и вы получите неправильный результат. Необходимо перед перемножением привести обе переменные к 64-битному типу &lt;tt class=\&quot;wiki-monospace\&quot;&gt;int64_t&lt;/tt&gt;. Если у вас есть две &lt;tt class=\&quot;wiki-monospace\&quot;&gt;int&lt;/tt&gt; переменные со значением два миллиарда и вы их складываете, -- тоже произойдет переполнение, тоже нужно предварительно приводить к &lt;tt class=\&quot;wiki-monospace\&quot;&gt;int64_t&lt;/tt&gt;.&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-block\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Не вычитайте никогда просто так ничего из &lt;tt class=\&quot;wiki-monospace\&quot;&gt;container.size()&lt;/tt&gt;, где &lt;tt class=\&quot;wiki-monospace\&quot;&gt;container&lt;/tt&gt; --  какой-нибудь контейнер из STL. &lt;details class=\&quot;wiki-cut i-bem\&quot; data-woof=&#39;{\&quot;wiki-cut\&quot;:{}}&#39;&gt;&lt;summary class=\&quot;wiki-cut__summary\&quot;&gt;&lt;span class=\&quot;wiki-cut__summary-inner\&quot;&gt;Подробнее&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-up\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-down\&quot;&gt;&lt;/span&gt;&lt;/summary&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Например, &lt;tt class=\&quot;wiki-monospace\&quot;&gt;vector.size()&lt;/tt&gt; возвращает беззнаковый &lt;tt class=\&quot;wiki-monospace\&quot;&gt;size_t&lt;/tt&gt; (который обычно просто синоним для &lt;tt class=\&quot;wiki-monospace\&quot;&gt;unsigned long&lt;/tt&gt;), и если вы будете из него вычитать, то можете легко получить переполнение. Например, если вектор пустой, а вы вычитаете единицу, чтобы узнать последний элемент, или вектор состоит только из одного элемента, а вы вычитаете 2, чтобы узнать предпоследний элемент, и т.д. Всегда приводите результат вызова &lt;tt class=\&quot;wiki-monospace\&quot;&gt;size()&lt;/tt&gt; к int&#39;у, если вам совершенно необходимо вычесть из &lt;tt class=\&quot;wiki-monospace\&quot;&gt;size()&lt;/tt&gt;. При этом в самом распространенном случае,&lt;br/&gt;когда вам нужно написать цикл &lt;tt class=\&quot;wiki-monospace\&quot;&gt;for&lt;/tt&gt;, проходящий по всем элементам, кроме, скажем, последних десяти, надо просто писать не так&lt;br/&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_multiline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;&lt;pre class=\&quot;b-page-code__pre\&quot;&gt;)\n// Wrong! If container.size() &amp;lt; 10, you&#39;ll get an infinite cycle.\nfor (int index = 0; index &amp;lt; container.size() - 10; ++index) {\n    ...\n}\n&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;В этом цикле, если, к примеру, &lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code no-highlight\&quot;&gt;container.size() == 5&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;, то вы получаете реально цикл&lt;/div&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_multiline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;&lt;pre class=\&quot;b-page-code__pre\&quot;&gt;// Note that 4294967291 &amp;gt; MAX_INT, so the cycle is infinite\nfor (int index = 0; index &amp;lt; 4294967291; ++index) {\n    ...\n}\n&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;А пишите лучше всегда так&lt;/div&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_multiline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;&lt;pre class=\&quot;b-page-code__pre\&quot;&gt;// Correct: adding to int\nfor (int index = 0; index + 10 &amp;lt; container.size(); ++index) {\n    ...\n}\n&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;ну или хотя бы так&lt;/div&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_multiline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;&lt;pre class=\&quot;b-page-code__pre\&quot;&gt;// Correct: casted to int\nfor (int index = 0; index &amp;lt; static_cast&amp;lt;int&amp;gt;(container.size()) - 10; ++index) {\n    ...\n}\n&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Соответственно, если вам нужно вызвать функцию, в которую вы должны передать индекс первого и последнего элемента вектора, то делайте это так:&lt;/div&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;SomeFunction(0, static_cast&amp;lt;int&amp;gt;(container.size()) - 1)\n&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;По-хорошему, здесь надо бы еще проверять, что в контейнере что-то есть, но к int&#39;у приводить надо в любом случае, иначе появляются неочевидные баги.&lt;/div&gt;&lt;/details&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-block\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Не пользуйтесь макросами для определения констант. &lt;details class=\&quot;wiki-cut i-bem\&quot; data-woof=&#39;{\&quot;wiki-cut\&quot;:{}}&#39;&gt;&lt;summary class=\&quot;wiki-cut__summary\&quot;&gt;&lt;span class=\&quot;wiki-cut__summary-inner\&quot;&gt;Подробнее&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-up\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-down\&quot;&gt;&lt;/span&gt;&lt;/summary&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Макросы — это очень опасная и неудобная вещь. Их раскрывает специальный препроцессор, который начинает работать еще до компилятора C&lt;small class=\&quot;wiki-small\&quot;&gt;, и он ничего не знает о самом языке. Все конструкции раскрываются буквально. В связи с этим есть множество возможных неочевидных побочных эффектов, а у компилятора нет возможности выполнить проверку типов, константность и т.д. Читайте более подробно об этом в книге Майерса «Effective C&lt;/small&gt;».&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Итак, неправильный вариант:&lt;/div&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;#define MAX_LENGTH 100000  // Wrong! Don&#39;t use macros!\n&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Правильный вариант:&lt;/div&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;constexpr int kMaxLegth = 100000;  // Correct\n&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;/details&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-block\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Входные параметры передавайте в функцию по константной ссылке; по ссылке — чтобы они лишний раз не копировались, по константной — чтобы вы не могли их случайно изменить. &lt;strong class=\&quot;wiki-bold\&quot;&gt;Не забывайте про const!&lt;/strong&gt; Выходные параметры передавайте в функции по указателю — чтобы вы могли их изменить; по указателю, а не по ссылке, — чтобы вы могли в месте вызова отличить входные параметры от выходных по амперсанду перед именем переменной. Размещайте входные параметры перед выходными в списке параметров функции или метода.&lt;br/&gt;Аргументы примитивных типов следует передавать в функции по-другому. Входные параметры типов &lt;tt class=\&quot;wiki-monospace\&quot;&gt;int&lt;/tt&gt;, &lt;tt class=\&quot;wiki-monospace\&quot;&gt;char&lt;/tt&gt;, &lt;tt class=\&quot;wiki-monospace\&quot;&gt;bool&lt;/tt&gt;, &lt;tt class=\&quot;wiki-monospace\&quot;&gt;double&lt;/tt&gt; передавайте по значению. Они будут копироваться, но это так же почти бесплатно, как и в случае ссылок или указателей. При этом вы не сможете их изменить изнутри функции, что и нужно, т.к. это входные параметры. Если вам нужны эти типы как выходные параметры функции, лучше передавайте их по ссылке, т.к. иначе легко внутри функции перепутать указатель на переменную с самой переменной, и сделать совсем не то, что вы собирались.&lt;/div&gt;&lt;details class=\&quot;wiki-cut i-bem\&quot; data-woof=&#39;{\&quot;wiki-cut\&quot;:{}}&#39;&gt;&lt;summary class=\&quot;wiki-cut__summary\&quot;&gt;&lt;span class=\&quot;wiki-cut__summary-inner\&quot;&gt;Примеры:&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-up\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-down\&quot;&gt;&lt;/span&gt;&lt;/summary&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_multiline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__line-numbers c++\&quot;&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;1&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;2&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;3&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;4&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;5&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;6&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;7&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;8&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;9&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;10&lt;/div&gt;&lt;/code&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;&lt;pre class=\&quot;b-page-code__pre\&quot;&gt;void Input(std::vector&amp;lt;point&amp;gt;* sequence, int&amp;amp; points_to_cover);\n\nvoid FindMaximumsInSlidingWindow(\n    const std::vector&amp;lt;int&amp;gt;&amp;amp; sequence, \n    const std::string&amp;amp; shifts, \n    vector&amp;lt;int&amp;gt;* maximums);\n\ndouble FindMinimumCoveringCircleRadius(\n    const std::vector&amp;lt;point&amp;gt;&amp;amp; points, \n    int points_to_cover);\n&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Примеры вызовов:&lt;/div&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_multiline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__line-numbers c++\&quot;&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;1&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;2&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;3&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;4&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;5&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;6&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;7&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;8&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;9&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;10&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;11&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;12&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;13&lt;/div&gt;&lt;/code&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;&lt;pre class=\&quot;b-page-code__pre\&quot;&gt;std::vector&amp;lt;int&amp;gt; sequence;\nint points_to_cover;\nInput(&amp;amp;sequence, points_to_cover);\n...\n...\nstd::vector&amp;lt;int&amp;gt; sequence;\nstd::string shifts;\nInput(&amp;amp;sequence, &amp;amp;shifts);\nstd::vector&amp;lt;int&amp;gt; maximums;\nFindMaximumsInSlidingWindow(sequence, shifts, &amp;amp;maximums);\n...\n...\ndouble min_radius = FindMinimumCoveringRadius(points, points_to_cover);\n&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Обратите внимание на амперсанды &amp;amp; перед переменными, в которые записывается результат вызова функции.&lt;br/&gt;Если функция возвращает одну величину, пусть она делает это по значению. Это столь же быстро, зато удобнее в месте вызова.&lt;br/&gt;Пример:&lt;/div&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_multiline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__line-numbers c++\&quot;&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;1&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;2&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;3&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;4&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;5&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;6&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;7&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;8&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;9&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;10&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;11&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;12&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;13&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;14&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;15&lt;/div&gt;&lt;/code&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;&lt;pre class=\&quot;b-page-code__pre\&quot;&gt;std::vector&amp;lt;int&amp;gt; ReadNumbers(std::istream&amp;amp; input_stream = std::cin) {\n    size_t sequence_length;\n    input_stream &amp;gt;&amp;gt; sequence_length;\n    std::vector&amp;lt;int&amp;gt; numbers(sequence_length);\n    for (size_t i = 0; i &amp;lt; numbers.size(); ++i) {\n        input_stream &amp;gt;&amp;gt; numbers[i];\n    }\n    return numbers;\n}\n\nint main() {\n    std::vector&amp;lt;int&amp;gt; first_sequence = ReadNumbers();\n    std::vector&amp;lt;int&amp;gt; second_sequence = ReadNumbers();\n    ...\n}\n&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Лишнего копирования в этом месте не возникнет. Дело в том, что эта операция настолько часто встречается, что компиляторы научились ее распознавать и генерировать эффективный код для нее. Технология называется return value optimization, известна также под своей аббревиатурой RVO. Можно и следует по умолчанию считать, что она есть и исправно работает, и писать код так, чтобы им было удобнее пользоваться. Чтобы узнать об этом более подробно, поищите в вашем любимом поисковике ее описание по названию.&lt;br/&gt;Если переданный на вход параметр для выполнения алгоритма необходимо изменять, -- это не означает, что параметр автоматически становится выходным параметром. Если целью алгоритма не является менять входной параметр, то изменять этот параметр функция не должна: пользователь алгоритма этого не ожидает, и будет очень не рад такому побочному эффекту. Кроме того, если просто передать параметр по ссылке и поменять его внутри, то пользователь даже не будет догадываться о том, что переданные им данные будут изменены. Появляющиеся вследствие таких побочных эффектов баги очень тяжело искать. Соответственно, в таких ситуациях есть два решения: передавать параметр по значению или передавать как обычно ко константной ссылке, а внутри функции копировать и изменять уже копию. Первый вариант (передавать по значению) обычно предпочтителен. Т.к. объект передается по значению, его можно менять внутри функции в процессе работы алгоритма (например, сортировать, если это вектор), при этом объект не изменится в месте вызова функции. При копировании аргумента, переданного по константной ссылке, в функции появляется два одинаковых по смыслу объекта, что может привести к путанице и использованию одного из них вместо другого, кроме того, копировать приходится вручную, тогда как при передаче объекта по значению копия делается автоматически, без написания дополнительного кода.&lt;br/&gt;Пример:&lt;/div&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_multiline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__line-numbers c++\&quot;&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;1&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;2&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;3&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;4&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;5&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;6&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;7&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;8&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;9&lt;/div&gt;&lt;/code&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;&lt;pre class=\&quot;b-page-code__pre\&quot;&gt;std::vector&amp;lt;int&amp;gt; Unique(std::vector&amp;lt;int&amp;gt; numbers) {\n    // here we sort a copy of given numbers,\n    // so that the user does not lose his data\n    std::sort(numbers.begin(), numbers.end());\n    numbers.erase(\n        std::unique(numbers.begin(), numbers.end()),\n        numbers.end());\n    return numbers;\n}\n&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;/details&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-block\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Разделяйте использование &lt;tt class=\&quot;wiki-monospace\&quot;&gt;class&lt;/tt&gt; и &lt;tt class=\&quot;wiki-monospace\&quot;&gt;struct&lt;/tt&gt;: классом должна быть любая сущность, которая содержит в себе логику, тогда как структура &lt;br/&gt; это набор данных, объединенных в один объект. В классе все переменные-члены должны быть приватными, для доступа к ним делайте аксессоры, в структуре все переменные должны быть публичными, нетривиальных методов быть не должно.&lt;/div&gt;&lt;details class=\&quot;wiki-cut i-bem\&quot; data-woof=&#39;{\&quot;wiki-cut\&quot;:{}}&#39;&gt;&lt;summary class=\&quot;wiki-cut__summary\&quot;&gt;&lt;span class=\&quot;wiki-cut__summary-inner\&quot;&gt;Пример&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-up\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-down\&quot;&gt;&lt;/span&gt;&lt;/summary&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_multiline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__line-numbers c++\&quot;&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;1&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;2&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;3&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;4&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;5&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;6&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;7&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;8&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;9&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;10&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;11&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;12&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;13&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;14&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;15&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;16&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;17&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;18&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;19&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;20&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;21&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;22&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;23&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;24&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;25&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;26&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;27&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;28&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;29&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;30&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;31&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;32&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;33&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;34&lt;/div&gt;&lt;/code&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;&lt;pre class=\&quot;b-page-code__pre\&quot;&gt;struct Point {\n    double x, y;\n};\n\n// Compares first by x-coordinate, then by y-coordinate\nbool operator &amp;lt; (const Point&amp;amp; first, const Point&amp;amp; second) {\n    if (first.x != second.x) {\n        return first.x &amp;lt; second.x;\n    }\n    return first.y &amp;lt; second.y;\n}\n\nclass Path {\npublic:\n    Path(double time, double average_speed)\n        : time_(time), average_speed_(average_speed)\n    {}\n    \n    double Time() const {\n        return time_;\n    }\n    \n    double AverageSpeed() const {\n        return average_speed_;\n    }\n    \n    double Distance() const {\n        return time_ * average_speed_;\n    }\n\nprivate:\n    double time_;\n    double average_speed_;\n};\n&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;От структуры точки нам ничего не требуется, поэтому она состоит только из двух публичных полей. Метод &lt;tt class=\&quot;wiki-monospace\&quot;&gt;compare&lt;/tt&gt; добавлять нельзя, задача сравнения решается определением внешнего оператора &amp;lt;. Если нужно, например, запретить изменять координаты (устанавливать их только при создании точки), то ее нужно делать классом с двумя get-аксессорами.&lt;br/&gt;В классе &lt;tt class=\&quot;wiki-monospace\&quot;&gt;Path&lt;/tt&gt; хранится две величины, а получать требуется три. Если бы &lt;tt class=\&quot;wiki-monospace\&quot;&gt;time&lt;/tt&gt; и &lt;tt class=\&quot;wiki-monospace\&quot;&gt;averageSpeed&lt;/tt&gt; были публичными переменными, то доступ к значениям скорости и времени происходил бы как &lt;tt class=\&quot;wiki-monospace\&quot;&gt;path.time&lt;/tt&gt; и &lt;tt class=\&quot;wiki-monospace\&quot;&gt;path.averageSpeed&lt;/tt&gt;, а доступ к пройденному расстоянию -- как &lt;tt class=\&quot;wiki-monospace\&quot;&gt;path.distance()&lt;/tt&gt;. Для нахождения расстояния приходится добавлять скобки, то есть всегда приходится помнить о том, что расстояние -- это метод, а время и скорость -- переменные. Если по какой-то причине (например, недостаточная точность) в будущем хранимые переменные нужно будет поменять и перейти к системе (время, расстояние), то в нашем случае с приватными переменными лишь изменится реализация методов, сохранив интерфейс класса. В случае же с публичными переменными придется изменять интерфейс класса, что немедленно влечет изменение всего кода, который его использует. Хранить все три величины переменными категорически нельзя: если время было равно 1, то действие &lt;tt class=\&quot;wiki-monospace\&quot;&gt;path.time = 0.0&lt;/tt&gt; нарушит инвариант &lt;tt class=\&quot;wiki-monospace\&quot;&gt;time * speed == distance&lt;/tt&gt;, что приведет к совершенно непредсказуемым последствиям.&lt;br/&gt;Итак, если вам нужно хранить данные под общим именем, вам подойдет структура; во всех остальных случаях создавайте полноценный класс только с приватными переменные-членами.&lt;/div&gt;&lt;/details&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-block\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Старайтесь не использовать по возможности динамическое выделение памяти (с помощью &lt;tt class=\&quot;wiki-monospace\&quot;&gt;new&lt;/tt&gt; и &lt;tt class=\&quot;wiki-monospace\&quot;&gt;malloc&lt;/tt&gt;): &lt;details class=\&quot;wiki-cut i-bem\&quot; data-woof=&#39;{\&quot;wiki-cut\&quot;:{}}&#39;&gt;&lt;summary class=\&quot;wiki-cut__summary\&quot;&gt;&lt;span class=\&quot;wiki-cut__summary-inner\&quot;&gt;Почему&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-up\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-down\&quot;&gt;&lt;/span&gt;&lt;/summary&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;если вы будете его использовать, вам необходимо будет заботиться и об \&quot;уборке мусора\&quot;, т.е. освобождении памяти. Правильный, безопасный способ это делать -- не очень простой и не входит в материалы курса. Кроме того, вызов &lt;tt class=\&quot;wiki-monospace\&quot;&gt;new&lt;/tt&gt; довольно медленный, поэтому если очень много раз это сделать, то можете не влезть в Time limit. Если вам интересно, как правильно управлять динамической памятью, читайте книгу Майерса \&quot;Effective C++\&quot; или наберите в поисковике \&quot;RAII\&quot;.&lt;/div&gt;&lt;/details&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-block\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;При использовании &lt;tt class=\&quot;wiki-monospace\&quot;&gt;vector&lt;/tt&gt; имейте в виду, что у него есть удобные методы: различные конструкторы, позволяющие задать размер и значение элемента вектора по умолчанию, операторы присваивания, сравнения (лексикографического) и оператор &lt;tt class=\&quot;wiki-monospace\&quot;&gt;swap&lt;/tt&gt;. &lt;details class=\&quot;wiki-cut i-bem\&quot; data-woof=&#39;{\&quot;wiki-cut\&quot;:{}}&#39;&gt;&lt;summary class=\&quot;wiki-cut__summary\&quot;&gt;&lt;span class=\&quot;wiki-cut__summary-inner\&quot;&gt;Примеры:&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-up\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-down\&quot;&gt;&lt;/span&gt;&lt;/summary&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Создание двумерного вектора размером &lt;tt class=\&quot;wiki-monospace\&quot;&gt;rows * columns&lt;/tt&gt;, заполненного значением 100:&lt;/div&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_multiline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;&lt;pre class=\&quot;b-page-code__pre\&quot;&gt;std::vector&amp;lt; vector&amp;lt;int&amp;gt; &amp;gt; cache(\n    rows,\n    std::vector&amp;lt;int&amp;gt;(columns, 100));\n&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Перестановка двух векторов местами без копирования всего содержимого:&lt;/div&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_multiline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;&lt;pre class=\&quot;b-page-code__pre\&quot;&gt;std::vector&amp;lt;int&amp;gt; first(1000000, 1);\nstd::vector&amp;lt;int&amp;gt; second(2000000, 2);\nfirst.swap(second);\n&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Здесь меняются местами реально два внутренних указателя &lt;tt class=\&quot;wiki-monospace\&quot;&gt;int*&lt;/tt&gt;, что значительно эффективнее, чем копирование векторов целиком, особенно если они большого размера.&lt;/div&gt;&lt;/details&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Обратите внимание, что для взятия модуля вещественного числа (&lt;tt class=\&quot;wiki-monospace\&quot;&gt;float&lt;/tt&gt;, &lt;tt class=\&quot;wiki-monospace\&quot;&gt;double&lt;/tt&gt;) необходимо пользоваться функцией &lt;tt class=\&quot;wiki-monospace\&quot;&gt;fabs&lt;/tt&gt;, а не &lt;tt class=\&quot;wiki-monospace\&quot;&gt;abs&lt;/tt&gt;. При этом в Microsoft Visual Studio сделана перегрузка &lt;tt class=\&quot;wiki-monospace\&quot;&gt;abs&lt;/tt&gt;, которая работает и для вещественных чисел даже если вы не подключили заголовочный файл с ней напрямую. Однако на сервере при этом будет &lt;tt class=\&quot;wiki-monospace\&quot;&gt;abs(-2.75)&lt;/tt&gt; != &lt;tt class=\&quot;wiki-monospace\&quot;&gt;2.75&lt;/tt&gt;.&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;В общем же случае стоит отметить, что в &lt;tt class=\&quot;wiki-monospace\&quot;&gt;c++&lt;/tt&gt; существует 2 версии &lt;tt class=\&quot;wiki-monospace\&quot;&gt;abs&lt;/tt&gt;:&lt;/div&gt;&lt;ul class=\&quot;wiki-list\&quot;&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;в &lt;tt class=\&quot;wiki-monospace\&quot;&gt;cmath&lt;/tt&gt;, определенная для вещественных чисел (&lt;tt class=\&quot;wiki-monospace\&quot;&gt;float&lt;/tt&gt;, &lt;tt class=\&quot;wiki-monospace\&quot;&gt;double&lt;/tt&gt; и &lt;tt class=\&quot;wiki-monospace\&quot;&gt;long double&lt;/tt&gt;).&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;в &lt;tt class=\&quot;wiki-monospace\&quot;&gt;cstdlib&lt;/tt&gt;, определенная для целых чисел (&lt;tt class=\&quot;wiki-monospace\&quot;&gt;int&lt;/tt&gt;, &lt;tt class=\&quot;wiki-monospace\&quot;&gt;long&lt;/tt&gt; и &lt;tt class=\&quot;wiki-monospace\&quot;&gt;long long&lt;/tt&gt;).&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Распространенная ошибка состоит в том, что подключается &lt;tt class=\&quot;wiki-monospace\&quot;&gt;cmath&lt;/tt&gt; и используется &lt;tt class=\&quot;wiki-monospace\&quot;&gt;abs&lt;/tt&gt; оттуда, что приводит к приведению целых типов в &lt;tt class=\&quot;wiki-monospace\&quot;&gt;double&lt;/tt&gt;, что в свою очередь может приводить к ошибкам округления при вызове &lt;tt class=\&quot;wiki-monospace\&quot;&gt;abs(long long)&lt;/tt&gt;.&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Поэтому общее правило следующее:&lt;/div&gt;&lt;ul class=\&quot;wiki-list\&quot;&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;для взятия модуля &lt;strong class=\&quot;wiki-bold\&quot;&gt;вещественного&lt;/strong&gt; числа необходимо подключить &lt;tt class=\&quot;wiki-monospace\&quot;&gt;cmath&lt;/tt&gt; и использовать &lt;tt class=\&quot;wiki-monospace\&quot;&gt;fabs&lt;/tt&gt;.&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;для взятия модуля &lt;strong class=\&quot;wiki-bold\&quot;&gt;целого&lt;/strong&gt; числа необходимо подключить &lt;tt class=\&quot;wiki-monospace\&quot;&gt;cstdlib&lt;/tt&gt; и использовать &lt;tt class=\&quot;wiki-monospace\&quot;&gt;abs&lt;/tt&gt;.&lt;/div&gt;&lt;ol class=\&quot;wiki-list wiki-list_list-type_decimal\&quot; start=\&quot;19\&quot;&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-block\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Если вы пользуетесь новым стандартом &lt;tt class=\&quot;wiki-monospace\&quot;&gt;c++11(c++0x)&lt;/tt&gt;, то для генерации (псевдо)случайных чисел рекомендуется использовать заголовок &lt;tt class=\&quot;wiki-monospace\&quot;&gt;random&lt;/tt&gt; с генератором псевдослучайных чисел &lt;tt class=\&quot;wiki-monospace\&quot;&gt;std::mt19937&lt;/tt&gt; и распределениями:&lt;/div&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_multiline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;&lt;pre class=\&quot;b-page-code__pre\&quot;&gt;  std::uniform_int_distribution\n  std::uniform_real_distribution\n&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;и другими, если понадобятся. &lt;details class=\&quot;wiki-cut i-bem\&quot; data-woof=&#39;{\&quot;wiki-cut\&quot;:{}}&#39;&gt;&lt;summary class=\&quot;wiki-cut__summary\&quot;&gt;&lt;span class=\&quot;wiki-cut__summary-inner\&quot;&gt;Подробнее&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-up\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-down\&quot;&gt;&lt;/span&gt;&lt;/summary&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;В противном случае, имейте в виду, что значение &lt;tt class=\&quot;wiki-monospace\&quot;&gt;RAND_MAX&lt;/tt&gt; &lt;br/&gt; ограничения сверху на значения, выдаваемые функцией &lt;tt class=\&quot;wiki-monospace\&quot;&gt;rand()&lt;/tt&gt;,&lt;br/&gt; отличаются в разных компиляторах. Тщательно изучайте, каково значение компилятора в вашем компиляторе, а каково &lt;br/&gt; на компиляторе в автоматической системе (компилятор вы выбираете при сдаче задания). Подходит ли вам такое ограничение сверху, или нужно построить на базе функции &lt;tt class=\&quot;wiki-monospace\&quot;&gt;rand()&lt;/tt&gt; алгоритм, позволяющий возвращать случайные числа, равномерно распределенные в более широком диапазоне, чем &lt;tt class=\&quot;wiki-monospace\&quot;&gt;[0, RAND_MAX - 1]&lt;/tt&gt;?&lt;br/&gt;При использовании схемы, предложенной новым стандартом &lt;tt class=\&quot;wiki-monospace\&quot;&gt;c++11|(c++0x)&lt;/tt&gt;, следует обратить внимание на то, где создавать генератор. Каждый алгоритм должен использовать собственный генератор, чтобы добиться независимой работы всех алгоритмов. Например, два алгоритма, использующих случайность, должны работать одинаково, вне зависимости от порядка их вызовов. Такой независимости сложно добиться при использовании функции &lt;tt class=\&quot;wiki-monospace\&quot;&gt;rand()&lt;/tt&gt;. &lt;br/&gt;Например, если вы хотите реализовать рандомизированный алгоритм сортировки, то нужно создать генератор внутри внешней функции, которую и будет вызывать пользователь, и передать его во внутреннюю, где будет реализована вся логика сортировки:&lt;/div&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_multiline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;&lt;pre class=\&quot;b-page-code__pre\&quot;&gt;#include &amp;lt;random&amp;gt;\n\ntemplate&amp;lt;class Iterator&amp;gt;\nvoid Sort(Iterator begin, Iterator end) {\n    std::mt19937 generator;\n    QuickSort(begin, end, generator);\n}\ntemplate&amp;lt;class Iterator, class RandomGenerator&amp;gt;\nvoid QuickSort(Iterator begin, Iterator end, RandomGenerator&amp;amp; generator) {\n    ...\n}\n&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;/details&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-block\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;В большинстве случаев нельзя сравнивать числа типа &lt;tt class=\&quot;wiki-monospace\&quot;&gt;float&lt;/tt&gt; и &lt;tt class=\&quot;wiki-monospace\&quot;&gt;double&lt;/tt&gt; просто операторами &amp;lt;, &amp;gt;, &amp;lt;=, &amp;gt;=, ==: &lt;details class=\&quot;wiki-cut i-bem\&quot; data-woof=&#39;{\&quot;wiki-cut\&quot;:{}}&#39;&gt;&lt;summary class=\&quot;wiki-cut__summary\&quot;&gt;&lt;span class=\&quot;wiki-cut__summary-inner\&quot;&gt;почему&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-up\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-down\&quot;&gt;&lt;/span&gt;&lt;/summary&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;при вычислениях в вещественных типах накапливается погрешность, вследствие чего равные по сути числа, вычисленные с помощью разной последовательности действий, могут получить различные значения в типах &lt;tt class=\&quot;wiki-monospace\&quot;&gt;float&lt;/tt&gt; и &lt;tt class=\&quot;wiki-monospace\&quot;&gt;double&lt;/tt&gt;, и даже &lt;tt class=\&quot;wiki-monospace\&quot;&gt;a &amp;lt; b&lt;/tt&gt; может измениться на &lt;tt class=\&quot;wiki-monospace\&quot;&gt;b &amp;lt; a&lt;/tt&gt;. Погрешность вычислений можно оценить, используя точные знания о том, как именно выполняются арифметические операции, а также как происходят вычисления в используемых вами функциях. Обычно делать этого точно не нужно, т.к. точность типа &lt;tt class=\&quot;wiki-monospace\&quot;&gt;double&lt;/tt&gt; позволяет хранить 15-16 знаков, а требуемая в задаче точность обычно порядка 10&lt;sup class=\&quot;wiki-superscript\&quot;&gt;-6&lt;/sup&gt; или $10&lt;sup class=\&quot;wiki-superscript\&quot;&gt;-9&lt;/sup&gt;, но не меньше. Однако для того, чтобы корректно сравнивать числа, следует использовать порог сравнения. Примеры:&lt;/div&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_multiline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;&lt;pre class=\&quot;b-page-code__pre\&quot;&gt;const double COMPARISON_THRESHOLD = 1e-8;\n\nbool Less(double first, double second) {\n    return first &amp;lt; second - COMPARISON_THRESHOLD;\n}\n\nbool LessOrEqual(double first, double second) {\n    return first &amp;lt; second + COMPARISON_THRESHOLD;\n}\n\nbool Equal(double first, double second) {\n    return fabs(first - second) &amp;lt; COMPARISON_THRESHOLD;\n}\n&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;/details&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-block\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Для своих типов (классов, структур), если объекты типа необходимо сравнивать между собой, реализуйте всегда &lt;tt class=\&quot;wiki-monospace\&quot;&gt;operator&amp;lt;&lt;/tt&gt; и не реализуйте остальные операторы сравнения (&lt;tt class=\&quot;wiki-monospace\&quot;&gt;operator&amp;lt;=, operator&amp;gt;, operator&amp;gt;=&lt;/tt&gt;): &lt;details class=\&quot;wiki-cut i-bem\&quot; data-woof=&#39;{\&quot;wiki-cut\&quot;:{}}&#39;&gt;&lt;summary class=\&quot;wiki-cut__summary\&quot;&gt;&lt;span class=\&quot;wiki-cut__summary-inner\&quot;&gt;почему&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-up\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-down\&quot;&gt;&lt;/span&gt;&lt;/summary&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;через &lt;tt class=\&quot;wiki-monospace\&quot;&gt;operator&amp;lt;&lt;/tt&gt; выражаются все остальные, и общепринятая конвенция &lt;br/&gt; реализовывать только сравнение на \&quot;меньше\&quot;. В противном случае, дублируется код, а работа различных операторов может оказаться несогласованной. Точно так же, общая конвенция,-- что сортировка объектов по умолчанию делается по возрастанию, и в качестве компаратора передается функция сравнения на \&quot;меньше\&quot;. Это правило необходимо соблюдать, чтобы вашу программу было легко понимать другим программистам.&lt;/div&gt;&lt;/details&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-block\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Не используйте &lt;tt class=\&quot;wiki-monospace\&quot;&gt;std::pair&lt;/tt&gt; (за исключением случая, описанного ниже). &lt;details class=\&quot;wiki-cut i-bem\&quot; data-woof=&#39;{\&quot;wiki-cut\&quot;:{}}&#39;&gt;&lt;summary class=\&quot;wiki-cut__summary\&quot;&gt;&lt;span class=\&quot;wiki-cut__summary-inner\&quot;&gt;Подробнее:&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-up\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-angle-down\&quot;&gt;&lt;/span&gt;&lt;/summary&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Причина в том, что в месте использования объекта &lt;tt class=\&quot;wiki-monospace\&quot;&gt;pair&lt;/tt&gt; невозможно понять, что кроется за полем &lt;tt class=\&quot;wiki-monospace\&quot;&gt;first&lt;/tt&gt;, а что -- за полем &lt;tt class=\&quot;wiki-monospace\&quot;&gt;second&lt;/tt&gt;. Это абстрактные названия, которые могут означать что угодно, а в месте использования никаких указаний на это нет. Даже если в месте определения переменной указать, что в ней хранится в &lt;tt class=\&quot;wiki-monospace\&quot;&gt;first&lt;/tt&gt; и &lt;tt class=\&quot;wiki-monospace\&quot;&gt;second&lt;/tt&gt;, при чтении придется постоянно возвращаться к месту определения переменной, чтобы разобраться в коде и убедиться, в частности, что &lt;tt class=\&quot;wiki-monospace\&quot;&gt;first&lt;/tt&gt; и &lt;tt class=\&quot;wiki-monospace\&quot;&gt;second&lt;/tt&gt; нигде не перепутаны местами -- часто встречающаяся ошибка! &lt;br/&gt;Исключением являются небольшие участки кода (помещающиеся на один экран), в рамках которых создается из имеющихся объектов &lt;tt class=\&quot;wiki-monospace\&quot;&gt;pair&lt;/tt&gt;, далее удобно используется для какой-нибудь операции (например, сортировка), и затем все &lt;tt class=\&quot;wiki-monospace\&quot;&gt;pair&lt;/tt&gt; обратно \&quot;расшифровываются\&quot; в новые объекты и более не используются. Это может быть удобно для сортировки по вторичному параметру, т.к. для &lt;tt class=\&quot;wiki-monospace\&quot;&gt;pair&lt;/tt&gt; есть оператор сравнения по умолчанию, который сравнивает сначала по &lt;tt class=\&quot;wiki-monospace\&quot;&gt;first&lt;/tt&gt;, затем по &lt;tt class=\&quot;wiki-monospace\&quot;&gt;second&lt;/tt&gt;. При этом код легко понять, т.к. &lt;tt class=\&quot;wiki-monospace\&quot;&gt;pair&lt;/tt&gt; определен и используется в одном очень локальном куске кода, который можно охватить взглядом целиком.&lt;/div&gt;&lt;/details&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 class=\&quot;wiki-head wf-head i-bem\&quot; data-woof=&#39;{\&quot;wiki-head\&quot;:{}}&#39; data-wf=\&quot;{&amp;quot;anchor&amp;quot;:&amp;quot;organizacijakoda&amp;quot;,&amp;quot;section_local&amp;quot;:4,&amp;quot;includesPath&amp;quot;:[],&amp;quot;text&amp;quot;:&amp;quot;Организация кода&amp;quot;}\&quot; data-bem=\&quot;{&amp;quot;wf-head&amp;quot;:{}}\&quot;&gt;&lt;div class=\&quot;wiki-head__anchors\&quot;&gt;&lt;/div&gt;&lt;span class=\&quot;wiki-head__text\&quot;&gt;Организация кода&lt;/span&gt;&lt;div class=\&quot;wiki-head__anchor-link\&quot;&gt;&lt;/div&gt;&lt;/h2&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Как и любая система, код при разрастании становится все более путаным и сложным. Однако есть способы перевести эту сложность преимущественно в его размер, сохраняя логику ясной и прозрачной. Помогает в этом грамотное структурирование: что может быть классом, что должна делать функция, где что должно объявляться. Оно же позволяет удобно осуществить повторное использование нужных участков кода.&lt;/div&gt;&lt;ol class=\&quot;wiki-list wiki-list_list-type_decimal\&quot; start=\&quot;1\&quot;&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;У каждой переменной должна быть одна-единственная явная цель. Никогда не создавайте переменных &lt;tt class=\&quot;wiki-monospace\&quot;&gt;tmp&lt;/tt&gt;, выполняющих несколько разных вспомогательных функций во всем коде. Используйте переменную только с одной целью. Переменные, в названии которых используется &lt;tt class=\&quot;wiki-monospace\&quot;&gt;tmp&lt;/tt&gt; или &lt;tt class=\&quot;wiki-monospace\&quot;&gt;temp&lt;/tt&gt;, почти всегда либо бессмысленные и ненужные, либо неправильно названы.&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Объявляйте переменные как можно ближе к месту их первого использования. Старайтесь сразу же инициализировать переменные. Если переменная используется только внутри функции, она должна быть локальной для функции. Если только внутри цикла, она должна быть локальной для цикла. Никогда не делайте глобальных переменных. Локальные переменные блока предпочтительнее по сравнению с локальными переменными функции, локальные переменные функции -- по сравнению с переменными-членами класса, а последние -- по сравнению с глобальными переменными. Стремитесь сократить \&quot;время жизни\&quot; каждой переменной: чем меньше время жизни переменных, тем меньше переменных приходится одновременно держать в голове при чтении и написании кода. Исследования показывают, что человек может эффективно держать в памяти не более 5-7 переменных одновременно. Большее количество неизбежно приводит к ошибкам.&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-block\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Разделяйте программу на ввод, решение и вывод, это делает ваш код более модульным.&lt;br/&gt;Способы ввода и вывода часто меняются. У нас используются стандартные потоки и определенный описанный формат, в следующий раз те же данные могут быть записаны в файле или в базе данных в другом формате, затем они же могут поставляться уже в виде переменных в более сложной программе, которая использует ваш алгоритм в качестве подпрограммы.&lt;br/&gt;Записывайте вход в отдельные переменные и результат работы -- в отдельные. Для их заполнения и вывода напишите отдельные функции. В частности, ваш код становится легче тестируемым, что является важным свойством. Вы можете написать альтернативное решение и сравнить его с вашим, можете запустить стресс-тест.&lt;br/&gt;Вообще это две принципиально разные области ответственности: ввод-вывод и преобразование данных. Не смешивайте в одном классе или функции несколько разных областей ответственности: один класс отвечает ровно за одну область. Иначе он разрастается, становится слишком сложным, а две разные области ответственности начинают быть слишком сильно связанными. Это плохо, потому что чем более независимы разные части программы, тем меньше поводов для ошибок и тем проще тестировать части программы по отдельности.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-block\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Никогда не используйте \&quot;магические константы\&quot; в коде. Если у вас где-то в коде встречаются, например, &#39;a&#39; и &#39;z&#39;, означающие минимальный и максимальный символ алфавита, то их надо заменить на именованные константы. Например так:&lt;/div&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_multiline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;&lt;pre class=\&quot;b-page-code__pre\&quot;&gt;const char MIN_LETTER = &#39;a&#39;;\nconst char MAX_LETTER = &#39;z&#39;;\n...\n\nfor (char letter = MIN_LETTER; letter &amp;lt;= MAX_LETTER; ++letter) {\n    ...\n}\n...\n&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-block\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Пишите комментарии только по делу. В идеальном случае лучше обходиться вообще без них --- ваш код прокомментирует сам себя. Конечно, так редко удается, поэтому комментарии к классам и функциям бывают полезными.&lt;br/&gt;Не нужно оправдывать плохое имя (см. следующий раздел) подробным комментарием. Если у вас встречается объявление вида&lt;/div&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_inline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;int n;  // number of balls in the bucket\n&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;то нужно заменить его на &lt;tt class=\&quot;wiki-monospace\&quot;&gt;int number_of_balls;&lt;/tt&gt; или &lt;tt class=\&quot;wiki-monospace\&quot;&gt;int numBallsInBucket;&lt;/tt&gt; в зависимости от принятого стиля, от того, бывают ли шары не в корзине, и от контекста.&lt;br/&gt;Писать комментарий следует &lt;strong class=\&quot;wiki-bold\&quot;&gt;над&lt;/strong&gt; тем, к чему он относится. Комментарии в конце строки значительно удлиняют ее, поэтому ухудшают читаемость. При этом желательно, чтобы строка влезала в 100 символов, а зачастую бывает жесткое ограничение по длине строки (как в нашей системе проверки). Если вы все же пользуетесь комментарием в конце строки, то отделяйте его двумя пробелами от кода.&lt;br/&gt;Комментарии к функции должны быть написаны рядом с интерфейсом, а не с реализацией, если они разделены: пользователь будет в первую очередь смотреть на интерфейс, к тому же реализация сторонних библиотек может быть вовсе недоступной. То же самое относится и к классам: комментарии к классу и к его методам должны быть в интерфейсе класса, а не в реализации.&lt;br/&gt;Если вы решили снабдить свой код подробными комментариями, указывайте в них то, что будет интересно читающему. Для класса это описание того, для чего класс нужен, как им пользоваться. Для функции и метода --- что они делают, что возвращают, что принимают на вход, какие исключения могут бросать.&lt;br/&gt;Вот пример хорошего комментария к функции.&lt;/div&gt;&lt;div class=\&quot;wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes\&quot; style=\&quot;\&quot;&gt;&lt;div class=\&quot;b-page-code b-page-code_multiline_yes i-bem\&quot; data-woof=&#39;{\&quot;b-page-code\&quot;:{}}&#39;&gt;&lt;code class=\&quot;b-page-code__line-numbers c++\&quot;&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;1&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;2&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;3&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;4&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;5&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;6&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;7&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;8&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;9&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;10&lt;/div&gt;&lt;div class=\&quot;b-page-code__line-number\&quot;&gt;11&lt;/div&gt;&lt;/code&gt;&lt;code class=\&quot;b-page-code__code c++\&quot;&gt;&lt;pre class=\&quot;b-page-code__pre\&quot;&gt;/* Applies per symbol transformation to string.\n * input[i] is transformed into transform[input[i]].\n * If transform map doesn&#39;t contain input[i] and defaultSymbol isn&#39;t null,\n *   input[i] is transformed to defaultSymbol.\n * If transform map doesn&#39;t contain input[i] and defaultSymbol == 0,\n *   function throws TransformError.\n */\nstring TransformString(\n     const string&amp;amp; input,\n     const map&amp;lt;char, char&amp;gt;&amp;amp; transform,\n     const char defaultSymbol);\n&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 class=\&quot;wiki-head wf-head i-bem\&quot; data-woof=&#39;{\&quot;wiki-head\&quot;:{}}&#39; data-wf=\&quot;{&amp;quot;anchor&amp;quot;:&amp;quot;imena&amp;quot;,&amp;quot;section_local&amp;quot;:5,&amp;quot;includesPath&amp;quot;:[],&amp;quot;text&amp;quot;:&amp;quot;Имена&amp;quot;}\&quot; data-bem=\&quot;{&amp;quot;wf-head&amp;quot;:{}}\&quot;&gt;&lt;div class=\&quot;wiki-head__anchors\&quot;&gt;&lt;/div&gt;&lt;span class=\&quot;wiki-head__text\&quot;&gt;Имена&lt;/span&gt;&lt;div class=\&quot;wiki-head__anchor-link\&quot;&gt;&lt;/div&gt;&lt;/h3&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;У каждой создаваемой сущности в коде есть имя. Сперва автор, а впоследствии, и все читающие код ассоциируют имена с сущностями, которые они обозначают. Чтобы в каждый момент точно понимать, что в переменной хранится, чтобы быть уверенным в том, что вызов функция вернет ожидаемое значение, имена нужно давать осмысленные и грамотно определенные.&lt;/div&gt;&lt;ol class=\&quot;wiki-list wiki-list_list-type_decimal\&quot; start=\&quot;1\&quot;&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-block\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Имена переменных должны быть длинными и понятными. Каждый раз, когда вы пишете одно-двух-буквенное название переменной или используете что-то вроде cur, должно возникать неприятное чувство. Единственное место, где можно позволить себе однобуквенные переменные,--- в качестве счетчика в очень коротком for&#39;е без вложенных циклов. И то, у вас должны быть серьезные опасения, когда вы это делаете, вы должны делать это осознанно. Иначе можно легко допустить ошибку с индексами, например перепутать i с j, что происходит постоянно, если называть так переменные. Искать такую ошибку вы будете несколько часов или дней. Даже если в описании задачи есть названия R и L, это не значит, что в программе нужно их так называть. Стиль математического текста очень сильно отличается от стиля кода программы. В математическом тексте есть очень много слов, описывающих формулы и то, что в них происходит. В самих формулах ценится краткость. В коде же наоборот, слов, описывающих происходящее, практически нет. Код должен описывать сам себя, названиями переменных, методов и классов. Поэтому названия должны быть очень прозрачными. Не должно быть нужно возвращаться и смотреть вверх в объявление переменной или смотреть на ее инициализацию, чтобы понять, что она в себе содержит.&lt;br/&gt;Никогда не называйте переменные &lt;tt class=\&quot;wiki-monospace\&quot;&gt;something1&lt;/tt&gt; и &lt;tt class=\&quot;wiki-monospace\&quot;&gt;something2&lt;/tt&gt;, так как очень легко ошибиться и попасть по соседней клавише, тем самым очень легко сделать баг, а искать его будет тяжело. Используйте &lt;tt class=\&quot;wiki-monospace\&quot;&gt;something_first&lt;/tt&gt; и &lt;tt class=\&quot;wiki-monospace\&quot;&gt;something_second&lt;/tt&gt; или что-нибудь еще. &lt;i class=\&quot;wiki-italic\&quot;&gt;Как выбрать понятное название переменной?&lt;/i&gt; Сперва нужно описать переменную на английском (так чтобы из описания было понятно, что хранит переменная), а далее выбирать название исходя из соображений компромисса между длиной и понятностью. (3-5 слов в названии -- это нормально).&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-block\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Все, что относится к именам переменных, относится и к именам функций, классов и методов. Кроме того, в названиях методов (функций) обязательно должен быть глагол, описывающий действие, которое выполняет метод. Это действие должно быть одно. У каждой функции должна быть одна ясная цель. Если вы понимаете, что не можете придумать название функции без слова And (например, &lt;tt class=\&quot;wiki-monospace\&quot;&gt;ReadFromFileAndSort&lt;/tt&gt;), значит, функция выполняет две разные цели, и скорее всего, ее нужно разбить на несколько меньших функций (&lt;tt class=\&quot;wiki-monospace\&quot;&gt;ReadFromFile&lt;/tt&gt; и &lt;tt class=\&quot;wiki-monospace\&quot;&gt;Sort&lt;/tt&gt;), и из внешней вызывать подряд внутренние.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-block\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Не сокращайте слова в названиях. Это ухудшает читаемость кода, а также делает невозможным поиск по нему. Не нужно сокращать &lt;tt class=\&quot;wiki-monospace\&quot;&gt;index&lt;/tt&gt; до &lt;tt class=\&quot;wiki-monospace\&quot;&gt;ind&lt;/tt&gt; или &lt;tt class=\&quot;wiki-monospace\&quot;&gt;idx&lt;/tt&gt;, &lt;tt class=\&quot;wiki-monospace\&quot;&gt;current&lt;/tt&gt; --- до &lt;tt class=\&quot;wiki-monospace\&quot;&gt;cur&lt;/tt&gt; и т.д. Единственное исключение --- общепринятые сокращения типа &lt;tt class=\&quot;wiki-monospace\&quot;&gt;Http&lt;/tt&gt; и т.д.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-block\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Выделяйте названия приватных членов классов, это позволяет отличить их от аргументов методов. Наиболее распространенными способами являются подчеркивание в конце: &lt;tt class=\&quot;wiki-monospace\&quot;&gt;name_&lt;/tt&gt;,--- или префикс &lt;tt class=\&quot;wiki-monospace\&quot;&gt;m_&lt;/tt&gt;: &lt;tt class=\&quot;wiki-monospace\&quot;&gt;m_name&lt;/tt&gt;. Начинать имя переменной с подчеркивания не принято; следует помнить о том, что имена, начинающиеся на два подчеркивания или подчеркивание и заглавную букву, зарезервированы стандартом, и использовать их нельзя.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 class=\&quot;wiki-head wf-head i-bem\&quot; data-woof=&#39;{\&quot;wiki-head\&quot;:{}}&#39; data-wf=\&quot;{&amp;quot;anchor&amp;quot;:&amp;quot;prodvinutyezamechanija&amp;quot;,&amp;quot;section_local&amp;quot;:6,&amp;quot;includesPath&amp;quot;:[],&amp;quot;text&amp;quot;:&amp;quot;Продвинутые замечания&amp;quot;}\&quot; data-bem=\&quot;{&amp;quot;wf-head&amp;quot;:{}}\&quot;&gt;&lt;div class=\&quot;wiki-head__anchors\&quot;&gt;&lt;/div&gt;&lt;span class=\&quot;wiki-head__text\&quot;&gt;Продвинутые замечания&lt;/span&gt;&lt;div class=\&quot;wiki-head__anchor-link\&quot;&gt;&lt;/div&gt;&lt;/h2&gt;&lt;ol class=\&quot;wiki-list wiki-list_list-type_decimal\&quot; start=\&quot;1\&quot;&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-block\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Не оптимизируйте преждевременно. Ваш алгоритм должен иметь правильную асимптотическую сложность, чтобы иметь шансы пройти в Time limit. Он должен правильно работать, чтобы не получить Wrong answer. Это два основных тезиса. Не нужно оптимизировать с целью ускорить программу в константу раз, если это хоть сколько-нибудь усложняет код. Старайтесь сделать свое изначальное решение максимально простым. Оптимизировать нужно только после того, как вы четко замерили время работы программы, убедились, что оно слишком большое, определили, какая именно функция создает узкое место. Даже суперпрофессионалы не берутся заранее предсказывать узкие места системы: в наше время, когда компиляторы умеют делать сумасшедшие оптимизации, это практически невозможно предугадать. Поэтому профессионалы и не пытаются делать это заранее и оптимизировать что-либо заранее. Сначала измерьте, найдите узкое место, а потом уже пытайтесь его оптимизировать. Все вышесказанное относится к выносу переменных из цикла для ускорения, к перебору не до n, а до n / 2 и т.д. -- не нужно ничего из этого сделать. Напишите максимально простое решение, добейтесь правильной его работы, и если вдруг после этого оно окажется слишком медленным -- только тогда оптимизируйте. Ваша задача в программах, которые вы пишете на этом курсе,-- написать наиболее простой, понятный, читаемый и гибкий код, среди тех, которые проходят в ограничения по времени и памяти. Помните об этом и не оптимизируйте, жертвуя простотой и удобством.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=\&quot;wiki-li\&quot;&gt;&lt;div class=\&quot;wiki-li__wrapper\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;&lt;div class=\&quot;wiki-block\&quot;&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Не выполняйте никакую сложную работу в конструкторе, также не обращайтесь в конструкторе к каким-либо внешним для программы объектам, таким как файловая система, стандартные потоки ввода и вывода, базы данных и т.д. В конструкторе должна быть только простейшая инициализация полей класса, автономная или в зависимости от параметров конструктора. Это связано с тестированием класса и гибкостью дизайна.&lt;br/&gt;На самом деле, почти всегда класс, который легко тестировать, имеет гибкий дизайн и его удобно использовать, и наоборот. Если у класса в конструкторе&lt;br/&gt;происходят какие-то сложные действия (обращение к файлу, базе данных или запуск сложного алгоритма), то его сложно протестировать. Чтобы протестировать класс в юнит-тесте, нужно для начала хотя бы создать экземпляр этого класса.&lt;br/&gt;Если для этого требуется какой-то файл или база данных, то это уже получается сразу не юнит-тест, т.к. ему для работы нужны внешние данные, внешние объекты, что неудобно, в идеале тест должен быть изолирован от остальной системы для чистоты эксперимента. Подменить данные, лежащие в базе данных или в файле, существенно сложнее,  чем передать другие значения параметров в какую-то функцию. Для того, чтобы обойти использование файлов и баз данных, придется переделывать класс, в частности убирать у него из конструктора непосредственные обращения к файлам и базе данных. А если это делается не непосредственно в конструкторе этого класса, а в методах других классов, вызываемых в конструкторе, то придется выносить объекты этих классов наружу и подменять их.&lt;br/&gt;Если внутри конструктора сложный алгоритм, то его тоже было бы неплохо протестировать, однако это уже становится невозможно, потому что как только мы захотим создать экземпляр класса, так сразу же вызовем конструктор, и там уже весь алгоритм выполнится, отдельные функции, которые он использует протестировать не получится. Если алгоритм работает неправильно, то к моменту создания объекта класса он будет находиться в некорректном состоянии, и тестировать его будет уже бессмысленно.&lt;br/&gt;Иногда даже иметь в классе указатели на объекты других конкретных классов и создавать их в конструкторе неправильно. Например, если класс, выполняющий какой-то конкретный алгоритм, имеет у себя указатель на объект для работы с базой данных, который в конструкторе инициализируется для обращения к конкретной базе, то такой класс тоже невозможно протестировать по вышеописанным причинам.&lt;br/&gt;На самом деле, нашему алгоритмическому классу нужны от класса, работающего с базой данных, лишь конкретные данные, которые тот берет из базы данных,&lt;br/&gt;и скорее всего далеко не все данные, которые есть в базе. Поэтому имеет смысл написать \&quot;обертку\&quot; вокруг класса, работающего с базой, которая будет обращаться к базе и доставать произвольные данные с помощью внутреннего класса, работающего непосредственно с базой, а наружу отдавать&lt;br/&gt;только те куски данных, которые имеют смысл для алгоритмического класса. А для того, чтобы впоследствии можно было работать не только с базой данных, но те же данные брать из файла или откуда-то из памяти другого объекта, нужно сделать общий интерфейс для классов, поставляющих данные алгоритмическому, и конкретный класс, берущий данные именно из базы, породить от этого интерфейса. Под интерфейсом в данном случае имеется в виду класс с чисто виртуальными методами, который определяет интерфейс всех своих потомков, но инстанцировать который невозможно. Далее, в конструктор алгоритмического класса передавать уже указатель на такой интерфейс, а не указатель на конкретный класс для работы с базой данных, и в конструкторе просто копировать этот указатель&lt;br/&gt;во внутреннюю переменную для будущего использования. В таком случае при тестировании можно будет создать mock класса, достающего данные, реализовав этот интерфейс. Наш mock будет \&quot;подсовывать\&quot; алгоритмическому классу те данные, которые мы хотим, то есть абсолютно любые, что и нужно для полного тестирования. Соответственно, мы сможем проверить реакцию на разные крайние случаи, запустить стресс-тест, понять, какие ограничения на данные должен проверять на входе алгоритмический класс. &lt;br/&gt;Нам не придется создавать специальные базы данных для тестирования с подмененными данными, мы сможем генерировать эти данные прямо в памяти, в огромных количествах, сможем выполнить хоть 100000 тестов, если каждый из них выполняется быстро. С базами данных это не получится, потому что, во-первых, один тест, обращающийся в процессе к базе данных, уже в любом случае будет занимать существенное время, а во-вторых потому что не получится создать 100000&lt;br/&gt;различных таблиц.&lt;/div&gt;&lt;div class=\&quot;wiki-p\&quot;&gt;Более подробное описание, примеры и другие советы для написания хорошо тестируемых классов см. &lt;a class=\&quot;wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes\&quot; title=\&quot;Внешняя ссылка (откроется в новом окне)\&quot; href=\&quot;http://misko.hevery.com/attachments/Guide-Writing%20Testable%20Code.pdf\&quot; target=\&quot;_blank\&quot;&gt;&lt;span class=\&quot;woof-icon woof-icon_type_awesome-file-alt\&quot;&gt;&lt;/span&gt;здесь&lt;/a&gt;.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&quot;,&quot;mods&quot;:{&quot;status&quot;:&quot;main&quot;}}},&quot;user&quot;:{&quot;uid&quot;:21359538,&quot;login&quot;:&quot;evg3307&quot;,&quot;first_name&quot;:&quot;Евгения&quot;,&quot;last_name&quot;:&quot;Елистратова&quot;,&quot;display&quot;:&quot;Евгения Елистратова&quot;,&quot;email&quot;:&quot;evg3307@yandex.ru&quot;,&quot;is_admin&quot;:false,&quot;is_external_employee&quot;:false,&quot;is_dismissed&quot;:false,&quot;settings&quot;:{&quot;language&quot;:&quot;ru&quot;,&quot;code_theme&quot;:&quot;github&quot;,&quot;use_new_wf&quot;:false,&quot;use_nodejs_frontend&quot;:true,&quot;use_full_width_content&quot;:false,&quot;propose_content_translation&quot;:false},&quot;avatar&quot;:&quot;21493/enc-9d4b777cc48254e59350250ed08c21a4d4244a9ff2dd625fc99e2cbf3aa36589&quot;}}},&quot;w-mixed-tooltip&quot;:{&quot;screenWidthToShow&quot;:1200,&quot;tooltip&quot;:{&quot;block&quot;:&quot;tooltip&quot;,&quot;mods&quot;:{&quot;size&quot;:&quot;s&quot;,&quot;theme&quot;:&quot;normal&quot;},&quot;js&quot;:{&quot;to&quot;:&quot;bottom&quot;},&quot;content&quot;:&quot;Действия&quot;}}}" type="button" autocomplete="off" tabindex="0"><span class="icon icon_size_s icon_type_more button2__icon button2__icon_side_left"></span><span class="button2__text">Действия</span><div class="popup2 popup2_target_anchor popup2_hiding_yes popup2_autoclosable_no popup2_view_classic popup2_theme_normal tooltip tooltip_size_s tooltip_theme_normal tooltip_view_classic i-bem tooltip_js_inited popup2_js_inited" data-bem="{&quot;popup2&quot;:{&quot;directions&quot;:[&quot;bottom-center&quot;]}}"><div class="tooltip__backdrop"><div class="popup2__tail"></div></div><div class="tooltip__content">Действия</div></div></button></div></div><div class="mi-sticky__placeholder" style="position: static; top: 0px; right: auto; bottom: auto; left: auto; visibility: visible; float: none; width: 2410px; height: 67px;"></div><div class="b-page-title-info"><h1 class="b-page-title">Styleguide</h1></div><div class="w-page-info w-page-info_type_redirected-from i-bem w-page-info_js_inited" data-bem="{&quot;w-page-info&quot;:{}}"><div class="w-page-info__content">Вы были перенаправлены на эту страницу со страницы <a class="link link_theme_normal i-bem" data-bem="{&quot;link&quot;:{}}" tabindex="0" href="https://wiki.yandex.ru/shad/AlgorithmsStyleguide/?noredirect">/shad/AlgorithmsStyleguide/</a></div><div class="w-page-info__right"><span class="awesome-icon awesome-icon_icon_remove awesome-icon_type_hide i-bem awesome-icon_js_inited"></span></div></div><div class="w-content w-content_theme_default i-bem w-content_js_inited"><script nonce="">Ya.Rum.sendRaf('2876');</script><div class="wiki-doc wiki-doc_magiclinks_yes wiki-doc_wiki_yes woof wf-doc wf-doc_magiclinks_yes wf-doc_wiki_yes i-bem wiki-doc_js_inited wf-doc_js_inited wiki-doc_loaded" data-woof="{&quot;wiki-doc&quot;:{}}" data-wf="{&quot;user&quot;:{&quot;codeTheme&quot;:&quot;github&quot;},&quot;toc&quot;:[{&quot;type&quot;:&quot;heading&quot;,&quot;depth&quot;:2,&quot;anchor&quot;:&quot;osnovnyepravila&quot;,&quot;value&quot;:&quot;Основные правила&quot;,&quot;isMd&quot;:false},{&quot;type&quot;:&quot;heading&quot;,&quot;depth&quot;:3,&quot;anchor&quot;:&quot;sintaksis&quot;,&quot;value&quot;:&quot;Синтаксис&quot;,&quot;isMd&quot;:false},{&quot;type&quot;:&quot;heading&quot;,&quot;depth&quot;:3,&quot;anchor&quot;:&quot;jazykc&quot;,&quot;value&quot;:&quot;Язык C&quot;,&quot;isMd&quot;:false},{&quot;type&quot;:&quot;heading&quot;,&quot;depth&quot;:2,&quot;anchor&quot;:&quot;organizacijakoda&quot;,&quot;value&quot;:&quot;Организация кода&quot;,&quot;isMd&quot;:false},{&quot;type&quot;:&quot;heading&quot;,&quot;depth&quot;:3,&quot;anchor&quot;:&quot;imena&quot;,&quot;value&quot;:&quot;Имена&quot;,&quot;isMd&quot;:false},{&quot;type&quot;:&quot;heading&quot;,&quot;depth&quot;:2,&quot;anchor&quot;:&quot;prodvinutyezamechanija&quot;,&quot;value&quot;:&quot;Продвинутые замечания&quot;,&quot;isMd&quot;:false}],&quot;wiki-attrs&quot;:{&quot;instance&quot;:&quot;business&quot;,&quot;platform&quot;:&quot;desktop&quot;,&quot;magiclinks_url&quot;:&quot;https://magiclinks.yandex.ru/magiclinks/v1/links/&quot;,&quot;tracker_url&quot;:&quot;https://tracker.yandex.ru/&quot;,&quot;staff_url&quot;:&quot;https://staff.yandex.ru/&quot;,&quot;forms_url&quot;:&quot;https://connect.yandex.ru/&quot;,&quot;schi_url&quot;:&quot;https://wf-biz.tools.yandex.ru/&quot;,&quot;wiki_url&quot;:&quot;https://wiki.yandex.ru&quot;,&quot;wiki_api_url&quot;:&quot;https://wiki-api.yandex.ru/&quot;,&quot;docviewer_url&quot;:&quot;https://docviewer.yandex.ru/&quot;,&quot;yastatic_url&quot;:&quot;//yastatic.net&quot;,&quot;useAJAX&quot;:false,&quot;remark&quot;:{&quot;markdown&quot;:{&quot;commonmark&quot;:true},&quot;woofmd&quot;:{&quot;actions&quot;:[{&quot;name&quot;:&quot;a&quot;,&quot;scope&quot;:&quot;inline&quot;},{&quot;name&quot;:&quot;anchor&quot;,&quot;scope&quot;:&quot;inline&quot;},{&quot;name&quot;:&quot;forms&quot;,&quot;scope&quot;:&quot;inline&quot;},{&quot;name&quot;:&quot;iframe&quot;,&quot;scope&quot;:&quot;block&quot;},{&quot;name&quot;:&quot;grid&quot;,&quot;scope&quot;:&quot;block&quot;},{&quot;name&quot;:&quot;tree&quot;,&quot;scope&quot;:&quot;block&quot;},{&quot;name&quot;:&quot;toc&quot;,&quot;scope&quot;:&quot;block&quot;},{&quot;name&quot;:&quot;mypages&quot;,&quot;scope&quot;:&quot;block&quot;},{&quot;name&quot;:&quot;mywatches&quot;,&quot;scope&quot;:&quot;block&quot;},{&quot;name&quot;:&quot;backlinks&quot;,&quot;scope&quot;:&quot;block&quot;},{&quot;name&quot;:&quot;tasks&quot;,&quot;scope&quot;:&quot;block&quot;}]}},&quot;extensions&quot;:{},&quot;code_theme&quot;:&quot;github&quot;,&quot;lang&quot;:&quot;ru&quot;,&quot;page_path&quot;:&quot;/shad/groups/2019/semester1/algorithms1/algorithmsstyleguide&quot;}}" data-bem="{&quot;wf-doc&quot;:{}}"><fieldset class="wiki-toc i-bem wiki-toc_js_inited" data-woof="{&quot;wiki-toc&quot;:{}}" data-wf="{&quot;data&quot;:{},&quot;indexes&quot;:{&quot;from&quot;:null,&quot;to&quot;:null}}"><legend class="wiki-toc__title">Оглавление документа </legend><div class="wiki-tocitem wiki-tocitem_level_2 i-bem wiki-tocitem_js_inited" data-woof="{&quot;wiki-tocitem&quot;:{&quot;href&quot;:&quot;#osnovnyepravila&quot;}}"><a class="wiki-link" href="https://wiki.yandex.ru/shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide/?from=%252Fshad%252FAlgorithmsStyleguide%252F#osnovnyepravila" title="Основные правила">Основные правила</a></div><div class="wiki-tocitem wiki-tocitem_level_3 i-bem wiki-tocitem_js_inited" data-woof="{&quot;wiki-tocitem&quot;:{&quot;href&quot;:&quot;#sintaksis&quot;}}"><a class="wiki-link" href="https://wiki.yandex.ru/shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide/?from=%252Fshad%252FAlgorithmsStyleguide%252F#sintaksis" title="Синтаксис">Синтаксис</a></div><div class="wiki-tocitem wiki-tocitem_level_3 i-bem wiki-tocitem_js_inited" data-woof="{&quot;wiki-tocitem&quot;:{&quot;href&quot;:&quot;#jazykc&quot;}}"><a class="wiki-link" href="https://wiki.yandex.ru/shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide/?from=%252Fshad%252FAlgorithmsStyleguide%252F#jazykc" title="Язык C">Язык C</a></div><div class="wiki-tocitem wiki-tocitem_level_2 i-bem wiki-tocitem_js_inited" data-woof="{&quot;wiki-tocitem&quot;:{&quot;href&quot;:&quot;#organizacijakoda&quot;}}"><a class="wiki-link" href="https://wiki.yandex.ru/shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide/?from=%252Fshad%252FAlgorithmsStyleguide%252F#organizacijakoda" title="Организация кода">Организация кода</a></div><div class="wiki-tocitem wiki-tocitem_level_3 i-bem wiki-tocitem_js_inited" data-woof="{&quot;wiki-tocitem&quot;:{&quot;href&quot;:&quot;#imena&quot;}}"><a class="wiki-link" href="https://wiki.yandex.ru/shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide/?from=%252Fshad%252FAlgorithmsStyleguide%252F#imena" title="Имена">Имена</a></div><div class="wiki-tocitem wiki-tocitem_level_2 i-bem wiki-tocitem_js_inited" data-woof="{&quot;wiki-tocitem&quot;:{&quot;href&quot;:&quot;#prodvinutyezamechanija&quot;}}"><a class="wiki-link" href="https://wiki.yandex.ru/shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide/?from=%252Fshad%252FAlgorithmsStyleguide%252F#prodvinutyezamechanija" title="Продвинутые замечания">Продвинутые замечания</a></div></fieldset><h2 class="wiki-head wf-head i-bem wiki-head_js_inited wf-head_js_inited wf-head_active_yes" data-woof="{&quot;wiki-head&quot;:{}}" data-wf="{&quot;anchor&quot;:&quot;osnovnyepravila&quot;,&quot;section_local&quot;:1,&quot;includesPath&quot;:[],&quot;text&quot;:&quot;Основные правила&quot;}" data-bem="{&quot;wf-head&quot;:{}}"><div class="wiki-head__anchors"><a class="wiki-head__anchor" name="osnovnyepravila"></a></div><span class="wiki-head__text">Основные правила</span><div class="wiki-head__anchor-link"><a class="wiki-link" href="https://wiki.yandex.ru/shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide/?from=%252Fshad%252FAlgorithmsStyleguide%252F#osnovnyepravila">§</a><a class="link link_theme_normal link_role_edit wf-head__edit-link i-bem" data-bem="{&quot;link&quot;:{}}" tabindex="0" href="https://wiki.yandex.ru/shad/groups/2019/semester1/algorithms1/algorithmsstyleguide/.edit?section=1&amp;goanchor=h-1">правка</a></div></h2><div class="wiki-p">Прежде, чем писать какой-либо код, обязательно прочитайте C++ Style Guide, на нашем курсе мы требуем полного выполнения <a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://google.github.io/styleguide/cppguide.html" target="_blank">Google C++ Style Guide</a></div><details class="wiki-cut i-bem wiki-cut_js_inited" data-woof="{&quot;wiki-cut&quot;:{}}"><summary class="wiki-cut__summary"><span class="wiki-cut__summary-inner">Какие пункты из Google C++ Style Guide наиболее важны:</span><span class="woof-icon woof-icon_type_awesome-angle-up"></span><span class="woof-icon woof-icon_type_awesome-angle-down"></span></summary><ul class="wiki-list"><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">Scoping</div><ul class="wiki-list"><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://google.github.io/styleguide/cppguide.html#Local_Variables" target="_blank">Local Variables</a></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://google.github.io/styleguide/cppguide.html#Static_and_Global_Variables" target="_blank">Static and Global Variables</a></div></div></li></ul></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">Classes</div><ul class="wiki-list"><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://google.github.io/styleguide/cppguide.html#Doing_Work_in_Constructors" target="_blank">Doing Work in Constructors</a></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://google.github.io/styleguide/cppguide.html#Implicit_Conversions" target="_blank">Implicit Conversions</a></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://google.github.io/styleguide/cppguide.html#Structs_vs._Classes" target="_blank">Structs vs. Classes</a></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://google.github.io/styleguide/cppguide.html#Access_Control" target="_blank">Access Control</a></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://google.github.io/styleguide/cppguide.html#Declaration_Order" target="_blank">Declaration Order</a></div></div></li></ul></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">Functions</div><ul class="wiki-list"><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://google.github.io/styleguide/cppguide.html#Function_Parameter_Ordering" target="_blank">Parameter Ordering</a></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://google.github.io/styleguide/cppguide.html#Write_Short_Functions" target="_blank">Write Short Functions</a></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://google.github.io/styleguide/cppguide.html#Reference_Arguments" target="_blank">Reference Arguments</a> (с оговоркой про выходные параметры примитивных типов в <a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="https://wiki.school.yandex.ru/shad/groups/2016/Semester1/Algorithms1/Styleguide/#jazykc" target="_blank">п. 14</a>)</div></div></li></ul></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">Other C++ Features</div><ul class="wiki-list"><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://google.github.io/styleguide/cppguide.html#Casting" target="_blank">Casting</a></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://google.github.io/styleguide/cppguide.html#Preincrement_and_Predecrement" target="_blank">Preincrement and Predecrement</a></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://google.github.io/styleguide/cppguide.html#Use_of_const" target="_blank">Use of const</a></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://google.github.io/styleguide/cppguide.html#Use_of_constexpr" target="_blank">Use of constexpr</a></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://google.github.io/styleguide/cppguide.html#Integer_Types" target="_blank">Integer Types</a></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://google.github.io/styleguide/cppguide.html#0_and_nullptr/NULL" target="_blank">0 and nullptr/NULL</a></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://google.github.io/styleguide/cppguide.html#auto" target="_blank">auto</a></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://google.github.io/styleguide/cppguide.html#Braced_Initializer_List" target="_blank">Braced Initializer List</a></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://google.github.io/styleguide/cppguide.html#Lambda_expressions" target="_blank">Lambda Expressions</a></div></div></li></ul></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://google.github.io/styleguide/cppguide.html#Naming" target="_blank">Naming</a></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://google.github.io/styleguide/cppguide.html#Formatting" target="_blank">Formatting</a></div></div></li></ul></details><div class="wiki-p">Ваша задача на этом курсе — написать наиболее простой, понятный, читаемый и гибкий код среди тех, которые проходят ограничения по времени и по памяти. То есть в первую очередь должна быть правильной асимптотическая сложность, а потом сразу же думайте, как все сделать максимально просто.</div><div class="wiki-p"><strong class="wiki-bold">Боритесь с дублированием кода</strong><br><ins class="wiki-underline"><strong class="wiki-bold">Это самое большое возможное зло</strong></ins>. Если в процессе написания вам понадобилось копировать и вставить кусок своего кода в этот же код, то это первый признак того, что происходит дублирование. Постарайтесь детектировать идентичные и похожие места, вынесите общую часть в отдельную функцию или класс и воспользуйтесь ей дважды с разными аргументами.</div><div class="wiki-p"><strong class="wiki-bold">Старайтесь писать аккуратно</strong><br>Удаляйте лишний, неиспользуемый, закомментированный код, удаляйте переменные и функции, которые вам на самом деле не нужны, остальные называйте понятно.</div><h3 class="wiki-head wf-head i-bem wiki-head_js_inited wf-head_js_inited wf-head_active_yes" data-woof="{&quot;wiki-head&quot;:{}}" data-wf="{&quot;anchor&quot;:&quot;sintaksis&quot;,&quot;section_local&quot;:2,&quot;includesPath&quot;:[],&quot;text&quot;:&quot;Синтаксис&quot;}" data-bem="{&quot;wf-head&quot;:{}}"><div class="wiki-head__anchors"><a class="wiki-head__anchor" name="sintaksis"></a></div><span class="wiki-head__text">Синтаксис</span><div class="wiki-head__anchor-link"><a class="wiki-link" href="https://wiki.yandex.ru/shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide/?from=%252Fshad%252FAlgorithmsStyleguide%252F#sintaksis">§</a><a class="link link_theme_normal link_role_edit wf-head__edit-link i-bem" data-bem="{&quot;link&quot;:{}}" tabindex="0" href="https://wiki.yandex.ru/shad/groups/2019/semester1/algorithms1/algorithmsstyleguide/.edit?section=2&amp;goanchor=h-2">правка</a></div></h3><div class="wiki-p">На код должно быть приятно смотреть, его должно быть легко читать. Вы его пишете один раз, сохраняете, после чего его читают много раз, поэтому выгодно потратить при написании немного времени на приведение кода в порядок, чтобы впоследствии сократить своё и чужое время на чтение.\<br>Простые правила ниже служат для улучшения визуального восприятия.</div><ul class="wiki-list"><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">Используйте 4 пробела для отступа. Данный размер отступа является наиболее распространенным, требуется на курсе C++, поэтому используйте его всюду для единообразия. 4 пробела также является оптимальным размером для отступа согласно <a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://homepages.inf.ed.ac.uk/dts/pm/Papers/nasa-c-style.pdf" target="_blank"><span class="woof-icon woof-icon_type_awesome-file-alt"></span>NASA</a>.</div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">Вокруг всех бинарных операторов (<div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">=, ==, +, -, *, /, &gt;, &lt;&lt;</code></div></div> и др.) должны быть пробелы с обеих сторон. Исключением являются операторы <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">., -&gt;, ::</code></div></div>.</div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">После запятой должен быть пробел.</div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">Между закрывающейся круглой скобкой и открывающейся фигурной должен быть пробел.</div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">Не жадничайте с пустыми строками. Вставляйте всегда пустые строки между определениями глобальных функций, классов, констант, typedef'ов, include'ов, между объявлениями методов и функций, между реализациями функций, между объявлениями классов и реализациями функций и т.д.</div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">Вставляйте пустые строки в код реализации функций, чтобы подчеркнуть разделение логических частей кода.</div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">Не размещайте if, else, for, while и др. на одной строке со своим statement:</div></div></li></ul><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_multiline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code c++ hljs cpp"><pre class="b-page-code__pre"><span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (condition) statement;
<span class="hljs-keyword"><span class="hljs-keyword">else</span></span> statement;
...
<span class="hljs-keyword"><span class="hljs-keyword">for</span></span> (...) statement;
</pre></code></div></div><div class="wiki-p">Это, во-первых, ухудшает читаемость кода. Вы можете вообще один из statement'ов не заметить или ошибочно решить, что он относится к if'у:</div><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code c++ hljs cpp"><span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (number % <span class="hljs-number"><span class="hljs-number">2</span></span> == <span class="hljs-number"><span class="hljs-number">0</span></span>) <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">cout</span></span> &lt;&lt; <span class="hljs-string"><span class="hljs-string">"Even\n"</span></span>; even = <span class="hljs-literal"><span class="hljs-literal">true</span></span>;
</code></div></div><div class="wiki-p">А во-вторых, при отладке debugger'ом невозможно понять, выполнив команду "Step Over", выполнилось или не выполнилось условие (или сколько итераций цикла прошло).</div><ul class="wiki-list"><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">Также рекомендуется всегда обрамлять <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">if, else, for, while</code></div></div> фигурными скобками:</div></div></li></ul><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_multiline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code c++ hljs cpp"><pre class="b-page-code__pre"><span class="hljs-keyword"><span class="hljs-keyword">for</span></span> (<span class="hljs-keyword"><span class="hljs-keyword">int</span></span> index = <span class="hljs-number"><span class="hljs-number">0</span></span>; index &lt; <span class="hljs-built_in"><span class="hljs-built_in">array</span></span>.size(); ++index) {
    statement1;
    statement2;
    ...
}
</pre></code></div></div><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_multiline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code c++ hljs cpp"><pre class="b-page-code__pre"><span class="hljs-keyword"><span class="hljs-keyword">for</span></span> (<span class="hljs-keyword"><span class="hljs-keyword">auto</span></span> number : <span class="hljs-built_in"><span class="hljs-built_in">array</span></span>) {
    statement1;
    statement2;
    ...
}
</pre></code></div></div><div class="wiki-p">даже если внутри только один <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">statement</code></div></div>.</div><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_multiline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code c++ hljs cpp"><pre class="b-page-code__pre"><span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (number % <span class="hljs-number"><span class="hljs-number">2</span></span> == <span class="hljs-number"><span class="hljs-number">0</span></span>) {
    <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">cout</span></span> &lt;&lt; <span class="hljs-string"><span class="hljs-string">"Even\n"</span></span>;
}
</pre></code></div></div><div class="wiki-p">Это более читаемо и безопасно. В варианте без скобок легко ошибиться, например, вот так:</div><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_multiline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code c++ hljs cpp"><pre class="b-page-code__pre"><span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (number % <span class="hljs-number"><span class="hljs-number">2</span></span> == <span class="hljs-number"><span class="hljs-number">0</span></span>)
    <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">cout</span></span> &lt;&lt; <span class="hljs-string"><span class="hljs-string">"Even\n"</span></span>;
    even = <span class="hljs-literal"><span class="hljs-literal">true</span></span>;
</pre></code></div></div><div class="wiki-p">Легко подумать, что код <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">even = true;</code></div></div> тоже находится под if'ом.</div><h3 class="wiki-head wf-head i-bem wiki-head_js_inited wf-head_js_inited wf-head_active_yes" data-woof="{&quot;wiki-head&quot;:{}}" data-wf="{&quot;anchor&quot;:&quot;jazykc&quot;,&quot;section_local&quot;:3,&quot;includesPath&quot;:[],&quot;text&quot;:&quot;Язык C&quot;}" data-bem="{&quot;wf-head&quot;:{}}"><div class="wiki-head__anchors"><a class="wiki-head__anchor" name="jazykc"></a></div><span class="wiki-head__text">Язык C++</span><div class="wiki-head__anchor-link"><a class="wiki-link" href="https://wiki.yandex.ru/shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide/?from=%252Fshad%252FAlgorithmsStyleguide%252F#jazykc">§</a><a class="link link_theme_normal link_role_edit wf-head__edit-link i-bem" data-bem="{&quot;link&quot;:{}}" tabindex="0" href="https://wiki.yandex.ru/shad/groups/2019/semester1/algorithms1/algorithmsstyleguide/.edit?section=3&amp;goanchor=h-3">правка</a></div></h3><div class="wiki-p">Существуют разные языки программирования: C, C++, Java, Python и великое множество других. Между ними есть очевидные внешние сходства и различия: как написать цикл, как определить оператор, как создать класс. Однако основные их отличия кроются в принятых в них методах решения типовых задач и инструментах: если писать цикл по индексу, то какие должны быть его границы? если определить оператор, каков должен быть тип принимаемых аргументов и возвращаемого значения? если создавать класс, какие переменные-члены стоит в нем определять, какие методы, что следует вынести во внешние функции? На все эти вопросы можно дать разные ответы, и все они будут отчасти верными. Есть и общие рекомендации и конструкции, которые зарекомендовали себя за долгое время использования, как надежные и удобные, а также примеры, как делать не надо. Некоторые из них описаны в этом разделе.</div><ol class="wiki-list wiki-list_list-type_decimal" start="1"><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">using namespace std;</code></div></div> использовать <details class="wiki-cut i-bem wiki-cut_js_inited" data-woof="{&quot;wiki-cut&quot;:{}}"><summary class="wiki-cut__summary"><span class="wiki-cut__summary-inner">нельзя.</span><span class="woof-icon woof-icon_type_awesome-angle-up"></span><span class="woof-icon woof-icon_type_awesome-angle-down"></span></summary><div class="wiki-p">Включать целый namespace опасно, так как из-за этого может возникнуть конфликт имен. Вследствие чего могут возникнуть нетривиальные ошибки компиляции/линковки, а если не повезет, то переменная из namespace может совпасть по названию с какой-то вашей переменной, про которую вы не помните ее область видимости, что приведет к еще более сложнонаходимым багам, хоть все и скомпилируется, но иногда вы будете использовать переменную, думая, что это ваша переменная, и в ней такое-то значение, а значение будет совсем другим. Если нужно использовать много раз <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">std::vector</code></div></div>, напишите <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">using std::vector;</code></div></div> если <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">cout</code></div></div>, то <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">using std::cout;</code></div></div> и т.д. Кроме того, включая <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">namespace</code></div></div>, вы нарушаете сам принцип использования namespace'ов.</div></details></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">Использовать массивы фиксированной длины <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">int[]</code></div></div>, <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">int*</code></div></div> не рекомендуется - используйте вместо них <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">std::vector&lt;int&gt;</code></div></div>.</div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">Не используйте C-type строки <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">char[]</code></div></div> и <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">char*</code></div></div> - используйте вместо них <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">std::string</code></div></div>.</div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-block"><div class="wiki-p">Не используйте ввод-вывод в стиле С через функции <details class="wiki-cut i-bem wiki-cut_js_inited" data-woof="{&quot;wiki-cut&quot;:{}}"><summary class="wiki-cut__summary"><span class="wiki-cut__summary-inner">scanf, printf:</span><span class="woof-icon woof-icon_type_awesome-angle-up"></span><span class="woof-icon woof-icon_type_awesome-angle-down"></span></summary><div class="wiki-p">Используйте вместо них операторы &gt;&gt; и &lt;&lt; у <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">std::cin</code></div></div> и <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">std::cout</code></div></div> соответственно. Если при этом в задаче большой размер ввода-вывода (от 100000 чисел), то необходимо использовать несколько дополнительных приемов, чтобы ваш ввод-вывод работал достаточно быстро, иначе вы можете получить Time Limit Exceeded. Эти приемы описаны ниже.</div></details></div><details class="wiki-cut i-bem wiki-cut_js_inited" data-woof="{&quot;wiki-cut&quot;:{}}"><summary class="wiki-cut__summary"><span class="wiki-cut__summary-inner">Пример на пункты 1 -- 4:</span><span class="woof-icon woof-icon_type_awesome-angle-up"></span><span class="woof-icon woof-icon_type_awesome-angle-down"></span></summary><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_multiline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__line-numbers c++ hljs cpp"><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">1</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">2</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">3</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">4</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">5</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">6</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">7</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">8</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">9</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">10</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">11</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">12</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">13</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">14</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">15</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">16</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">17</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">18</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">19</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">20</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">21</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">22</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">23</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">24</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">25</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">26</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">27</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">28</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">29</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">30</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">31</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">32</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">33</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">34</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">35</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">36</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">37</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">38</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">39</span></span></div></code><code class="b-page-code__code c++ hljs cpp"><pre class="b-page-code__pre"><span class="hljs-meta"><span class="hljs-meta">#</span><span class="hljs-meta-keyword"><span class="hljs-meta"><span class="hljs-meta-keyword">include</span></span></span><span class="hljs-meta"> </span><span class="hljs-meta-string"><span class="hljs-meta"><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span></span>
<span class="hljs-meta"><span class="hljs-meta">#</span><span class="hljs-meta-keyword"><span class="hljs-meta"><span class="hljs-meta-keyword">include</span></span></span><span class="hljs-meta"> </span><span class="hljs-meta-string"><span class="hljs-meta"><span class="hljs-meta-string">&lt;string&gt;</span></span></span></span>
<span class="hljs-meta"><span class="hljs-meta">#</span><span class="hljs-meta-keyword"><span class="hljs-meta"><span class="hljs-meta-keyword">include</span></span></span><span class="hljs-meta"> </span><span class="hljs-meta-string"><span class="hljs-meta"><span class="hljs-meta-string">&lt;vector&gt;</span></span></span></span>

<span class="hljs-keyword"><span class="hljs-keyword">using</span></span> <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">string</span></span>;
<span class="hljs-keyword"><span class="hljs-keyword">using</span></span> <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">vector</span></span>;

<span class="hljs-built_in"><span class="hljs-built_in">vector</span></span>&lt;<span class="hljs-built_in"><span class="hljs-built_in">string</span></span>&gt; Input() {
    <span class="hljs-keyword"><span class="hljs-keyword">size_t</span></span> rows;
    <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">cin</span></span> &gt;&gt; rows;
    <span class="hljs-built_in"><span class="hljs-built_in">vector</span></span>&lt;<span class="hljs-built_in"><span class="hljs-built_in">string</span></span>&gt; table;
    table.reserve(rows);
    <span class="hljs-keyword"><span class="hljs-keyword">for</span></span> (<span class="hljs-keyword"><span class="hljs-keyword">size_t</span></span> row = <span class="hljs-number"><span class="hljs-number">0</span></span>; row &lt; rows; ++row) {
        <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">string</span></span> line;
        <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">cin</span></span> &gt;&gt; line;
        table.push_back(line);
    }
    <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> table;
}

<span class="hljs-built_in"><span class="hljs-built_in">vector</span></span>&lt;<span class="hljs-built_in"><span class="hljs-built_in">string</span></span>&gt; Process(<span class="hljs-built_in"><span class="hljs-built_in">vector</span></span>&lt;<span class="hljs-built_in"><span class="hljs-built_in">string</span></span>&gt; table) {
    <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::reverse(table.begin(), table.end());
    <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> table;
}

<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">Output</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(</span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">const</span></span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">vector</span></span></span></span><span class="hljs-function"><span class="hljs-params">&lt;</span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">string</span></span></span></span><span class="hljs-function"><span class="hljs-params">&gt;&amp; table)</span></span></span><span class="hljs-function"> </span></span>{
    <span class="hljs-keyword"><span class="hljs-keyword">for</span></span> (<span class="hljs-keyword"><span class="hljs-keyword">const</span></span> <span class="hljs-keyword"><span class="hljs-keyword">auto</span></span>&amp; row : table) {
        <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">cout</span></span> &lt;&lt; row &lt;&lt; <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">endl</span></span>;
    }
}

<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">int</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">main</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{
    <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::ios_base::sync_with_stdio(<span class="hljs-literal"><span class="hljs-literal">false</span></span>);
    <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">cin</span></span>.tie(<span class="hljs-literal"><span class="hljs-literal">nullptr</span></span>);
    <span class="hljs-keyword"><span class="hljs-keyword">const</span></span> <span class="hljs-keyword"><span class="hljs-keyword">auto</span></span>&amp; table = Input();
    table = Process(table);
    Output(table);
    <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> <span class="hljs-number"><span class="hljs-number">0</span></span>;
}
</pre></code></div></div></details><div class="wiki-p"><span class="wiki-remark wiki-remark_color_red">Важно</span> По умолчанию для <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">iostream</code></div></div> включен режим совместимости с <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">stdio</code></div></div>, который позволяет одновременно использовать оба интерфейса для ввода/вывода. В этом режиме производительность <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">std::cin</code></div></div> и <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">std::cout</code></div></div> понижается в несколько раз. <details class="wiki-cut i-bem wiki-cut_js_inited" data-woof="{&quot;wiki-cut&quot;:{}}"><summary class="wiki-cut__summary"><span class="wiki-cut__summary-inner">Подробнее</span><span class="woof-icon woof-icon_type_awesome-angle-up"></span><span class="woof-icon woof-icon_type_awesome-angle-down"></span></summary><div class="wiki-p">Поэтому если размер ввода/вывода имеет порядок от 100000 чисел, вам надо будет отключить этот режим. Делать это надо до совершения каких-либо операций ввода-вывода, желательно первой же строкой в программе:</div><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_multiline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code c++ hljs cpp"><pre class="b-page-code__pre"><span class="hljs-meta"><span class="hljs-meta">#</span><span class="hljs-meta-keyword"><span class="hljs-meta"><span class="hljs-meta-keyword">include</span></span></span><span class="hljs-meta"> </span><span class="hljs-meta-string"><span class="hljs-meta"><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span></span>

<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">int</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">main</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{
    <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::ios_base::sync_with_stdio(<span class="hljs-literal"><span class="hljs-literal">false</span></span>);
    ...
    <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> <span class="hljs-number"><span class="hljs-number">0</span></span>;
}
</pre></code></div></div><div class="wiki-p">Также обратите внимание на то, что <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">std::cout</code></div></div> может работать слишком медленно, если вы выводите порядка 100000 чисел или более, и при этом у <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">std::cout</code></div></div> регулярно очищается буфер. Буфер очищается при каждом выводе <tt class="wiki-monospace">std::endl</tt>, так что в случае большого вывода лучше выводить <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">"\n"</code></div></div> вместо <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">std::endl</code></div></div>. Также буфер <tt class="wiki-monospace">std::cout</tt> очищается при каждом вводе через <tt class="wiki-monospace">std::cin</tt> <br> это связано с тем, что при пользовательском вводе-выводе через обычный <tt class="wiki-monospace">std::cin</tt> и <tt class="wiki-monospace">std::cout</tt> в консоли необходимо перед тем, как запрашивать очередной ввод от пользователя, показать ему последний вывод перед этим, а значит и очистить буфер. Эта проблема для задач с большим выводом решается с помощью вызова <tt class="wiki-monospace">std::cin.tie(nullptr);</tt> в самом начале программы. Выполнение всех этих рекомендаций приведет к тому, что ввод-вывод при помощи потоков <tt class="wiki-monospace">std::cin</tt> и <tt class="wiki-monospace">std::cout</tt> будет работать не медленнее ввода-вывода через <tt class="wiki-monospace">printf</tt> и <tt class="wiki-monospace">scanf</tt> на задачах с большим вводом-выводом. Подробнее см. <a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://stackoverflow.com/questions/9274057" target="_blank">здесь</a></div></details></div></div></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">Если используется значение типа истина/ложь, то используйте тип <tt class="wiki-monospace">bool</tt>, а не <tt class="wiki-monospace">int</tt>.</div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-block"><div class="wiki-p">Не используйте тип <tt class="wiki-monospace">long</tt>. <details class="wiki-cut i-bem wiki-cut_js_inited" data-woof="{&quot;wiki-cut&quot;:{}}"><summary class="wiki-cut__summary"><span class="wiki-cut__summary-inner">Подробнее</span><span class="woof-icon woof-icon_type_awesome-angle-up"></span><span class="woof-icon woof-icon_type_awesome-angle-down"></span></summary><div class="wiki-p">Более стандартный тип -- <tt class="wiki-monospace">int</tt>, к нему у всех уже привыкли глаза, и <tt class="wiki-monospace">long</tt> с теми же намерениями -- просто смотрится странно. На 32-битных машинах оба типа являются 32-битными и ничем не отличаются, поэтому используйте <tt class="wiki-monospace">int</tt> вместо <tt class="wiki-monospace">long</tt>. Если вам нужен 64-битный тип, придется воспользоваться типом <tt class="wiki-monospace">int64_t</tt>.</div></details></div></div></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">При прочих равных, используйте преинкремент <tt class="wiki-monospace">++i</tt>, а не постинкремент <tt class="wiki-monospace">i++</tt>. Это полезная привычка. В случае int'ов это все равно, но если у вас будет в коде сложный итератор, то в процессе постинкремента создается его копия в памяти, что может создать вам неожиданные тормоза и повышенное использование памяти, а догадаться о том, что вся проблема -- в коротком выражении <tt class="wiki-monospace">it++</tt> -- будет сложно.</div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><tt class="wiki-monospace">main</tt> должен заканчиваться <tt class="wiki-monospace">return 0;</tt>, в противном случае на некоторых компиляторах программа может завершиться с ненулевым кодом возврата, что в свою очередь приводит к Run-time error в тестирующей системе.</div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-block"><div class="wiki-p">Вставляйте слово <tt class="wiki-monospace">const</tt> везде, где только это возможно по смыслу. <details class="wiki-cut i-bem wiki-cut_js_inited" data-woof="{&quot;wiki-cut&quot;:{}}"><summary class="wiki-cut__summary"><span class="wiki-cut__summary-inner">Подробнее</span><span class="woof-icon woof-icon_type_awesome-angle-up"></span><span class="woof-icon woof-icon_type_awesome-angle-down"></span></summary><div class="wiki-p">Если какая-то переменная по сути меняться в функции не должна, она должна быть <tt class="wiki-monospace">const</tt>. Если метод класса не меняет при вызове содержимое класса, он должен быть <tt class="wiki-monospace">const</tt>-методом. Таким образом вы обезопасите себя от многих глупых ошибок: они отловятся еще на этапе компиляции.<br>Если у вас из-за того, что вы где-то поставили в правильном месте <tt class="wiki-monospace">const</tt>, не компилируется код, то <tt class="wiki-monospace">const</tt> выполнил свою главную задачу. Тогда надо не его убирать, а найти и исправить проблему в другом месте: вы где-то еще забыли поставить <tt class="wiki-monospace">const</tt> или изменяете переменную, которую не собирались изменять. Надо в этом разобраться, доставить <tt class="wiki-monospace">const</tt> туда, где он еще нужен, а не удалять там, где он вам "мешает".</div></details></div></div></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-block"><div class="wiki-p">Используйте везде в программе индексацию с нуля. <details class="wiki-cut i-bem wiki-cut_js_inited" data-woof="{&quot;wiki-cut&quot;:{}}"><summary class="wiki-cut__summary"><span class="wiki-cut__summary-inner">Подробнее</span><span class="woof-icon woof-icon_type_awesome-angle-up"></span><span class="woof-icon woof-icon_type_awesome-angle-down"></span></summary><div class="wiki-p">Если какие-то входные или выходные данные в задаче используют индексацию с единицы, лучше в функции ввода, соответственно вывода, переведите индексацию из одной системы в другую, а везде внутри программы, помимо функций ввода и вывода пользуйтесь индексацией с нуля. Весь язык C++ так спроектирован, что индексация с нуля гораздо удобнее, а как только вы начинаете использовать индексацию с единицы, становится неудобно, появляются вычитания единицы из переменных по всему коду и т.д.</div></details></div></div></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">Задумывайтесь о переполнениях типов. Если у вас есть две переменные типа <tt class="wiki-monospace">int</tt>, значение каждой равно миллиону, и вы их перемножаете, то тип переполнится (максимальное значение -- 2<sup class="wiki-superscript">31</sup> - 1), и вы получите неправильный результат. Необходимо перед перемножением привести обе переменные к 64-битному типу <tt class="wiki-monospace">int64_t</tt>. Если у вас есть две <tt class="wiki-monospace">int</tt> переменные со значением два миллиарда и вы их складываете, -- тоже произойдет переполнение, тоже нужно предварительно приводить к <tt class="wiki-monospace">int64_t</tt>.</div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-block"><div class="wiki-p">Не вычитайте никогда просто так ничего из <tt class="wiki-monospace">container.size()</tt>, где <tt class="wiki-monospace">container</tt> --  какой-нибудь контейнер из STL. <details class="wiki-cut i-bem wiki-cut_js_inited" data-woof="{&quot;wiki-cut&quot;:{}}"><summary class="wiki-cut__summary"><span class="wiki-cut__summary-inner">Подробнее</span><span class="woof-icon woof-icon_type_awesome-angle-up"></span><span class="woof-icon woof-icon_type_awesome-angle-down"></span></summary><div class="wiki-p">Например, <tt class="wiki-monospace">vector.size()</tt> возвращает беззнаковый <tt class="wiki-monospace">size_t</tt> (который обычно просто синоним для <tt class="wiki-monospace">unsigned long</tt>), и если вы будете из него вычитать, то можете легко получить переполнение. Например, если вектор пустой, а вы вычитаете единицу, чтобы узнать последний элемент, или вектор состоит только из одного элемента, а вы вычитаете 2, чтобы узнать предпоследний элемент, и т.д. Всегда приводите результат вызова <tt class="wiki-monospace">size()</tt> к int'у, если вам совершенно необходимо вычесть из <tt class="wiki-monospace">size()</tt>. При этом в самом распространенном случае,<br>когда вам нужно написать цикл <tt class="wiki-monospace">for</tt>, проходящий по всем элементам, кроме, скажем, последних десяти, надо просто писать не так<br><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_multiline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code c++ hljs cpp"><pre class="b-page-code__pre">)
<span class="hljs-comment"><span class="hljs-comment">// Wrong! If container.size() &lt; 10, you'll get an infinite cycle.</span></span>
<span class="hljs-keyword"><span class="hljs-keyword">for</span></span> (<span class="hljs-keyword"><span class="hljs-keyword">int</span></span> index = <span class="hljs-number"><span class="hljs-number">0</span></span>; index &lt; container.size() - <span class="hljs-number"><span class="hljs-number">10</span></span>; ++index) {
    ...
}
</pre></code></div></div></div><div class="wiki-p">В этом цикле, если, к примеру, <div class="wiki-formatter wiki-formatter_format_code wiki-formatter_type_inline wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code no-highlight">container.size() == 5</code></div></div>, то вы получаете реально цикл</div><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_multiline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code c++ hljs cpp"><pre class="b-page-code__pre"><span class="hljs-comment"><span class="hljs-comment">// Note that 4294967291 &gt; MAX_INT, so the cycle is infinite</span></span>
<span class="hljs-keyword"><span class="hljs-keyword">for</span></span> (<span class="hljs-keyword"><span class="hljs-keyword">int</span></span> index = <span class="hljs-number"><span class="hljs-number">0</span></span>; index &lt; <span class="hljs-number"><span class="hljs-number">4294967291</span></span>; ++index) {
    ...
}
</pre></code></div></div><div class="wiki-p">А пишите лучше всегда так</div><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_multiline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code c++ hljs cpp"><pre class="b-page-code__pre"><span class="hljs-comment"><span class="hljs-comment">// Correct: adding to int</span></span>
<span class="hljs-keyword"><span class="hljs-keyword">for</span></span> (<span class="hljs-keyword"><span class="hljs-keyword">int</span></span> index = <span class="hljs-number"><span class="hljs-number">0</span></span>; index + <span class="hljs-number"><span class="hljs-number">10</span></span> &lt; container.size(); ++index) {
    ...
}
</pre></code></div></div><div class="wiki-p">ну или хотя бы так</div><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_multiline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code c++ hljs cpp"><pre class="b-page-code__pre"><span class="hljs-comment"><span class="hljs-comment">// Correct: casted to int</span></span>
<span class="hljs-keyword"><span class="hljs-keyword">for</span></span> (<span class="hljs-keyword"><span class="hljs-keyword">int</span></span> index = <span class="hljs-number"><span class="hljs-number">0</span></span>; index &lt; <span class="hljs-keyword"><span class="hljs-keyword">static_cast</span></span>&lt;<span class="hljs-keyword"><span class="hljs-keyword">int</span></span>&gt;(container.size()) - <span class="hljs-number"><span class="hljs-number">10</span></span>; ++index) {
    ...
}
</pre></code></div></div><div class="wiki-p">Соответственно, если вам нужно вызвать функцию, в которую вы должны передать индекс первого и последнего элемента вектора, то делайте это так:</div><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code c++ hljs cpp">SomeFunction(<span class="hljs-number"><span class="hljs-number">0</span></span>, <span class="hljs-keyword"><span class="hljs-keyword">static_cast</span></span>&lt;<span class="hljs-keyword"><span class="hljs-keyword">int</span></span>&gt;(container.size()) - <span class="hljs-number"><span class="hljs-number">1</span></span>)
</code></div></div><div class="wiki-p">По-хорошему, здесь надо бы еще проверять, что в контейнере что-то есть, но к int'у приводить надо в любом случае, иначе появляются неочевидные баги.</div></details></div></div></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-block"><div class="wiki-p">Не пользуйтесь макросами для определения констант. <details class="wiki-cut i-bem wiki-cut_js_inited" data-woof="{&quot;wiki-cut&quot;:{}}"><summary class="wiki-cut__summary"><span class="wiki-cut__summary-inner">Подробнее</span><span class="woof-icon woof-icon_type_awesome-angle-up"></span><span class="woof-icon woof-icon_type_awesome-angle-down"></span></summary><div class="wiki-p">Макросы — это очень опасная и неудобная вещь. Их раскрывает специальный препроцессор, который начинает работать еще до компилятора C<small class="wiki-small">, и он ничего не знает о самом языке. Все конструкции раскрываются буквально. В связи с этим есть множество возможных неочевидных побочных эффектов, а у компилятора нет возможности выполнить проверку типов, константность и т.д. Читайте более подробно об этом в книге Майерса «Effective C</small>».</div><div class="wiki-p">Итак, неправильный вариант:</div><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code c++ hljs cpp"><span class="hljs-meta"><span class="hljs-meta">#</span><span class="hljs-meta-keyword"><span class="hljs-meta"><span class="hljs-meta-keyword">define</span></span></span><span class="hljs-meta"> MAX_LENGTH 100000  </span><span class="hljs-comment"><span class="hljs-meta"><span class="hljs-comment">// Wrong! Don't use macros!</span></span></span></span>
</code></div></div><div class="wiki-p">Правильный вариант:</div><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code c++ hljs cpp"><span class="hljs-keyword"><span class="hljs-keyword">constexpr</span></span> <span class="hljs-keyword"><span class="hljs-keyword">int</span></span> kMaxLegth = <span class="hljs-number"><span class="hljs-number">100000</span></span>;  <span class="hljs-comment"><span class="hljs-comment">// Correct</span></span>
</code></div></div></details></div></div></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-block"><div class="wiki-p">Входные параметры передавайте в функцию по константной ссылке; по ссылке — чтобы они лишний раз не копировались, по константной — чтобы вы не могли их случайно изменить. <strong class="wiki-bold">Не забывайте про const!</strong> Выходные параметры передавайте в функции по указателю — чтобы вы могли их изменить; по указателю, а не по ссылке, — чтобы вы могли в месте вызова отличить входные параметры от выходных по амперсанду перед именем переменной. Размещайте входные параметры перед выходными в списке параметров функции или метода.<br>Аргументы примитивных типов следует передавать в функции по-другому. Входные параметры типов <tt class="wiki-monospace">int</tt>, <tt class="wiki-monospace">char</tt>, <tt class="wiki-monospace">bool</tt>, <tt class="wiki-monospace">double</tt> передавайте по значению. Они будут копироваться, но это так же почти бесплатно, как и в случае ссылок или указателей. При этом вы не сможете их изменить изнутри функции, что и нужно, т.к. это входные параметры. Если вам нужны эти типы как выходные параметры функции, лучше передавайте их по ссылке, т.к. иначе легко внутри функции перепутать указатель на переменную с самой переменной, и сделать совсем не то, что вы собирались.</div><details class="wiki-cut i-bem wiki-cut_js_inited" data-woof="{&quot;wiki-cut&quot;:{}}"><summary class="wiki-cut__summary"><span class="wiki-cut__summary-inner">Примеры:</span><span class="woof-icon woof-icon_type_awesome-angle-up"></span><span class="woof-icon woof-icon_type_awesome-angle-down"></span></summary><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_multiline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__line-numbers c++ hljs cpp"><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">1</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">2</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">3</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">4</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">5</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">6</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">7</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">8</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">9</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">10</span></span></div></code><code class="b-page-code__code c++ hljs cpp"><pre class="b-page-code__pre"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">Input</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(</span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">std</span></span></span></span><span class="hljs-function"><span class="hljs-params">::</span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">vector</span></span></span></span><span class="hljs-function"><span class="hljs-params">&lt;point&gt;* sequence, </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">int</span></span></span></span><span class="hljs-function"><span class="hljs-params">&amp; points_to_cover)</span></span></span></span>;

<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">FindMaximumsInSlidingWindow</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(
    </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">const</span></span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">std</span></span></span></span><span class="hljs-function"><span class="hljs-params">::</span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">vector</span></span></span></span><span class="hljs-function"><span class="hljs-params">&lt;</span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">int</span></span></span></span><span class="hljs-function"><span class="hljs-params">&gt;&amp; sequence, 
    </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">const</span></span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">std</span></span></span></span><span class="hljs-function"><span class="hljs-params">::</span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">string</span></span></span></span><span class="hljs-function"><span class="hljs-params">&amp; shifts, 
    </span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">vector</span></span></span></span><span class="hljs-function"><span class="hljs-params">&lt;</span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">int</span></span></span></span><span class="hljs-function"><span class="hljs-params">&gt;* maximums)</span></span></span></span>;

<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">double</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">FindMinimumCoveringCircleRadius</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(
    </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">const</span></span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">std</span></span></span></span><span class="hljs-function"><span class="hljs-params">::</span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">vector</span></span></span></span><span class="hljs-function"><span class="hljs-params">&lt;point&gt;&amp; points, 
    </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">int</span></span></span></span><span class="hljs-function"><span class="hljs-params"> points_to_cover)</span></span></span></span>;
</pre></code></div></div><div class="wiki-p">Примеры вызовов:</div><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_multiline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__line-numbers c++ hljs cpp"><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">1</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">2</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">3</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">4</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">5</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">6</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">7</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">8</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">9</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">10</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">11</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">12</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">13</span></span></div></code><code class="b-page-code__code c++ hljs cpp"><pre class="b-page-code__pre"><span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">vector</span></span>&lt;<span class="hljs-keyword"><span class="hljs-keyword">int</span></span>&gt; sequence;
<span class="hljs-keyword"><span class="hljs-keyword">int</span></span> points_to_cover;
Input(&amp;sequence, points_to_cover);
...
...
<span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">vector</span></span>&lt;<span class="hljs-keyword"><span class="hljs-keyword">int</span></span>&gt; sequence;
<span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">string</span></span> shifts;
Input(&amp;sequence, &amp;shifts);
<span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">vector</span></span>&lt;<span class="hljs-keyword"><span class="hljs-keyword">int</span></span>&gt; maximums;
FindMaximumsInSlidingWindow(sequence, shifts, &amp;maximums);
...
...
<span class="hljs-keyword"><span class="hljs-keyword">double</span></span> min_radius = FindMinimumCoveringRadius(points, points_to_cover);
</pre></code></div></div><div class="wiki-p">Обратите внимание на амперсанды &amp; перед переменными, в которые записывается результат вызова функции.<br>Если функция возвращает одну величину, пусть она делает это по значению. Это столь же быстро, зато удобнее в месте вызова.<br>Пример:</div><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_multiline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__line-numbers c++ hljs cpp"><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">1</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">2</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">3</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">4</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">5</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">6</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">7</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">8</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">9</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">10</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">11</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">12</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">13</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">14</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">15</span></span></div></code><code class="b-page-code__code c++ hljs cpp"><pre class="b-page-code__pre"><span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">vector</span></span>&lt;<span class="hljs-keyword"><span class="hljs-keyword">int</span></span>&gt; ReadNumbers(<span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::istream&amp; input_stream = <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">cin</span></span>) {
    <span class="hljs-keyword"><span class="hljs-keyword">size_t</span></span> sequence_length;
    input_stream &gt;&gt; sequence_length;
    <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">vector</span></span>&lt;<span class="hljs-keyword"><span class="hljs-keyword">int</span></span>&gt; numbers(sequence_length);
    <span class="hljs-keyword"><span class="hljs-keyword">for</span></span> (<span class="hljs-keyword"><span class="hljs-keyword">size_t</span></span> i = <span class="hljs-number"><span class="hljs-number">0</span></span>; i &lt; numbers.size(); ++i) {
        input_stream &gt;&gt; numbers[i];
    }
    <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> numbers;
}

<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">int</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">main</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{
    <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">vector</span></span>&lt;<span class="hljs-keyword"><span class="hljs-keyword">int</span></span>&gt; first_sequence = ReadNumbers();
    <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">vector</span></span>&lt;<span class="hljs-keyword"><span class="hljs-keyword">int</span></span>&gt; second_sequence = ReadNumbers();
    ...
}
</pre></code></div></div><div class="wiki-p">Лишнего копирования в этом месте не возникнет. Дело в том, что эта операция настолько часто встречается, что компиляторы научились ее распознавать и генерировать эффективный код для нее. Технология называется return value optimization, известна также под своей аббревиатурой RVO. Можно и следует по умолчанию считать, что она есть и исправно работает, и писать код так, чтобы им было удобнее пользоваться. Чтобы узнать об этом более подробно, поищите в вашем любимом поисковике ее описание по названию.<br>Если переданный на вход параметр для выполнения алгоритма необходимо изменять, -- это не означает, что параметр автоматически становится выходным параметром. Если целью алгоритма не является менять входной параметр, то изменять этот параметр функция не должна: пользователь алгоритма этого не ожидает, и будет очень не рад такому побочному эффекту. Кроме того, если просто передать параметр по ссылке и поменять его внутри, то пользователь даже не будет догадываться о том, что переданные им данные будут изменены. Появляющиеся вследствие таких побочных эффектов баги очень тяжело искать. Соответственно, в таких ситуациях есть два решения: передавать параметр по значению или передавать как обычно ко константной ссылке, а внутри функции копировать и изменять уже копию. Первый вариант (передавать по значению) обычно предпочтителен. Т.к. объект передается по значению, его можно менять внутри функции в процессе работы алгоритма (например, сортировать, если это вектор), при этом объект не изменится в месте вызова функции. При копировании аргумента, переданного по константной ссылке, в функции появляется два одинаковых по смыслу объекта, что может привести к путанице и использованию одного из них вместо другого, кроме того, копировать приходится вручную, тогда как при передаче объекта по значению копия делается автоматически, без написания дополнительного кода.<br>Пример:</div><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_multiline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__line-numbers c++ hljs cpp"><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">1</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">2</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">3</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">4</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">5</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">6</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">7</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">8</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">9</span></span></div></code><code class="b-page-code__code c++ hljs cpp"><pre class="b-page-code__pre"><span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">vector</span></span>&lt;<span class="hljs-keyword"><span class="hljs-keyword">int</span></span>&gt; Unique(<span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">vector</span></span>&lt;<span class="hljs-keyword"><span class="hljs-keyword">int</span></span>&gt; numbers) {
    <span class="hljs-comment"><span class="hljs-comment">// here we sort a copy of given numbers,</span></span>
    <span class="hljs-comment"><span class="hljs-comment">// so that the user does not lose his data</span></span>
    <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::sort(numbers.begin(), numbers.end());
    numbers.erase(
        <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::unique(numbers.begin(), numbers.end()),
        numbers.end());
    <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> numbers;
}
</pre></code></div></div></details></div></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-block"><div class="wiki-p">Разделяйте использование <tt class="wiki-monospace">class</tt> и <tt class="wiki-monospace">struct</tt>: классом должна быть любая сущность, которая содержит в себе логику, тогда как структура <br> это набор данных, объединенных в один объект. В классе все переменные-члены должны быть приватными, для доступа к ним делайте аксессоры, в структуре все переменные должны быть публичными, нетривиальных методов быть не должно.</div><details class="wiki-cut i-bem wiki-cut_js_inited" data-woof="{&quot;wiki-cut&quot;:{}}"><summary class="wiki-cut__summary"><span class="wiki-cut__summary-inner">Пример</span><span class="woof-icon woof-icon_type_awesome-angle-up"></span><span class="woof-icon woof-icon_type_awesome-angle-down"></span></summary><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_multiline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__line-numbers c++ hljs cpp"><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">1</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">2</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">3</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">4</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">5</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">6</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">7</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">8</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">9</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">10</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">11</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">12</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">13</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">14</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">15</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">16</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">17</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">18</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">19</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">20</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">21</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">22</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">23</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">24</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">25</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">26</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">27</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">28</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">29</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">30</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">31</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">32</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">33</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">34</span></span></div></code><code class="b-page-code__code c++ hljs cpp"><pre class="b-page-code__pre"><span class="hljs-keyword"><span class="hljs-keyword">struct</span></span> Point {
    <span class="hljs-keyword"><span class="hljs-keyword">double</span></span> x, y;
};

<span class="hljs-comment"><span class="hljs-comment">// Compares first by x-coordinate, then by y-coordinate</span></span>
<span class="hljs-keyword"><span class="hljs-keyword">bool</span></span> <span class="hljs-keyword"><span class="hljs-keyword">operator</span></span> &lt; (<span class="hljs-keyword"><span class="hljs-keyword">const</span></span> Point&amp; first, <span class="hljs-keyword"><span class="hljs-keyword">const</span></span> Point&amp; second) {
    <span class="hljs-keyword"><span class="hljs-keyword">if</span></span> (first.x != second.x) {
        <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> first.x &lt; second.x;
    }
    <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> first.y &lt; second.y;
}

<span class="hljs-keyword"><span class="hljs-keyword">class</span></span> Path {
<span class="hljs-keyword"><span class="hljs-keyword">public</span></span>:
    Path(<span class="hljs-keyword"><span class="hljs-keyword">double</span></span> time, <span class="hljs-keyword"><span class="hljs-keyword">double</span></span> average_speed)
        : time_(time), average_speed_(average_speed)
    {}
    
    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">double</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">Time</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">const</span></span></span><span class="hljs-function"> </span></span>{
        <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> time_;
    }
    
    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">double</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">AverageSpeed</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">const</span></span></span><span class="hljs-function"> </span></span>{
        <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> average_speed_;
    }
    
    <span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">double</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">Distance</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">const</span></span></span><span class="hljs-function"> </span></span>{
        <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> time_ * average_speed_;
    }

<span class="hljs-keyword"><span class="hljs-keyword">private</span></span>:
    <span class="hljs-keyword"><span class="hljs-keyword">double</span></span> time_;
    <span class="hljs-keyword"><span class="hljs-keyword">double</span></span> average_speed_;
};
</pre></code></div></div><div class="wiki-p">От структуры точки нам ничего не требуется, поэтому она состоит только из двух публичных полей. Метод <tt class="wiki-monospace">compare</tt> добавлять нельзя, задача сравнения решается определением внешнего оператора &lt;. Если нужно, например, запретить изменять координаты (устанавливать их только при создании точки), то ее нужно делать классом с двумя get-аксессорами.<br>В классе <tt class="wiki-monospace">Path</tt> хранится две величины, а получать требуется три. Если бы <tt class="wiki-monospace">time</tt> и <tt class="wiki-monospace">averageSpeed</tt> были публичными переменными, то доступ к значениям скорости и времени происходил бы как <tt class="wiki-monospace">path.time</tt> и <tt class="wiki-monospace">path.averageSpeed</tt>, а доступ к пройденному расстоянию -- как <tt class="wiki-monospace">path.distance()</tt>. Для нахождения расстояния приходится добавлять скобки, то есть всегда приходится помнить о том, что расстояние -- это метод, а время и скорость -- переменные. Если по какой-то причине (например, недостаточная точность) в будущем хранимые переменные нужно будет поменять и перейти к системе (время, расстояние), то в нашем случае с приватными переменными лишь изменится реализация методов, сохранив интерфейс класса. В случае же с публичными переменными придется изменять интерфейс класса, что немедленно влечет изменение всего кода, который его использует. Хранить все три величины переменными категорически нельзя: если время было равно 1, то действие <tt class="wiki-monospace">path.time = 0.0</tt> нарушит инвариант <tt class="wiki-monospace">time * speed == distance</tt>, что приведет к совершенно непредсказуемым последствиям.<br>Итак, если вам нужно хранить данные под общим именем, вам подойдет структура; во всех остальных случаях создавайте полноценный класс только с приватными переменные-членами.</div></details></div></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-block"><div class="wiki-p">Старайтесь не использовать по возможности динамическое выделение памяти (с помощью <tt class="wiki-monospace">new</tt> и <tt class="wiki-monospace">malloc</tt>): <details class="wiki-cut i-bem wiki-cut_js_inited" data-woof="{&quot;wiki-cut&quot;:{}}"><summary class="wiki-cut__summary"><span class="wiki-cut__summary-inner">Почему</span><span class="woof-icon woof-icon_type_awesome-angle-up"></span><span class="woof-icon woof-icon_type_awesome-angle-down"></span></summary><div class="wiki-p">если вы будете его использовать, вам необходимо будет заботиться и об "уборке мусора", т.е. освобождении памяти. Правильный, безопасный способ это делать -- не очень простой и не входит в материалы курса. Кроме того, вызов <tt class="wiki-monospace">new</tt> довольно медленный, поэтому если очень много раз это сделать, то можете не влезть в Time limit. Если вам интересно, как правильно управлять динамической памятью, читайте книгу Майерса "Effective C++" или наберите в поисковике "RAII".</div></details></div></div></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-block"><div class="wiki-p">При использовании <tt class="wiki-monospace">vector</tt> имейте в виду, что у него есть удобные методы: различные конструкторы, позволяющие задать размер и значение элемента вектора по умолчанию, операторы присваивания, сравнения (лексикографического) и оператор <tt class="wiki-monospace">swap</tt>. <details class="wiki-cut i-bem wiki-cut_js_inited" data-woof="{&quot;wiki-cut&quot;:{}}"><summary class="wiki-cut__summary"><span class="wiki-cut__summary-inner">Примеры:</span><span class="woof-icon woof-icon_type_awesome-angle-up"></span><span class="woof-icon woof-icon_type_awesome-angle-down"></span></summary><div class="wiki-p">Создание двумерного вектора размером <tt class="wiki-monospace">rows * columns</tt>, заполненного значением 100:</div><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_multiline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code c++ hljs cpp"><pre class="b-page-code__pre"><span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">vector</span></span>&lt; <span class="hljs-built_in"><span class="hljs-built_in">vector</span></span>&lt;<span class="hljs-keyword"><span class="hljs-keyword">int</span></span>&gt; &gt; cache(
    rows,
    <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">vector</span></span>&lt;<span class="hljs-keyword"><span class="hljs-keyword">int</span></span>&gt;(columns, <span class="hljs-number"><span class="hljs-number">100</span></span>));
</pre></code></div></div><div class="wiki-p">Перестановка двух векторов местами без копирования всего содержимого:</div><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_multiline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code c++ hljs cpp"><pre class="b-page-code__pre"><span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">vector</span></span>&lt;<span class="hljs-keyword"><span class="hljs-keyword">int</span></span>&gt; first(<span class="hljs-number"><span class="hljs-number">1000000</span></span>, <span class="hljs-number"><span class="hljs-number">1</span></span>);
<span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::<span class="hljs-built_in"><span class="hljs-built_in">vector</span></span>&lt;<span class="hljs-keyword"><span class="hljs-keyword">int</span></span>&gt; second(<span class="hljs-number"><span class="hljs-number">2000000</span></span>, <span class="hljs-number"><span class="hljs-number">2</span></span>);
first.swap(second);
</pre></code></div></div><div class="wiki-p">Здесь меняются местами реально два внутренних указателя <tt class="wiki-monospace">int*</tt>, что значительно эффективнее, чем копирование векторов целиком, особенно если они большого размера.</div></details></div></div></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">Обратите внимание, что для взятия модуля вещественного числа (<tt class="wiki-monospace">float</tt>, <tt class="wiki-monospace">double</tt>) необходимо пользоваться функцией <tt class="wiki-monospace">fabs</tt>, а не <tt class="wiki-monospace">abs</tt>. При этом в Microsoft Visual Studio сделана перегрузка <tt class="wiki-monospace">abs</tt>, которая работает и для вещественных чисел даже если вы не подключили заголовочный файл с ней напрямую. Однако на сервере при этом будет <tt class="wiki-monospace">abs(-2.75)</tt> != <tt class="wiki-monospace">2.75</tt>.</div></div></li></ol><div class="wiki-p">В общем же случае стоит отметить, что в <tt class="wiki-monospace">c++</tt> существует 2 версии <tt class="wiki-monospace">abs</tt>:</div><ul class="wiki-list"><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">в <tt class="wiki-monospace">cmath</tt>, определенная для вещественных чисел (<tt class="wiki-monospace">float</tt>, <tt class="wiki-monospace">double</tt> и <tt class="wiki-monospace">long double</tt>).</div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">в <tt class="wiki-monospace">cstdlib</tt>, определенная для целых чисел (<tt class="wiki-monospace">int</tt>, <tt class="wiki-monospace">long</tt> и <tt class="wiki-monospace">long long</tt>).</div></div></li></ul><div class="wiki-p">Распространенная ошибка состоит в том, что подключается <tt class="wiki-monospace">cmath</tt> и используется <tt class="wiki-monospace">abs</tt> оттуда, что приводит к приведению целых типов в <tt class="wiki-monospace">double</tt>, что в свою очередь может приводить к ошибкам округления при вызове <tt class="wiki-monospace">abs(long long)</tt>.</div><div class="wiki-p">Поэтому общее правило следующее:</div><ul class="wiki-list"><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">для взятия модуля <strong class="wiki-bold">вещественного</strong> числа необходимо подключить <tt class="wiki-monospace">cmath</tt> и использовать <tt class="wiki-monospace">fabs</tt>.</div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">для взятия модуля <strong class="wiki-bold">целого</strong> числа необходимо подключить <tt class="wiki-monospace">cstdlib</tt> и использовать <tt class="wiki-monospace">abs</tt>.</div><ol class="wiki-list wiki-list_list-type_decimal" start="19"><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-block"><div class="wiki-p">Если вы пользуетесь новым стандартом <tt class="wiki-monospace">c++11(c++0x)</tt>, то для генерации (псевдо)случайных чисел рекомендуется использовать заголовок <tt class="wiki-monospace">random</tt> с генератором псевдослучайных чисел <tt class="wiki-monospace">std::mt19937</tt> и распределениями:</div><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_multiline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code c++ hljs cpp"><pre class="b-page-code__pre">  <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::uniform_int_distribution
  <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::uniform_real_distribution
</pre></code></div></div><div class="wiki-p">и другими, если понадобятся. <details class="wiki-cut i-bem wiki-cut_js_inited" data-woof="{&quot;wiki-cut&quot;:{}}"><summary class="wiki-cut__summary"><span class="wiki-cut__summary-inner">Подробнее</span><span class="woof-icon woof-icon_type_awesome-angle-up"></span><span class="woof-icon woof-icon_type_awesome-angle-down"></span></summary><div class="wiki-p">В противном случае, имейте в виду, что значение <tt class="wiki-monospace">RAND_MAX</tt> <br> ограничения сверху на значения, выдаваемые функцией <tt class="wiki-monospace">rand()</tt>,<br> отличаются в разных компиляторах. Тщательно изучайте, каково значение компилятора в вашем компиляторе, а каково <br> на компиляторе в автоматической системе (компилятор вы выбираете при сдаче задания). Подходит ли вам такое ограничение сверху, или нужно построить на базе функции <tt class="wiki-monospace">rand()</tt> алгоритм, позволяющий возвращать случайные числа, равномерно распределенные в более широком диапазоне, чем <tt class="wiki-monospace">[0, RAND_MAX - 1]</tt>?<br>При использовании схемы, предложенной новым стандартом <tt class="wiki-monospace">c++11|(c++0x)</tt>, следует обратить внимание на то, где создавать генератор. Каждый алгоритм должен использовать собственный генератор, чтобы добиться независимой работы всех алгоритмов. Например, два алгоритма, использующих случайность, должны работать одинаково, вне зависимости от порядка их вызовов. Такой независимости сложно добиться при использовании функции <tt class="wiki-monospace">rand()</tt>. <br>Например, если вы хотите реализовать рандомизированный алгоритм сортировки, то нужно создать генератор внутри внешней функции, которую и будет вызывать пользователь, и передать его во внутреннюю, где будет реализована вся логика сортировки:</div><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_multiline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code c++ hljs cpp"><pre class="b-page-code__pre"><span class="hljs-meta"><span class="hljs-meta">#</span><span class="hljs-meta-keyword"><span class="hljs-meta"><span class="hljs-meta-keyword">include</span></span></span><span class="hljs-meta"> </span><span class="hljs-meta-string"><span class="hljs-meta"><span class="hljs-meta-string">&lt;random&gt;</span></span></span></span>

<span class="hljs-keyword"><span class="hljs-keyword">template</span></span>&lt;<span class="hljs-keyword"><span class="hljs-keyword">class</span></span> Iterator&gt;
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">Sort</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Iterator begin, Iterator end)</span></span></span><span class="hljs-function"> </span></span>{
    <span class="hljs-built_in"><span class="hljs-built_in">std</span></span>::mt19937 generator;
    QuickSort(begin, end, generator);
}
<span class="hljs-keyword"><span class="hljs-keyword">template</span></span>&lt;<span class="hljs-keyword"><span class="hljs-keyword">class</span></span> Iterator, <span class="hljs-keyword"><span class="hljs-keyword">class</span></span> RandomGenerator&gt;
<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">QuickSort</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Iterator begin, Iterator end, RandomGenerator&amp; generator)</span></span></span><span class="hljs-function"> </span></span>{
    ...
}
</pre></code></div></div></details></div></div></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-block"><div class="wiki-p">В большинстве случаев нельзя сравнивать числа типа <tt class="wiki-monospace">float</tt> и <tt class="wiki-monospace">double</tt> просто операторами &lt;, &gt;, &lt;=, &gt;=, ==: <details class="wiki-cut i-bem wiki-cut_js_inited" data-woof="{&quot;wiki-cut&quot;:{}}"><summary class="wiki-cut__summary"><span class="wiki-cut__summary-inner">почему</span><span class="woof-icon woof-icon_type_awesome-angle-up"></span><span class="woof-icon woof-icon_type_awesome-angle-down"></span></summary><div class="wiki-p">при вычислениях в вещественных типах накапливается погрешность, вследствие чего равные по сути числа, вычисленные с помощью разной последовательности действий, могут получить различные значения в типах <tt class="wiki-monospace">float</tt> и <tt class="wiki-monospace">double</tt>, и даже <tt class="wiki-monospace">a &lt; b</tt> может измениться на <tt class="wiki-monospace">b &lt; a</tt>. Погрешность вычислений можно оценить, используя точные знания о том, как именно выполняются арифметические операции, а также как происходят вычисления в используемых вами функциях. Обычно делать этого точно не нужно, т.к. точность типа <tt class="wiki-monospace">double</tt> позволяет хранить 15-16 знаков, а требуемая в задаче точность обычно порядка 10<sup class="wiki-superscript">-6</sup> или $10<sup class="wiki-superscript">-9</sup>, но не меньше. Однако для того, чтобы корректно сравнивать числа, следует использовать порог сравнения. Примеры:</div><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_multiline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code c++ hljs cpp"><pre class="b-page-code__pre"><span class="hljs-keyword"><span class="hljs-keyword">const</span></span> <span class="hljs-keyword"><span class="hljs-keyword">double</span></span> COMPARISON_THRESHOLD = <span class="hljs-number"><span class="hljs-number">1e-8</span></span>;

<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">bool</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">Less</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(</span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">double</span></span></span></span><span class="hljs-function"><span class="hljs-params"> first, </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">double</span></span></span></span><span class="hljs-function"><span class="hljs-params"> second)</span></span></span><span class="hljs-function"> </span></span>{
    <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> first &lt; second - COMPARISON_THRESHOLD;
}

<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">bool</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">LessOrEqual</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(</span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">double</span></span></span></span><span class="hljs-function"><span class="hljs-params"> first, </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">double</span></span></span></span><span class="hljs-function"><span class="hljs-params"> second)</span></span></span><span class="hljs-function"> </span></span>{
    <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> first &lt; second + COMPARISON_THRESHOLD;
}

<span class="hljs-function"><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-keyword">bool</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">Equal</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(</span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">double</span></span></span></span><span class="hljs-function"><span class="hljs-params"> first, </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">double</span></span></span></span><span class="hljs-function"><span class="hljs-params"> second)</span></span></span><span class="hljs-function"> </span></span>{
    <span class="hljs-keyword"><span class="hljs-keyword">return</span></span> <span class="hljs-built_in"><span class="hljs-built_in">fabs</span></span>(first - second) &lt; COMPARISON_THRESHOLD;
}
</pre></code></div></div></details></div></div></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-block"><div class="wiki-p">Для своих типов (классов, структур), если объекты типа необходимо сравнивать между собой, реализуйте всегда <tt class="wiki-monospace">operator&lt;</tt> и не реализуйте остальные операторы сравнения (<tt class="wiki-monospace">operator&lt;=, operator&gt;, operator&gt;=</tt>): <details class="wiki-cut i-bem wiki-cut_js_inited" data-woof="{&quot;wiki-cut&quot;:{}}"><summary class="wiki-cut__summary"><span class="wiki-cut__summary-inner">почему</span><span class="woof-icon woof-icon_type_awesome-angle-up"></span><span class="woof-icon woof-icon_type_awesome-angle-down"></span></summary><div class="wiki-p">через <tt class="wiki-monospace">operator&lt;</tt> выражаются все остальные, и общепринятая конвенция <br> реализовывать только сравнение на "меньше". В противном случае, дублируется код, а работа различных операторов может оказаться несогласованной. Точно так же, общая конвенция,-- что сортировка объектов по умолчанию делается по возрастанию, и в качестве компаратора передается функция сравнения на "меньше". Это правило необходимо соблюдать, чтобы вашу программу было легко понимать другим программистам.</div></details></div></div></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-block"><div class="wiki-p">Не используйте <tt class="wiki-monospace">std::pair</tt> (за исключением случая, описанного ниже). <details class="wiki-cut i-bem wiki-cut_js_inited" data-woof="{&quot;wiki-cut&quot;:{}}"><summary class="wiki-cut__summary"><span class="wiki-cut__summary-inner">Подробнее:</span><span class="woof-icon woof-icon_type_awesome-angle-up"></span><span class="woof-icon woof-icon_type_awesome-angle-down"></span></summary><div class="wiki-p">Причина в том, что в месте использования объекта <tt class="wiki-monospace">pair</tt> невозможно понять, что кроется за полем <tt class="wiki-monospace">first</tt>, а что -- за полем <tt class="wiki-monospace">second</tt>. Это абстрактные названия, которые могут означать что угодно, а в месте использования никаких указаний на это нет. Даже если в месте определения переменной указать, что в ней хранится в <tt class="wiki-monospace">first</tt> и <tt class="wiki-monospace">second</tt>, при чтении придется постоянно возвращаться к месту определения переменной, чтобы разобраться в коде и убедиться, в частности, что <tt class="wiki-monospace">first</tt> и <tt class="wiki-monospace">second</tt> нигде не перепутаны местами -- часто встречающаяся ошибка! <br>Исключением являются небольшие участки кода (помещающиеся на один экран), в рамках которых создается из имеющихся объектов <tt class="wiki-monospace">pair</tt>, далее удобно используется для какой-нибудь операции (например, сортировка), и затем все <tt class="wiki-monospace">pair</tt> обратно "расшифровываются" в новые объекты и более не используются. Это может быть удобно для сортировки по вторичному параметру, т.к. для <tt class="wiki-monospace">pair</tt> есть оператор сравнения по умолчанию, который сравнивает сначала по <tt class="wiki-monospace">first</tt>, затем по <tt class="wiki-monospace">second</tt>. При этом код легко понять, т.к. <tt class="wiki-monospace">pair</tt> определен и используется в одном очень локальном куске кода, который можно охватить взглядом целиком.</div></details></div></div></div></div></li></ol></div></li></ul><h2 class="wiki-head wf-head i-bem wiki-head_js_inited wf-head_js_inited wf-head_active_yes" data-woof="{&quot;wiki-head&quot;:{}}" data-wf="{&quot;anchor&quot;:&quot;organizacijakoda&quot;,&quot;section_local&quot;:4,&quot;includesPath&quot;:[],&quot;text&quot;:&quot;Организация кода&quot;}" data-bem="{&quot;wf-head&quot;:{}}"><div class="wiki-head__anchors"><a class="wiki-head__anchor" name="organizacijakoda"></a></div><span class="wiki-head__text">Организация кода</span><div class="wiki-head__anchor-link"><a class="wiki-link" href="https://wiki.yandex.ru/shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide/?from=%252Fshad%252FAlgorithmsStyleguide%252F#organizacijakoda">§</a><a class="link link_theme_normal link_role_edit wf-head__edit-link i-bem link_js_inited" data-bem="{&quot;link&quot;:{}}" tabindex="0" href="https://wiki.yandex.ru/shad/groups/2019/semester1/algorithms1/algorithmsstyleguide/.edit?section=4&amp;goanchor=h-4">правка</a></div></h2><div class="wiki-p">Как и любая система, код при разрастании становится все более путаным и сложным. Однако есть способы перевести эту сложность преимущественно в его размер, сохраняя логику ясной и прозрачной. Помогает в этом грамотное структурирование: что может быть классом, что должна делать функция, где что должно объявляться. Оно же позволяет удобно осуществить повторное использование нужных участков кода.</div><ol class="wiki-list wiki-list_list-type_decimal" start="1"><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">У каждой переменной должна быть одна-единственная явная цель. Никогда не создавайте переменных <tt class="wiki-monospace">tmp</tt>, выполняющих несколько разных вспомогательных функций во всем коде. Используйте переменную только с одной целью. Переменные, в названии которых используется <tt class="wiki-monospace">tmp</tt> или <tt class="wiki-monospace">temp</tt>, почти всегда либо бессмысленные и ненужные, либо неправильно названы.</div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p">Объявляйте переменные как можно ближе к месту их первого использования. Старайтесь сразу же инициализировать переменные. Если переменная используется только внутри функции, она должна быть локальной для функции. Если только внутри цикла, она должна быть локальной для цикла. Никогда не делайте глобальных переменных. Локальные переменные блока предпочтительнее по сравнению с локальными переменными функции, локальные переменные функции -- по сравнению с переменными-членами класса, а последние -- по сравнению с глобальными переменными. Стремитесь сократить "время жизни" каждой переменной: чем меньше время жизни переменных, тем меньше переменных приходится одновременно держать в голове при чтении и написании кода. Исследования показывают, что человек может эффективно держать в памяти не более 5-7 переменных одновременно. Большее количество неизбежно приводит к ошибкам.</div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-block"><div class="wiki-p">Разделяйте программу на ввод, решение и вывод, это делает ваш код более модульным.<br>Способы ввода и вывода часто меняются. У нас используются стандартные потоки и определенный описанный формат, в следующий раз те же данные могут быть записаны в файле или в базе данных в другом формате, затем они же могут поставляться уже в виде переменных в более сложной программе, которая использует ваш алгоритм в качестве подпрограммы.<br>Записывайте вход в отдельные переменные и результат работы -- в отдельные. Для их заполнения и вывода напишите отдельные функции. В частности, ваш код становится легче тестируемым, что является важным свойством. Вы можете написать альтернативное решение и сравнить его с вашим, можете запустить стресс-тест.<br>Вообще это две принципиально разные области ответственности: ввод-вывод и преобразование данных. Не смешивайте в одном классе или функции несколько разных областей ответственности: один класс отвечает ровно за одну область. Иначе он разрастается, становится слишком сложным, а две разные области ответственности начинают быть слишком сильно связанными. Это плохо, потому что чем более независимы разные части программы, тем меньше поводов для ошибок и тем проще тестировать части программы по отдельности.</div></div></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-block"><div class="wiki-p">Никогда не используйте "магические константы" в коде. Если у вас где-то в коде встречаются, например, 'a' и 'z', означающие минимальный и максимальный символ алфавита, то их надо заменить на именованные константы. Например так:</div><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_multiline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code c++ hljs cpp"><pre class="b-page-code__pre"><span class="hljs-keyword"><span class="hljs-keyword">const</span></span> <span class="hljs-keyword"><span class="hljs-keyword">char</span></span> MIN_LETTER = <span class="hljs-string"><span class="hljs-string">'a'</span></span>;
<span class="hljs-keyword"><span class="hljs-keyword">const</span></span> <span class="hljs-keyword"><span class="hljs-keyword">char</span></span> MAX_LETTER = <span class="hljs-string"><span class="hljs-string">'z'</span></span>;
...

<span class="hljs-keyword"><span class="hljs-keyword">for</span></span> (<span class="hljs-keyword"><span class="hljs-keyword">char</span></span> letter = MIN_LETTER; letter &lt;= MAX_LETTER; ++letter) {
    ...
}
...
</pre></code></div></div></div></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-block"><div class="wiki-p">Пишите комментарии только по делу. В идеальном случае лучше обходиться вообще без них --- ваш код прокомментирует сам себя. Конечно, так редко удается, поэтому комментарии к классам и функциям бывают полезными.<br>Не нужно оправдывать плохое имя (см. следующий раздел) подробным комментарием. Если у вас встречается объявление вида</div><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_inline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__code c++ hljs cpp"><span class="hljs-keyword"><span class="hljs-keyword">int</span></span> n;  <span class="hljs-comment"><span class="hljs-comment">// number of balls in the bucket</span></span>
</code></div></div><div class="wiki-p">то нужно заменить его на <tt class="wiki-monospace">int number_of_balls;</tt> или <tt class="wiki-monospace">int numBallsInBucket;</tt> в зависимости от принятого стиля, от того, бывают ли шары не в корзине, и от контекста.<br>Писать комментарий следует <strong class="wiki-bold">над</strong> тем, к чему он относится. Комментарии в конце строки значительно удлиняют ее, поэтому ухудшают читаемость. При этом желательно, чтобы строка влезала в 100 символов, а зачастую бывает жесткое ограничение по длине строки (как в нашей системе проверки). Если вы все же пользуетесь комментарием в конце строки, то отделяйте его двумя пробелами от кода.<br>Комментарии к функции должны быть написаны рядом с интерфейсом, а не с реализацией, если они разделены: пользователь будет в первую очередь смотреть на интерфейс, к тому же реализация сторонних библиотек может быть вовсе недоступной. То же самое относится и к классам: комментарии к классу и к его методам должны быть в интерфейсе класса, а не в реализации.<br>Если вы решили снабдить свой код подробными комментариями, указывайте в них то, что будет интересно читающему. Для класса это описание того, для чего класс нужен, как им пользоваться. Для функции и метода --- что они делают, что возвращают, что принимают на вход, какие исключения могут бросать.<br>Вот пример хорошего комментария к функции.</div><div class="wiki-formatter wiki-formatter_format_code wiki-formatter_wiki_yes" style=""><div class="b-page-code b-page-code_multiline_yes i-bem b-page-code_theme_github b-page-code_js_inited" data-woof="{&quot;b-page-code&quot;:{}}"><code class="b-page-code__line-numbers c++ hljs cpp"><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">1</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">2</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">3</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">4</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">5</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">6</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">7</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">8</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">9</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">10</span></span></div><div class="b-page-code__line-number"><span class="hljs-number"><span class="hljs-number">11</span></span></div></code><code class="b-page-code__code c++ hljs cpp"><pre class="b-page-code__pre"><span class="hljs-comment"><span class="hljs-comment">/* Applies per symbol transformation to string.
 * input[i] is transformed into transform[input[i]].
 * If transform map doesn't contain input[i] and defaultSymbol isn't null,
 *   input[i] is transformed to defaultSymbol.
 * If transform map doesn't contain input[i] and defaultSymbol == 0,
 *   function throws TransformError.
 */</span></span>
<span class="hljs-function"><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-built_in">string</span></span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="hljs-function"><span class="hljs-title">TransformString</span></span></span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">(
     </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">const</span></span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">string</span></span></span></span><span class="hljs-function"><span class="hljs-params">&amp; input,
     </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">const</span></span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="hljs-built_in"><span class="hljs-function"><span class="hljs-params"><span class="hljs-built_in">map</span></span></span></span><span class="hljs-function"><span class="hljs-params">&lt;</span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">char</span></span></span></span><span class="hljs-function"><span class="hljs-params">, </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">char</span></span></span></span><span class="hljs-function"><span class="hljs-params">&gt;&amp; transform,
     </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">const</span></span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="hljs-keyword"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">char</span></span></span></span><span class="hljs-function"><span class="hljs-params"> defaultSymbol)</span></span></span></span>;
</pre></code></div></div></div></div></div></li></ol><h3 class="wiki-head wf-head i-bem wiki-head_js_inited wf-head_js_inited wf-head_active_yes" data-woof="{&quot;wiki-head&quot;:{}}" data-wf="{&quot;anchor&quot;:&quot;imena&quot;,&quot;section_local&quot;:5,&quot;includesPath&quot;:[],&quot;text&quot;:&quot;Имена&quot;}" data-bem="{&quot;wf-head&quot;:{}}"><div class="wiki-head__anchors"><a class="wiki-head__anchor" name="imena"></a></div><span class="wiki-head__text">Имена</span><div class="wiki-head__anchor-link"><a class="wiki-link" href="https://wiki.yandex.ru/shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide/?from=%252Fshad%252FAlgorithmsStyleguide%252F#imena">§</a><a class="link link_theme_normal link_role_edit wf-head__edit-link i-bem" data-bem="{&quot;link&quot;:{}}" tabindex="0" href="https://wiki.yandex.ru/shad/groups/2019/semester1/algorithms1/algorithmsstyleguide/.edit?section=5&amp;goanchor=h-5">правка</a></div></h3><div class="wiki-p">У каждой создаваемой сущности в коде есть имя. Сперва автор, а впоследствии, и все читающие код ассоциируют имена с сущностями, которые они обозначают. Чтобы в каждый момент точно понимать, что в переменной хранится, чтобы быть уверенным в том, что вызов функция вернет ожидаемое значение, имена нужно давать осмысленные и грамотно определенные.</div><ol class="wiki-list wiki-list_list-type_decimal" start="1"><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-block"><div class="wiki-p">Имена переменных должны быть длинными и понятными. Каждый раз, когда вы пишете одно-двух-буквенное название переменной или используете что-то вроде cur, должно возникать неприятное чувство. Единственное место, где можно позволить себе однобуквенные переменные,--- в качестве счетчика в очень коротком for'е без вложенных циклов. И то, у вас должны быть серьезные опасения, когда вы это делаете, вы должны делать это осознанно. Иначе можно легко допустить ошибку с индексами, например перепутать i с j, что происходит постоянно, если называть так переменные. Искать такую ошибку вы будете несколько часов или дней. Даже если в описании задачи есть названия R и L, это не значит, что в программе нужно их так называть. Стиль математического текста очень сильно отличается от стиля кода программы. В математическом тексте есть очень много слов, описывающих формулы и то, что в них происходит. В самих формулах ценится краткость. В коде же наоборот, слов, описывающих происходящее, практически нет. Код должен описывать сам себя, названиями переменных, методов и классов. Поэтому названия должны быть очень прозрачными. Не должно быть нужно возвращаться и смотреть вверх в объявление переменной или смотреть на ее инициализацию, чтобы понять, что она в себе содержит.<br>Никогда не называйте переменные <tt class="wiki-monospace">something1</tt> и <tt class="wiki-monospace">something2</tt>, так как очень легко ошибиться и попасть по соседней клавише, тем самым очень легко сделать баг, а искать его будет тяжело. Используйте <tt class="wiki-monospace">something_first</tt> и <tt class="wiki-monospace">something_second</tt> или что-нибудь еще. <i class="wiki-italic">Как выбрать понятное название переменной?</i> Сперва нужно описать переменную на английском (так чтобы из описания было понятно, что хранит переменная), а далее выбирать название исходя из соображений компромисса между длиной и понятностью. (3-5 слов в названии -- это нормально).</div></div></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-block"><div class="wiki-p">Все, что относится к именам переменных, относится и к именам функций, классов и методов. Кроме того, в названиях методов (функций) обязательно должен быть глагол, описывающий действие, которое выполняет метод. Это действие должно быть одно. У каждой функции должна быть одна ясная цель. Если вы понимаете, что не можете придумать название функции без слова And (например, <tt class="wiki-monospace">ReadFromFileAndSort</tt>), значит, функция выполняет две разные цели, и скорее всего, ее нужно разбить на несколько меньших функций (<tt class="wiki-monospace">ReadFromFile</tt> и <tt class="wiki-monospace">Sort</tt>), и из внешней вызывать подряд внутренние.</div></div></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-block"><div class="wiki-p">Не сокращайте слова в названиях. Это ухудшает читаемость кода, а также делает невозможным поиск по нему. Не нужно сокращать <tt class="wiki-monospace">index</tt> до <tt class="wiki-monospace">ind</tt> или <tt class="wiki-monospace">idx</tt>, <tt class="wiki-monospace">current</tt> --- до <tt class="wiki-monospace">cur</tt> и т.д. Единственное исключение --- общепринятые сокращения типа <tt class="wiki-monospace">Http</tt> и т.д.</div></div></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-block"><div class="wiki-p">Выделяйте названия приватных членов классов, это позволяет отличить их от аргументов методов. Наиболее распространенными способами являются подчеркивание в конце: <tt class="wiki-monospace">name_</tt>,--- или префикс <tt class="wiki-monospace">m_</tt>: <tt class="wiki-monospace">m_name</tt>. Начинать имя переменной с подчеркивания не принято; следует помнить о том, что имена, начинающиеся на два подчеркивания или подчеркивание и заглавную букву, зарезервированы стандартом, и использовать их нельзя.</div></div></div></div></li></ol><h2 class="wiki-head wf-head i-bem wiki-head_js_inited wf-head_js_inited wf-head_active_yes" data-woof="{&quot;wiki-head&quot;:{}}" data-wf="{&quot;anchor&quot;:&quot;prodvinutyezamechanija&quot;,&quot;section_local&quot;:6,&quot;includesPath&quot;:[],&quot;text&quot;:&quot;Продвинутые замечания&quot;}" data-bem="{&quot;wf-head&quot;:{}}"><div class="wiki-head__anchors"><a class="wiki-head__anchor" name="prodvinutyezamechanija"></a></div><span class="wiki-head__text">Продвинутые замечания</span><div class="wiki-head__anchor-link"><a class="wiki-link" href="https://wiki.yandex.ru/shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide/?from=%252Fshad%252FAlgorithmsStyleguide%252F#prodvinutyezamechanija">§</a><a class="link link_theme_normal link_role_edit wf-head__edit-link i-bem" data-bem="{&quot;link&quot;:{}}" tabindex="0" href="https://wiki.yandex.ru/shad/groups/2019/semester1/algorithms1/algorithmsstyleguide/.edit?section=6&amp;goanchor=h-6">правка</a></div></h2><ol class="wiki-list wiki-list_list-type_decimal" start="1"><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-block"><div class="wiki-p">Не оптимизируйте преждевременно. Ваш алгоритм должен иметь правильную асимптотическую сложность, чтобы иметь шансы пройти в Time limit. Он должен правильно работать, чтобы не получить Wrong answer. Это два основных тезиса. Не нужно оптимизировать с целью ускорить программу в константу раз, если это хоть сколько-нибудь усложняет код. Старайтесь сделать свое изначальное решение максимально простым. Оптимизировать нужно только после того, как вы четко замерили время работы программы, убедились, что оно слишком большое, определили, какая именно функция создает узкое место. Даже суперпрофессионалы не берутся заранее предсказывать узкие места системы: в наше время, когда компиляторы умеют делать сумасшедшие оптимизации, это практически невозможно предугадать. Поэтому профессионалы и не пытаются делать это заранее и оптимизировать что-либо заранее. Сначала измерьте, найдите узкое место, а потом уже пытайтесь его оптимизировать. Все вышесказанное относится к выносу переменных из цикла для ускорения, к перебору не до n, а до n / 2 и т.д. -- не нужно ничего из этого сделать. Напишите максимально простое решение, добейтесь правильной его работы, и если вдруг после этого оно окажется слишком медленным -- только тогда оптимизируйте. Ваша задача в программах, которые вы пишете на этом курсе,-- написать наиболее простой, понятный, читаемый и гибкий код, среди тех, которые проходят в ограничения по времени и памяти. Помните об этом и не оптимизируйте, жертвуя простотой и удобством.</div></div></div></div></li><li class="wiki-li"><div class="wiki-li__wrapper"><div class="wiki-p"><div class="wiki-block"><div class="wiki-p">Не выполняйте никакую сложную работу в конструкторе, также не обращайтесь в конструкторе к каким-либо внешним для программы объектам, таким как файловая система, стандартные потоки ввода и вывода, базы данных и т.д. В конструкторе должна быть только простейшая инициализация полей класса, автономная или в зависимости от параметров конструктора. Это связано с тестированием класса и гибкостью дизайна.<br>На самом деле, почти всегда класс, который легко тестировать, имеет гибкий дизайн и его удобно использовать, и наоборот. Если у класса в конструкторе<br>происходят какие-то сложные действия (обращение к файлу, базе данных или запуск сложного алгоритма), то его сложно протестировать. Чтобы протестировать класс в юнит-тесте, нужно для начала хотя бы создать экземпляр этого класса.<br>Если для этого требуется какой-то файл или база данных, то это уже получается сразу не юнит-тест, т.к. ему для работы нужны внешние данные, внешние объекты, что неудобно, в идеале тест должен быть изолирован от остальной системы для чистоты эксперимента. Подменить данные, лежащие в базе данных или в файле, существенно сложнее,  чем передать другие значения параметров в какую-то функцию. Для того, чтобы обойти использование файлов и баз данных, придется переделывать класс, в частности убирать у него из конструктора непосредственные обращения к файлам и базе данных. А если это делается не непосредственно в конструкторе этого класса, а в методах других классов, вызываемых в конструкторе, то придется выносить объекты этих классов наружу и подменять их.<br>Если внутри конструктора сложный алгоритм, то его тоже было бы неплохо протестировать, однако это уже становится невозможно, потому что как только мы захотим создать экземпляр класса, так сразу же вызовем конструктор, и там уже весь алгоритм выполнится, отдельные функции, которые он использует протестировать не получится. Если алгоритм работает неправильно, то к моменту создания объекта класса он будет находиться в некорректном состоянии, и тестировать его будет уже бессмысленно.<br>Иногда даже иметь в классе указатели на объекты других конкретных классов и создавать их в конструкторе неправильно. Например, если класс, выполняющий какой-то конкретный алгоритм, имеет у себя указатель на объект для работы с базой данных, который в конструкторе инициализируется для обращения к конкретной базе, то такой класс тоже невозможно протестировать по вышеописанным причинам.<br>На самом деле, нашему алгоритмическому классу нужны от класса, работающего с базой данных, лишь конкретные данные, которые тот берет из базы данных,<br>и скорее всего далеко не все данные, которые есть в базе. Поэтому имеет смысл написать "обертку" вокруг класса, работающего с базой, которая будет обращаться к базе и доставать произвольные данные с помощью внутреннего класса, работающего непосредственно с базой, а наружу отдавать<br>только те куски данных, которые имеют смысл для алгоритмического класса. А для того, чтобы впоследствии можно было работать не только с базой данных, но те же данные брать из файла или откуда-то из памяти другого объекта, нужно сделать общий интерфейс для классов, поставляющих данные алгоритмическому, и конкретный класс, берущий данные именно из базы, породить от этого интерфейса. Под интерфейсом в данном случае имеется в виду класс с чисто виртуальными методами, который определяет интерфейс всех своих потомков, но инстанцировать который невозможно. Далее, в конструктор алгоритмического класса передавать уже указатель на такой интерфейс, а не указатель на конкретный класс для работы с базой данных, и в конструкторе просто копировать этот указатель<br>во внутреннюю переменную для будущего использования. В таком случае при тестировании можно будет создать mock класса, достающего данные, реализовав этот интерфейс. Наш mock будет "подсовывать" алгоритмическому классу те данные, которые мы хотим, то есть абсолютно любые, что и нужно для полного тестирования. Соответственно, мы сможем проверить реакцию на разные крайние случаи, запустить стресс-тест, понять, какие ограничения на данные должен проверять на входе алгоритмический класс. <br>Нам не придется создавать специальные базы данных для тестирования с подмененными данными, мы сможем генерировать эти данные прямо в памяти, в огромных количествах, сможем выполнить хоть 100000 тестов, если каждый из них выполняется быстро. С базами данных это не получится, потому что, во-первых, один тест, обращающийся в процессе к базе данных, уже в любом случае будет занимать существенное время, а во-вторых потому что не получится создать 100000<br>различных таблиц.</div><div class="wiki-p">Более подробное описание, примеры и другие советы для написания хорошо тестируемых классов см. <a class="wiki-link wiki-ref wiki-ref wiki-ref_magiclink_yes i-bem wiki-ref_js_inited" title="Внешняя ссылка (откроется в новом окне)" href="http://misko.hevery.com/attachments/Guide-Writing%20Testable%20Code.pdf" target="_blank"><span class="woof-icon woof-icon_type_awesome-file-alt"></span>здесь</a>.</div></div></div></div></li></ol></div></div><div class="w-comments w-comments_enabled_yes w-comments_short_yes i-bem" data-bem="{&quot;w-comments&quot;:{&quot;supertag&quot;:&quot;shad/groups/2019/semester1/algorithms1/algorithmsstyleguide&quot;,&quot;user&quot;:{&quot;uid&quot;:21359538,&quot;login&quot;:&quot;evg3307&quot;,&quot;first_name&quot;:&quot;Евгения&quot;,&quot;last_name&quot;:&quot;Елистратова&quot;,&quot;display&quot;:&quot;Евгения Елистратова&quot;,&quot;email&quot;:&quot;evg3307@yandex.ru&quot;,&quot;is_admin&quot;:false,&quot;is_external_employee&quot;:false,&quot;is_dismissed&quot;:false,&quot;settings&quot;:{&quot;language&quot;:&quot;ru&quot;,&quot;code_theme&quot;:&quot;github&quot;,&quot;use_new_wf&quot;:false,&quot;use_nodejs_frontend&quot;:true,&quot;use_full_width_content&quot;:false,&quot;propose_content_translation&quot;:false},&quot;avatar&quot;:&quot;21493/enc-9d4b777cc48254e59350250ed08c21a4d4244a9ff2dd625fc99e2cbf3aa36589&quot;},&quot;commentsCount&quot;:5}}"><div class="w-comments__header"><span class="awesome-icon awesome-icon_icon_comments awesome-icon_type_comments"></span><div class="w-comments__caption w-getting-started__elem w-getting-started__elem_comments_1">5 комментариев</div><button class="button2 button2_theme_normal button2_size_s button2_role_short-switch button2_view_classic w-comments__show-comments i-bem" data-bem="{&quot;button2&quot;:{}}" type="button" autocomplete="off" tabindex="0"><span class="button2__text">Показать</span></button><button class="button2 button2_theme_normal button2_size_s button2_role_add-comment-header button2_view_classic w-comments__add-comment i-bem" data-bem="{&quot;button2&quot;:{}}" type="button" autocomplete="off" tabindex="0"><span class="button2__text">Комментировать</span></button><div class="spin2 spin2_size_xxs spin2_type_load-comments spin2_view_default spin2_tone_default"></div></div><div class="w-comments__comments-list"></div><div class="w-comments__show-more"><div class="spin2 spin2_size_xs spin2_role_show-more spin2_view_default spin2_tone_default"></div><button class="button2 button2_theme_normal button2_size_s button2_role_show-more button2_view_classic i-bem" data-bem="{&quot;button2&quot;:{}}" type="button" autocomplete="off" tabindex="0"><span class="button2__text">Показать еще</span></button></div><div class="w-comments__add-comments"><button class="button2 button2_theme_normal button2_size_m button2_role_add-comment button2_view_classic i-bem" data-bem="{&quot;button2&quot;:{}}" type="button" autocomplete="off" tabindex="0"><span class="button2__text">Комментировать</span></button><div class="w-comments__add-comment-form"><div class="w-comments__add-comment-caption"></div><div class="w-comments__add-comment-editor"></div><div class="w-comments__add-comment-buttons"><button class="button2 button2_theme_normal button2_size_s button2_role_cancel-new-comment button2_view_classic i-bem" data-bem="{&quot;button2&quot;:{}}" type="button" autocomplete="off" tabindex="0"><span class="button2__text">Отменить</span></button><div class="w-comments__right"><div class="spin2 spin2_size_xxs spin2_type_add-comment spin2_view_default spin2_tone_default"></div><button class="button2 button2_size_s button2_theme_action button2_role_submit-new-comment button2_disabled_yes button2_view_classic i-bem" data-bem="{&quot;button2&quot;:{&quot;_tabindex&quot;:&quot;0&quot;}}" type="button" autocomplete="off" disabled="" aria-disabled="true"><span class="button2__text">Отправить</span></button></div></div></div></div></div></div><div class="b-footer i-bem" data-bem="{&quot;b-footer&quot;:{}}"><div class="footer clearfix" role="contentinfo"><div class="footer__column footer__column_side_right"><div class="copyright">©&nbsp;<span class="copyright__dates">2020</span>&nbsp;&nbsp;ООО «<a class="copyright__link" href="https://yandex.ru/">ЯНДЕКС</a>»</div></div></div></div></div></div></div><div class="w-bug-report i-bem" data-bem="{&quot;w-bug-report&quot;:{&quot;name&quot;:&quot;bug-report&quot;}}"><button class="button2 button2_theme_normal button2_size_l button2_type_check button2_view_classic w-bug-report__button i-bem" data-bem="{&quot;button2&quot;:{}}" type="button" autocomplete="off" tabindex="0" aria-pressed="false"><span class="icon icon_size_l icon_type_bug button2__icon"></span></button></div><div class="mi-error i-bem mi-error_js_inited" data-bem="{&quot;mi-error&quot;:{}}"></div><div class="popup2 popup2_target_anchor popup2_autoclosable_yes popup2_theme_normal popup2_getting-started_yes popup2_hiding_yes popup2_view_classic w-getting-started__popup i-bem popup2_js_inited" data-bem="{&quot;popup2&quot;:{&quot;tailSize&quot;:25}}"><div class="popup2__tail"></div></div><div class="popup2 popup2_theme_normal popup2_target_anchor popup2_autoclosable_yes popup2_hiding_yes popup2_view_classic i-bem popup2_js_inited popup2_direction_bottom-right" data-bem="{&quot;popup2&quot;:{&quot;directions&quot;:[&quot;bottom-right&quot;]}}" style="z-index: 1001; left: 2247.83px; top: 52px; position: fixed;"><div class="b-page-more-panel i-bem b-page-more-panel_js_inited"><div class="b-page-more-panel-item w-action w-action_type_sub w-getting-started__elem w-getting-started__elem_page-menu_2 i-bem w-action_js_inited" data-bem="{&quot;b-page-more-panel-item&quot;:{},&quot;w-action&quot;:{}}">Создать подстраницу</div><div class="b-page-more-panel-item w-action w-action_type_tree i-bem w-action_js_inited" data-bem="{&quot;b-page-more-panel-item&quot;:{},&quot;w-action&quot;:{}}">Структура раздела</div><div class="b-page-more-panel-item w-action w-action_type_move i-bem w-action_js_inited" data-bem="{&quot;b-page-more-panel-item&quot;:{},&quot;w-action&quot;:{&quot;type&quot;:&quot;page&quot;}}">Перенести</div><div class="b-page-more-panel-item w-action w-action_type_subscribe i-bem w-action_js_inited" data-bem="{&quot;b-page-more-panel-item&quot;:{},&quot;w-action&quot;:{}}">Подписать пользователей</div><div class="b-page-more-panel-item w-action w-action_type_access i-bem w-action_js_inited" data-bem="{&quot;b-page-more-panel-item&quot;:{},&quot;w-action&quot;:{}}">Настроить доступ</div><div class="b-page-more-panel-item b-page-more-panel-item_type_old-page w-action w-action_type_old-page i-bem w-action_js_inited" data-bem="{&quot;b-page-more-panel-item&quot;:{},&quot;w-action&quot;:{&quot;actuality&quot;:&quot;actual&quot;}}">Поставить метку «Данные устарели»</div><div class="b-page-more-panel-item w-action w-action_type_referrers i-bem w-action_js_inited" data-bem="{&quot;b-page-more-panel-item&quot;:{},&quot;w-action&quot;:{}}">Ссылающиеся страницы</div><div class="b-page-more-panel-item w-action w-action_type_settings i-bem w-action_js_inited" data-bem="{&quot;b-page-more-panel-item&quot;:{},&quot;w-action&quot;:{&quot;user&quot;:{&quot;uid&quot;:21359538,&quot;login&quot;:&quot;evg3307&quot;,&quot;first_name&quot;:&quot;Евгения&quot;,&quot;last_name&quot;:&quot;Елистратова&quot;,&quot;display&quot;:&quot;Евгения Елистратова&quot;,&quot;email&quot;:&quot;evg3307@yandex.ru&quot;,&quot;is_admin&quot;:false,&quot;is_external_employee&quot;:false,&quot;is_dismissed&quot;:false,&quot;settings&quot;:{&quot;language&quot;:&quot;ru&quot;,&quot;code_theme&quot;:&quot;github&quot;,&quot;use_new_wf&quot;:false,&quot;use_nodejs_frontend&quot;:true,&quot;use_full_width_content&quot;:false,&quot;propose_content_translation&quot;:false},&quot;avatar&quot;:&quot;21493/enc-9d4b777cc48254e59350250ed08c21a4d4244a9ff2dd625fc99e2cbf3aa36589&quot;}}}">Настройки</div><div class="b-page-more-panel-item w-action w-action_type_delete i-bem w-action_js_inited" data-bem="{&quot;b-page-more-panel-item&quot;:{},&quot;w-action&quot;:{&quot;type&quot;:&quot;page&quot;,&quot;breadcrumbs&quot;:[{&quot;tag&quot;:&quot;shad&quot;,&quot;url&quot;:&quot;/shad&quot;,&quot;title&quot;:&quot;Школа Анализа Данных&quot;,&quot;is_active&quot;:true},{&quot;tag&quot;:&quot;shad/groups&quot;,&quot;url&quot;:&quot;/shad/groups&quot;,&quot;title&quot;:&quot;Groups&quot;,&quot;is_active&quot;:true},{&quot;tag&quot;:&quot;shad/groups/2019&quot;,&quot;url&quot;:&quot;/shad/groups/2019&quot;,&quot;title&quot;:&quot;Курсы набора 2019&quot;,&quot;is_active&quot;:true},{&quot;tag&quot;:&quot;shad/groups/2019/Semester1&quot;,&quot;url&quot;:&quot;/shad/groups/2019/Semester1&quot;,&quot;title&quot;:&quot;Курсы 1 семестра (первый курс 2019)&quot;,&quot;is_active&quot;:true},{&quot;tag&quot;:&quot;shad/groups/2019/Semester1/Algorithms1&quot;,&quot;url&quot;:&quot;/shad/groups/2019/Semester1/Algorithms1&quot;,&quot;title&quot;:&quot;Алгоритмы и структуры данных&quot;,&quot;is_active&quot;:true},{&quot;tag&quot;:&quot;shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide&quot;,&quot;url&quot;:&quot;/shad/groups/2019/Semester1/Algorithms1/AlgorithmsStyleguide&quot;,&quot;title&quot;:&quot;Styleguide&quot;,&quot;is_active&quot;:true}]}}">Удалить</div><div class="w-action w-action_type_unsubscribe i-bem w-action_js_inited" data-bem="{&quot;w-action&quot;:{}}"></div><div class="w-action w-action_type_subpages-change-author i-bem w-action_js_inited" data-bem="{&quot;w-action&quot;:{}}"></div><div class="w-action w-action_type_files i-bem w-action_js_inited" data-bem="{&quot;w-action&quot;:{}}"></div><div class="w-action w-action_type_authors i-bem w-action_js_inited" data-bem="{&quot;w-action&quot;:{}}"></div><div class="w-action w-action_type_authorship i-bem w-action_js_inited" data-bem="{&quot;w-action&quot;:{}}"></div><div class="w-action w-action_type_request-page-author i-bem w-action_js_inited" data-bem="{&quot;w-action&quot;:{}}"></div></div></div></body></html>